/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cellst.Interface.BlobSolving;

import ij.*;
import ij.gui.*;
import ij.process.*;

import java.awt.*;
import java.util.*;

import cellst.Image.*;
import cellst.Main.*;

/**
 * Dialog showing zoom over blobs with more than 2 links one after another so
 * that user can choose which ones to remove.
 *
 * @author Magali Vangkeosay, David Parsons
 */
public class LinksDialog extends javax.swing.JDialog
{
  // ==========================================================================
  // ===                 CONSTRUCTOR
  // ==========================================================================

  /**
   * Creates new form CheckLinksDialog.
   */
  public LinksDialog(java.awt.Frame parent, boolean modal)
  {
    super(parent, modal);
    initComponents();
  }

  // ==========================================================================
  // ===                  GENERATED CODE
  // ==========================================================================
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    imageLinks = new cellst.Interface.ImagePanel();
    quitButton = new javax.swing.JButton();
    nextButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    addComponentListener(new java.awt.event.ComponentAdapter()
    {
      public void componentShown(java.awt.event.ComponentEvent evt)
      {
        formComponentShown(evt);
      }
    });

    imageLinks.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    imageLinks.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        imageLinksMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout imageLinksLayout = new javax.swing.GroupLayout(imageLinks);
    imageLinks.setLayout(imageLinksLayout);
    imageLinksLayout.setHorizontalGroup(
      imageLinksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );
    imageLinksLayout.setVerticalGroup(
      imageLinksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 373, Short.MAX_VALUE)
    );

    quitButton.setText("Quit");
    quitButton.setPreferredSize(new java.awt.Dimension(150, 30));
    quitButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        quitButtonActionPerformed(evt);
      }
    });

    nextButton.setText("Next");
    nextButton.setPreferredSize(new java.awt.Dimension(150, 30));
    nextButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        nextButtonActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(imageLinks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(layout.createSequentialGroup()
            .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 206, Short.MAX_VALUE)
            .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(imageLinks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  // ==========================================================================
  // ===                  EVENT METHODS
  // ==========================================================================
  /**
   * Quit button clicked closes dialog.
   *
   * @param evt
   */
  private void quitButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_quitButtonActionPerformed
  {//GEN-HEADEREND:event_quitButtonActionPerformed
    // ================= Close dialog =========================================
    dispose();
  }//GEN-LAST:event_quitButtonActionPerformed

  /**
   * As dialog is opened : update fluobt, update imageLinks, found first blb to
   * have too much links and zoom on it if it exists.
   *
   * @param evt
   */
  private void formComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentShown
  {//GEN-HEADEREND:event_formComponentShown
    // ============== Update fluobt and imageLinks ============================
    fluobt = ((BlobsCheckFrame) getParent()).getFluobt();
    imageLinks.setImage(
        new ImageStack(fluobt.getIWidth(), fluobt.getIHeight(), 1), 1);

    // ============= Search first blob with too much link =====================
    // -------------- Search in slice  1 --------------------------------------
    slice = 1;
    updateCurrSet();
    setBlobLabToNextBlob();

    // ----------------- While blob isn't found, ------------------------------
    //       increment slice number we are searching in
    while (blobLab == -1 && slice < fluobt.getISize())
    {
      slice++;
      updateCurrSet();
      setBlobLabToNextBlob();

    }

    // ------------- If no blob was found in any slice, -----------------------
    //       dispose dialog and return  : there are no link to change
    if (blobLab == -1 && slice == fluobt.getISize())
    {
      IJ.showMessage("No link problem detected.");
      dispose();
      return;
    }

    // ========================= Update preview and zoom on blob ==============
    updatePreview();
    ImageLinksZoomOnBlob();
  }//GEN-LAST:event_formComponentShown

  /**
   * Next button clicked : Search next blob with too much links and zoom on it.
   *
   * @param evt
   */
  private void nextButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_nextButtonActionPerformed
  {//GEN-HEADEREND:event_nextButtonActionPerformed
    // ========= Search next blob with too much link in current slice =========
    setBlobLabToNextBlob();

    // ========= if no blob was found, search it in next slices ===============
    if (blobLab == -1)
    {
      // ---- while blob isn't found, increment slice and search it -----------
      while (blobLab == -1 && slice < fluobt.getISize())
      {
        slice++;
        updateCurrSet();
        setBlobLabToNextBlob();
      }

      // ----------------- If no blob was found in any slice ------------------
      //             close dialog and return.
      if (blobLab == -1 && slice == fluobt.getISize())
      {
        dispose();
        return;
      }

    }

    // ================== Update preview and zoom on blob =====================
    updatePreview();
    ImageLinksZoomOnBlob();
  }//GEN-LAST:event_nextButtonActionPerformed

  private void imageLinksMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_imageLinksMouseClicked
  {//GEN-HEADEREND:event_imageLinksMouseClicked
    // =============== If left click, remove or add link ======================
    //              between selected blob and clicked blob
    if (evt.getButton() == 1)
    {
      ChangeLinkClick(evt.getPoint());
    }
  }//GEN-LAST:event_imageLinksMouseClicked

  // ==========================================================================
  // ===                  OTHER METHODS
  // ==========================================================================
  /**
   * Update preview by loading renormalized ImageFbt corresponding to slice, and
   * showing a color processor with this image and blobs graph.
   */
  private void updatePreview()
  {
    // ============ Loading renormalized ImageFbt, corresponding to slice =====
    ImageFbt renormFbt = ImageFbt.load(fluobt.getRenormDir().
        resolve("slice_" + slice));

    // ======== Put it in preview with corresponding ShapeSet ========    
    imageLinks.setImageProcessor(renormFbt, 1);

//    ArrayList<ShapeSet> blobs = new ArrayList<ShapeSet>( 1);
//    blobs.add(currSet );
    ImageStack IS = new ImageStack(fluobt.getIWidth(), fluobt.getIHeight());
    IS.addSlice(currSet.getColorProcessorGraph(fluobt.getIWidth(), fluobt.
        getIHeight()));

    imageLinks.setBlobsOrSeedsImage(IS);

    // ========  repack window ========================
    pack();
  }

  /**
   * Searchs in slice next blob with too much links and returns its label.
   *
   * If not found, set blobLab to -1.
   *
   */
  private void setBlobLabToNextBlob()
  {
    // ======== For all blobs in currSet blobs list ===========================
    // Compute its number of neighbors
    // If it is  superior to 2, set blobLab to current label and return.
    for (int currBlob : currSet.getList().keySet())
    {
      // ----------- Compute its number of neighbors --------------------------
      int neighsNb = currSet.getNeighbourLabels(currBlob).size();

      // -- If it is  superior to 2, set blobLab to current label and return --
      if (neighsNb > 2)
      {
        blobLab = currBlob;
        return;
      }
    }

    // =========== If no blob was found, set blobLab to -1 ====================
    blobLab = -1;
  }

  /**
   * Reload currSet ShapeSet in final blobs temporary directory with 'slice'.
   */
  private void updateCurrSet()
  {
    // ==================== Load ShapeSet from final blobs directory ==========
    String setPath = fluobt.getfinalBlobsDir().resolve("Blobs_" + slice).
        toString();
    currSet = (ShapeSet) Utils.loadObject(setPath);

    // =========== Update center, radius and boundaries of blobs in the set ===
    currSet.updateCenterAndRadius();
    currSet.updateBoundaries();

  }

  /**
   * Zooms imageLinks on selected 'blobLab' blob.
   *
   */
  private void ImageLinksZoomOnBlob()
  {
    // =========== Init variables =============================================
    int width = fluobt.getIWidth();
    int height = fluobt.getIHeight();

    // ================= Set 'blobLab' blob as imageLink Roi ==================
    imageLinks.setRoi(currSet.getRoiFromCell(new Cell(blobLab)));

    // =========== Register all neighbors blobs in a Cell =====================
    Cell cellNeighs = new Cell(blobLab);
    Set<Integer> neighLabels = currSet.getNeighbourLabels(blobLab);
    for (int lab : neighLabels)
    {
      cellNeighs.add(lab);
    }

    // ============= Get this cell bounding rectangle =========================
    Roi roi = currSet.getRoiFromCell(cellNeighs);
    Rectangle roiRect = roi.getBounds();

    // ============= Zoom in ImageLinks in this bounding rectangle ============
    double zoomW = (double) width / (double) roiRect.width;
    double zoomH = (double) height / (double) roiRect.height;

    double newZoom = Math.min(zoomH, zoomW) / 2.D;

    imageLinks.zoom(newZoom - imageLinks.getZoom());

    Point newPos = new Point((int) (roiRect.x * newZoom),
                             (int) (roiRect.y * newZoom));
    imageLinks.setTopLeftCorner(newPos);
  }

  /**
   * Method called when a click is done after changingLink was set to true.
   *
   * @param clickedPoint Point that was clicked in imageLinks
   */
  private void ChangeLinkClick(Point clickedPoint)
  {
    // ============ Get pixel index from clicked point ========================
    // It is a pixel index of the newSelectedBlob we want to add/delete a link with.
    int pixIndex;
    try
    {
      pixIndex = imageLinks.getPixIndexFromClick(clickedPoint);
    }
    catch (ArrayIndexOutOfBoundsException ex)
    {
      return;
    }

    // ============ Import blobs list and renormalize image corresponding =====
    ShapeFbt selectedBlob = currSet.getShape(blobLab);

    // =============== Get Label of clicked newSelectedBlob ==============================
    int[] labels = currSet.toLabels(fluobt.getIWidth(), fluobt.getIHeight());
    int clickedBlobLabel = labels[pixIndex];

    if (clickedBlobLabel == -1)
    {
      return;
    }

    // ================ Get currSet graph  =================================
    ConnectionGraph graph = currSet.getGraph();

    // =========== If graph contains a link between ==========================
    //        clicked newSelectedBlob and selected newSelectedBlob , remove it.
    Pair connection = new Pair(blobLab, clickedBlobLabel);
    if (graph.contains(connection))
    {
      graph.removeConnection(connection);
    }
    // =========== Else if graph doesn't contains a link between ==============
    //        clicked newSelectedBlob and selected newSelectedBlob , add it.
    else
    {
      // Compute border length between the blobs.

      ShapeFbt clickedBlob = currSet.getShape(clickedBlobLabel);
      double border = selectedBlob.border(clickedBlob);

      // Add connection.
      graph.putConnection(blobLab, clickedBlobLabel, border);
    }

    String setPath = fluobt.getfinalBlobsDir().resolve("Blobs_" + slice).
        toString();
    Utils.saveObject(currSet, setPath);

    // ============= Update preview ===========================================
    updatePreview();

  }

  // ==========================================================================
  // ===                  GENERATED MAIN
  // ==========================================================================
  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.
          getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(LinksDialog.class.getName()).
          log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(LinksDialog.class.getName()).
          log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(LinksDialog.class.getName()).
          log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(LinksDialog.class.getName()).
          log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        LinksDialog dialog = new LinksDialog(new javax.swing.JFrame(),
                                             true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter()
        {
          @Override
          public void windowClosing(java.awt.event.WindowEvent e)
          {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }
  // ==========================================================================
  // ===                   PERSONNAL ATTRIBUTES 
  // ==========================================================================
  /**
   * Fluo_Bac_Tracker attribute of parent frame.
   */
  protected Fluo_Bac_Tracker fluobt;

  /**
   * ShapeSet of crrent slice we are working on.
   */
  protected ShapeSet currSet;

  /**
   * Label of the current blob we are working on. If no blob it is -1.
   */
  protected int blobLab;

  /**
   * Current slice number.
   */
  protected int slice;

  // ==========================================================================
  // ===                  GENERATED ATTRIBUTES 
  // ==========================================================================
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private cellst.Interface.ImagePanel imageLinks;
  private javax.swing.JButton nextButton;
  private javax.swing.JButton quitButton;
  // End of variables declaration//GEN-END:variables
}

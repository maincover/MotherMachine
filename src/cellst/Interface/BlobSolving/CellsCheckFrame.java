/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cellst.Interface.BlobSolving;

import ij.*;
import ij.gui.*;
import ij.process.*;

import java.awt.*;
import java.util.*;
import java.util.logging.*;

import cellst.Enums.BlobsDrawOpt;
import cellst.Enums.Step;
import cellst.Image.*;
import cellst.Interface.ImagePanel;
import cellst.Interface.InterfaceControl;
import cellst.Main.*;

/**
 * Frame where user check cells after segmentation and tracking are done.
 *
 * @author Magali Vangkeosay, David Parsons
 */
public class CellsCheckFrame extends javax.swing.JFrame implements Observer
{

  // ==========================================================================
  // ===                        CONSTRUCTOR
  // ==========================================================================
  /**
   * Creates new form CellsCheckFrame.
   */
  public CellsCheckFrame(InterfaceControl _control)
  {
    initComponents();

    setTitle("FLUO_BAC_TRACKER - Cells Checking");

    // ================= Init attribute ============================
    control = _control;

    // ============== Init scrollbar values ===============================
    jScrollBar1.setValues(1, 1, 1, control.getFluobt().getISize() + 1);

    // ============ Hide popUp menus ======================================
    jPopupInCell.setVisible(false);
    jPopupOutCell.setVisible(false);

    // ======= request focus on image blobs so key pressed are detected ===
    imageCells.requestFocus();

    validateButton.setVisible(false);
    cancelButton.setVisible(false);

  }

  // ==========================================================================
  // ===                        GENERATED CODE
  // ==========================================================================
  /**
   * This method is called from within the constructor to initialize the form.
   *
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jPopupInCell = new javax.swing.JPopupMenu();
    menuDelete = new javax.swing.JMenuItem();
    menuEdit = new javax.swing.JMenuItem();
    jPopupOutCell = new javax.swing.JPopupMenu();
    menuNewCell = new javax.swing.JMenuItem();
    jScrollBar1 = new javax.swing.JScrollBar();
    jButtonBack = new javax.swing.JButton();
    jButtonNext = new javax.swing.JButton();
    imageCells = new cellst.Interface.ImagePanel();
    validateButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();
    infosLabel = new javax.swing.JLabel();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenuFile = new javax.swing.JMenu();
    jMenuSave = new javax.swing.JMenuItem();
    jMenuSaveAs = new javax.swing.JMenuItem();
    Load = new javax.swing.JMenuItem();
    jMenuQuit = new javax.swing.JMenuItem();
    jMenu2 = new javax.swing.JMenu();

    menuDelete.setText("Delete");
    menuDelete.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        menuDeleteActionPerformed(evt);
      }
    });
    jPopupInCell.add(menuDelete);

    menuEdit.setText("Edit");
    menuEdit.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        menuEditActionPerformed(evt);
      }
    });
    jPopupInCell.add(menuEdit);

    menuNewCell.setText("new Cell");
    menuNewCell.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        menuNewCellActionPerformed(evt);
      }
    });
    jPopupOutCell.add(menuNewCell);

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    addWindowListener(new java.awt.event.WindowAdapter()
    {
      public void windowClosing(java.awt.event.WindowEvent evt)
      {
        formWindowClosing(evt);
      }
      public void windowOpened(java.awt.event.WindowEvent evt)
      {
        formWindowOpened(evt);
      }
    });

    jScrollBar1.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
    jScrollBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jScrollBar1.setPreferredSize(new java.awt.Dimension(5, 15));
    jScrollBar1.addAdjustmentListener(new java.awt.event.AdjustmentListener()
    {
      public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt)
      {
        jScrollBar1AdjustmentValueChanged(evt);
      }
    });

    jButtonBack.setText("<< Back");
    jButtonBack.setPreferredSize(new java.awt.Dimension(100, 30));
    jButtonBack.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonBackActionPerformed(evt);
      }
    });

    jButtonNext.setText("Next >>");
    jButtonNext.setPreferredSize(new java.awt.Dimension(100, 30));
    jButtonNext.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonNextActionPerformed(evt);
      }
    });

    imageCells.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        imageCellsMouseWheelMoved(evt);
      }
    });
    imageCells.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        imageCellsMouseClicked(evt);
      }
    });
    imageCells.addKeyListener(new java.awt.event.KeyAdapter()
    {
      public void keyPressed(java.awt.event.KeyEvent evt)
      {
        imageCellsKeyPressed(evt);
      }
    });

    javax.swing.GroupLayout imageCellsLayout = new javax.swing.GroupLayout(imageCells);
    imageCells.setLayout(imageCellsLayout);
    imageCellsLayout.setHorizontalGroup(
      imageCellsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );
    imageCellsLayout.setVerticalGroup(
      imageCellsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 287, Short.MAX_VALUE)
    );

    validateButton.setText("Validate");
    validateButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        validateButtonActionPerformed(evt);
      }
    });

    cancelButton.setText("Cancel");
    cancelButton.setMaximumSize(new java.awt.Dimension(91, 23));
    cancelButton.setMinimumSize(new java.awt.Dimension(91, 23));
    cancelButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cancelButtonActionPerformed(evt);
      }
    });

    infosLabel.setText("  ");

    jMenuFile.setText("File");

    jMenuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
    jMenuSave.setText("Save");
    jMenuSave.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuSaveActionPerformed(evt);
      }
    });
    jMenuFile.add(jMenuSave);

    jMenuSaveAs.setText("Save As");
    jMenuSaveAs.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuSaveAsActionPerformed(evt);
      }
    });
    jMenuFile.add(jMenuSaveAs);

    Load.setText("Load");
    Load.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        LoadActionPerformed(evt);
      }
    });
    jMenuFile.add(Load);

    jMenuQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
    jMenuQuit.setText("Quit");
    jMenuQuit.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuQuitActionPerformed(evt);
      }
    });
    jMenuFile.add(jMenuQuit);

    jMenuBar1.add(jMenuFile);

    jMenu2.setText("Help");
    jMenuBar1.add(jMenu2);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(imageCells, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jScrollBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(validateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButtonNext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(infosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(infosLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(imageCells, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jButtonNext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(validateButton)
          .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  // ==========================================================================
  // ===                      INTERFACE METHODS
  // ==========================================================================
  private void jMenuSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuSaveActionPerformed
  {//GEN-HEADEREND:event_jMenuSaveActionPerformed
    control.save(this);
  }//GEN-LAST:event_jMenuSaveActionPerformed

  private void jMenuSaveAsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuSaveAsActionPerformed
  {//GEN-HEADEREND:event_jMenuSaveAsActionPerformed
    control.saveAs(this);
  }//GEN-LAST:event_jMenuSaveAsActionPerformed

  private void LoadActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_LoadActionPerformed
  {//GEN-HEADEREND:event_LoadActionPerformed
    control.load(this);

    jScrollBar1.setValues(1, 1, 1, control.getFluobt().getISize() + 1);
  }//GEN-LAST:event_LoadActionPerformed

  private void jMenuQuitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuQuitActionPerformed
  {//GEN-HEADEREND:event_jMenuQuitActionPerformed
    control.quit(this);
  }//GEN-LAST:event_jMenuQuitActionPerformed

  private void imageCellsMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_imageCellsMouseClicked
  {//GEN-HEADEREND:event_imageCellsMouseClicked
    mousePos = evt.getPoint();

    // =========== hide popup menus ===========================================
    jPopupInCell.setVisible(false);
    jPopupOutCell.setVisible(false);

    // =========== Get which mouse button has been clicked. ===================
    int button = evt.getButton();

    // ==================== Left click ========================================
    if (button == 1)
    {
      if (editBlobSolver != null)
      {
        editCellClicked(mousePos);
      }
      else
      {
        // ------------ Select cell -------------------------------------------
        selectCellFromClick(mousePos);
      }

      // -------- If double clicked open image as Imageplus -------------------
      if (evt.getClickCount() == 2)
      {
        control.show(Step.BLOBSOLVER, BlobsDrawOpt.CELLS);
      }
    }
    // ==================== Righ click ========================================
    else if (button == 3)
    {
      if (editBlobSolver == null)
      {
        // ------------ Select cell -------------------------------------------
        selectCellFromClick(mousePos);

        // ---------- If a Cell was clicked on, show incell popup menu ----------
        if (selectCell != null)
        {
          jPopupInCell.setLocation(evt.getLocationOnScreen());
          jPopupInCell.setVisible(true);
        }
        // ------------ If no cell was clicked on, ------------------------------
        // but a blob was show outcell popup menu
        else
        {
          jPopupOutCell.setLocation(evt.getLocationOnScreen());
          jPopupOutCell.setVisible(true);
        }
      }
    }


  }//GEN-LAST:event_imageCellsMouseClicked

  private void imageCellsKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_imageCellsKeyPressed
  {//GEN-HEADEREND:event_imageCellsKeyPressed

    // ============= If Enter is pressed during the edition of a cell =========
    //  register the edited cell, update preview and set edit cell to null
    if (evt.getKeyCode() == 10 && editBlobSolver != null)
    {
//      // Register edited cell
//      editBlobSolver.saveFiles(control.getFluobt().getblobSolvDir());
//
//      // Update preview
////      int slice = jScrollBar1.getValue();
////      imageCells.setBlobsOrSeedsSetList( slice, editBlobSolver.getBlobListOverMovie().get( slice).getColorProcessorCells(control.getFluobt().getIWidth() , control.getFluobt().getIHeight()));
//      BlobSolver blobSolv = BlobSolver.loadFiles(control.getFluobt().
//          getblobSolvDir());
//      blobSolv.updateDrawingColors();
//      imageCells.setBlobsOrSeedsImage(blobSolv.getLinImg());
//
//      // Set editCell and editBlobSolver to null.
//      editCell = null;
//      editBlobSolver = null;
//
//      // Clear preview seletion.
//      imageCells.setRoi(null);
    }
  }//GEN-LAST:event_imageCellsKeyPressed

  private void jScrollBar1AdjustmentValueChanged(java.awt.event.AdjustmentEvent evt)//GEN-FIRST:event_jScrollBar1AdjustmentValueChanged
  {//GEN-HEADEREND:event_jScrollBar1AdjustmentValueChanged
    // ========== Get new scrollbar value =====================================
    int val = evt.getValue();

    // ========== Update image blobs slice ====================================
    imageCells.setSlice(val);

    // ========== Unselect currBlob if one currBlob was selected ======================
    selectCell = null;
    infosLabel.setText(" ");
    imageCells.setRoi(null);
  }//GEN-LAST:event_jScrollBar1AdjustmentValueChanged

  private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonBackActionPerformed
  {//GEN-HEADEREND:event_jButtonBackActionPerformed
    // ============== Re create BlobsCheck windows ========================
    BlobsCheckFrame blobsFrame = new BlobsCheckFrame(control);

    // ============== Show it ================================================
    blobsFrame.setVisible(true);

    // ============== Close blobCheck frame ==================================
    dispose();
  }//GEN-LAST:event_jButtonBackActionPerformed

  private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonNextActionPerformed
  {//GEN-HEADEREND:event_jButtonNextActionPerformed
     

    // Construct lineage checking frame
    LinCheckFrame linFrame = new LinCheckFrame(control);
    control.getFluobt().addObserver(linFrame);

    // Show it
    linFrame.setVisible(true);

    // current frame
    dispose();
  }//GEN-LAST:event_jButtonNextActionPerformed

  private void menuEditActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuEditActionPerformed
  {//GEN-HEADEREND:event_menuEditActionPerformed
    // ================ Hide popup menu =======================================
    jPopupInCell.setVisible(false);

    // ============= Load blobSolver from files ===============================
    BlobSolver blobSolv = BlobSolver.loadFiles(control.getFluobt().
        getblobSolvDir());

    // ============= Update editing attributes ================================
    editBlobSolver = blobSolv.duplicate();
    editCell = new Cell(selectCell);
//    editCell.setDoneForward(false);
//    editCell.setDoneBackward(false);

    validateButton.setVisible(true);
    cancelButton.setVisible(true);
  }//GEN-LAST:event_menuEditActionPerformed

  private void menuNewCellActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuNewCellActionPerformed
  {//GEN-HEADEREND:event_menuNewCellActionPerformed
    // ============= Hide popup menu ==========================================
    jPopupOutCell.setVisible(false);

    // ============== Load blobSolver from files ==============================
    BlobSolver blobSolv = BlobSolver.loadFiles(control.getFluobt().
        getblobSolvDir());

    // ============= Update editing attribute =================================
    //   edit blobSolver is a duplicate of the loaded blobSolver
    editBlobSolver = blobSolv.duplicate();

    // ============= Get shapeSet corresponding to current slice ==============
    int slice = jScrollBar1.getValue();
    ShapeSet editShapeSet = blobSolv.getBlobListOverMovie().get(slice);

    // ============ Construct new Cell from the clicked blob ==================
    // ------------ get labels of blobs in current shapeSet -------------------
    int[] labels = editShapeSet.
        toLabels(control.getFluobt().getIWidth(), control.getFluobt().
            getIHeight());

    // ------------ Get label corresponding to clicked blob -------------------
    int blobLab = labels[ imageCells.getPixIndexFromClick(mousePos)];

    // ---------- Construct new  cell -----------------------------------------
    editCell = new Cell(blobLab, true);
    editCell.setDoneForward(false);
    editCell.setDoneBackward(false);
    try
    {
      // =============== Add new cell to editBlobSolver =========================
      editBlobSolver.addCell(slice, editCell);
    }
    catch (InterruptedException ex)
    {
      return;
    }

    // =============== Update preview =========================================
    editBlobSolver.updateDrawingColors();
    imageCells.setBlobsOrSeedsImage(editBlobSolver.getLinImg());
    
    
    validateButton.setVisible(true);
    cancelButton.setVisible(true);
  }//GEN-LAST:event_menuNewCellActionPerformed

  private void formWindowOpened(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowOpened
  {//GEN-HEADEREND:event_formWindowOpened
    preview();
  }//GEN-LAST:event_formWindowOpened

  private void menuDeleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_menuDeleteActionPerformed
  {//GEN-HEADEREND:event_menuDeleteActionPerformed
    // =============== Hide popup menu ========================================
    jPopupInCell.setVisible(false);

    // ================= Load blobSolver from files ===========================
    BlobSolver blobSolv = BlobSolver.loadFiles(control.getFluobt().
        getblobSolvDir());

    // === Update editBlobSolver as a duplicate of loaded blobsolver ==========
    editBlobSolver = blobSolv.duplicate();
    try
    {
      // ======== Else remove it from Blobsolver ==============================
      editBlobSolver.deleteCell(jScrollBar1.getValue(), selectCell);
    }
    catch (InterruptedException ex)
    {
     return;
    }

    // ======== Update preview ================================================
    editBlobSolver.updateDrawingColors();
    imageCells.setBlobsOrSeedsImage(editBlobSolver.getLinImg());
    
    validateButton.setVisible(true);
    cancelButton.setVisible(true);

  }//GEN-LAST:event_menuDeleteActionPerformed

  private void imageCellsMouseWheelMoved(java.awt.event.MouseWheelEvent evt)//GEN-FIRST:event_imageCellsMouseWheelMoved
  {//GEN-HEADEREND:event_imageCellsMouseWheelMoved
    jScrollBar1.setValue(imageCells.getSlice());
  }//GEN-LAST:event_imageCellsMouseWheelMoved

  private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
  {//GEN-HEADEREND:event_formWindowClosing
    control.quit(this);
  }//GEN-LAST:event_formWindowClosing

  private void validateButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_validateButtonActionPerformed
  {//GEN-HEADEREND:event_validateButtonActionPerformed
    // Register edited cell
    editBlobSolver.saveFiles(control.getFluobt().getblobSolvDir());

    // Update preview
    BlobSolver blobSolv = BlobSolver.loadFiles(control.getFluobt().
        getblobSolvDir());
    blobSolv.updateDrawingColors();
    imageCells.setBlobsOrSeedsImage(blobSolv.getLinImg());

    // Set editCell and editBlobSolver to null.
    editCell = null;
    editBlobSolver = null;

    // Clear preview seletion.
    imageCells.setRoi(null);

    validateButton.setVisible(false);
    cancelButton.setVisible(false);
  }//GEN-LAST:event_validateButtonActionPerformed

  private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
  {//GEN-HEADEREND:event_cancelButtonActionPerformed
    editCell = null;
    editBlobSolver = null;
    imageCells.setRoi(null);

    
    BlobSolver blobSolv = BlobSolver.loadFiles(control.getFluobt().
        getblobSolvDir());
    blobSolv.updateDrawingColors();
    imageCells.setBlobsOrSeedsImage(blobSolv.getLinImg());
    
    validateButton.setVisible(false);
    cancelButton.setVisible(false);
  }//GEN-LAST:event_cancelButtonActionPerformed

  // ==========================================================================
  // ===                 OTHER METHODS
  // ==========================================================================
  /**
   * Update previews by loading imagestack of finalblobs shapeSets.
   *
   */
  public void preview()
  {
    control.preview(imageCells, false, Step.BLOBSOLVER);

//    // =============== Init variables =========================================
//    int width = control.getFluobt().getIWidth();
//    int height = control.getFluobt().getIHeight();
//    int size = control.getFluobt().getISize();
//
//    // ================= get ImageStack and blobs of the preview ==============
//    ImageStack newIS = new ImageStack(width, height, size);
////    ArrayList<ShapeSet> cells = new ArrayList<ShapeSet>( size );
//
//    BlobSolver blobsolver = BlobSolver.loadFiles(control.getFluobt().
//        getblobSolvDir());
//    for (int slice = 1; slice < size + 1; slice++)
//    {
////      ShapeSet currCellsSet = blobsolver.getBlobListOverMovie().get(slice);
////      cells.add( currCellsSet );
//
//      ImageProcessor renormProc = ImageFbt.load(control.getFluobt().
//          getRenormDir().
//          resolve("slice_" + slice));
//      newIS.setProcessor(renormProc, slice);
//    }
//
//    // ================= show it ==============================================
//    imageCells.setImage(newIS, getSlice());
//    blobsolver.updateDrawingColors();
//    imageCells.setBlobsOrSeedsImage(blobsolver.getLinImg());
    // ================ repack frame ==========================================
    pack();
  }

  /**
   * Selects clicked newSelectedBlob and set it as roi in imageBlobs so that its
   * boundary is highlighted.
   *
   * @param clickedPoint Point that was clicked in imageBlobs
   */
  private void selectCellFromClick(Point clickedPoint)
  {
    // ============ Get pixel index from clicked point ========================
    int index;
    try
    {
      index = imageCells.getPixIndexFromClick(clickedPoint);
    }
    catch (ArrayIndexOutOfBoundsException ex)
    {
      return;
    }

    // ====== reinit selectCell ============================================
    selectCell = null;
    infosLabel.setText(" ");

    // ====== Load nowBlobs ShapeSet and convert it in labels array ==========
    String blobspath = control.getFluobt().getblobSolvDir().resolve("Set_"
                                                                    + jScrollBar1.
        getValue()).toString();
    ShapeSet nowBlobs = (ShapeSet) Utils.loadObject(blobspath);
    int[] labels = nowBlobs.toLabels(control.getFluobt().getIWidth(), control.
        getFluobt().getIHeight());

    // ====== Get label corresponding to mouse position ===================
    int blobLab = labels[index];

    // ============= If no Blob was clicked on, set image roi to null =====
    // and return.
    if (blobLab == -1)
    {
      // ------------------------ set rois to null ----------------------------
      imageCells.setRoi(null);

      // ------------------------ repaint frame -------------------------------
      repaint();

      // ------------------------ return --------------------------------------
      return;
    }

    // ========= If a Blob was clicked ================================
    // 1 ) if it is in a certain cell. 
    //     1a ) select th cell it is in
    //     1b ) compute roi representing border of the cell.
    // 2 ) Register roi in imageCells
    // ---------------- 1 ) if it is in a certain cell. -----------------------
    //     1a ) select th cell it is in
    //     1b ) compute roi representing border of the cell.
    PointRoi nowRoi = null;
    for (Cell currCell : nowBlobs.getPossibleCells())
    {
      if (currCell.contains(blobLab) && currCell.isCertain())
      {
        // === 1a ) Select cell  ===
        selectCell = currCell;
        infosLabel.setText("Selected cell : "+selectCell.toString());

        // === 1b ) Compute roi representing border of the cell. ===-
        nowRoi = nowBlobs.getRoiFromCell(currCell);

        break;
      }
    }

    // ------------------- 2 ) Register Roi in imageCells -------------------------
    imageCells.setRoi(nowRoi);

    // ============ repaint frame =============================================
    repaint();
  }

  /**
   *
   * @param clickedPoint
   */
  private void editCellClicked(Point clickedPoint)
  {
    // ============ Get pixel index from clicked point ========================
    int index;
    try
    {
      index = imageCells.getPixIndexFromClick(clickedPoint);
    }
    catch (ArrayIndexOutOfBoundsException ex)
    {
      return;
    }

    // ============= editing shapeSet convert in labels array =================
    int slice = jScrollBar1.getValue();
    ShapeSet editShapeSet = editBlobSolver.getBlobListOverMovie().get(slice);
    int[] labels = editShapeSet.
        toLabels(control.getFluobt().getIWidth(), control.getFluobt().
            getIHeight());

    // ====== Get label corresponding to mouse position =======================
    int blobLab = labels[index];

    // ============= If no Blob was clicked on, return ========================
    if (blobLab == -1)
    {
      return;
    }
    
    try
    {
      editBlobSolver.editCell(slice, editCell, blobLab);
    }
    catch (InterruptedException ex)
    {
      return;
    }
    imageCells.setRoi(editShapeSet.getRoiFromCell(editCell) );
    
    // =============== update preview =========================================
//    ArrayList<ShapeSet> list = new ArrayList<ShapeSet> ( editBlobSolver.getBlobListOverMovie().values() );
    editBlobSolver.updateDrawingColors();
    imageCells.setBlobsOrSeedsImage(editBlobSolver.getLinImg());

    repaint();
  }

  // ==========================================================================
  //                             GETTERS
  // ==========================================================================
  /**
   * Get Fluobt attribute.
   *
   * @return
   */
  public Fluo_Bac_Tracker getFluobt()
  {
    return control.getFluobt();
  }

  /**
   * Get scrollBar value ( corresponding to previews slice number ).
   *
   * @return
   */
  public int getSlice()
  {
    return jScrollBar1.getValue();
  }

  /**
   * returns last recorded clicked or dragged mouse position.
   *
   * @return
   */
  public Point getLastMousePos()
  {
    return mousePos;
  }

  /**
   * Returns imageBlobs panel.
   *
   * @return
   */
  public ImagePanel getImageCells()
  {
    return imageCells;
  }

  // ==========================================================================
  // ===                      Observer methods
  // ==========================================================================
  @Override
  public void update(Observable o, Object arg)
  {
    Step step = (Step) arg;
    if (step.compareTo(Step.BLOBSOLVER) == 0)
    {
      preview();
    }
  }

  // ==========================================================================
  // ===                        MAIN
  // ==========================================================================
  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.
          getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(CellsCheckFrame.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(CellsCheckFrame.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(CellsCheckFrame.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(CellsCheckFrame.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        try
        {
          new CellsCheckFrame(null).setVisible(true);
        }
        catch (Exception ex)
        {
          Logger.getLogger(CellsCheckFrame.class.getName()).log(Level.SEVERE,
                                                                null, ex);
        }
      }
    });
  }

  // ==========================================================================
  // ===                       PERSONNAL ATTRIBUTES
  // ==========================================================================
  InterfaceControl control;

  /**
   * Selected Cell.
   */
  private Cell selectCell;
  private Cell editCell;
  private BlobSolver editBlobSolver;
  /**
   * Last mouse registered position.
   */
  private Point mousePos;
  boolean editingCell = false;
  // ==========================================================================
  // ===                        GENERATED ATTRIBUTES
  // ==========================================================================
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem Load;
  private javax.swing.JButton cancelButton;
  private cellst.Interface.ImagePanel imageCells;
  private javax.swing.JLabel infosLabel;
  private javax.swing.JButton jButtonBack;
  private javax.swing.JButton jButtonNext;
  private javax.swing.JMenu jMenu2;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JMenu jMenuFile;
  private javax.swing.JMenuItem jMenuQuit;
  private javax.swing.JMenuItem jMenuSave;
  private javax.swing.JMenuItem jMenuSaveAs;
  private javax.swing.JPopupMenu jPopupInCell;
  private javax.swing.JPopupMenu jPopupOutCell;
  private javax.swing.JScrollBar jScrollBar1;
  private javax.swing.JMenuItem menuDelete;
  private javax.swing.JMenuItem menuEdit;
  private javax.swing.JMenuItem menuNewCell;
  private javax.swing.JButton validateButton;
  // End of variables declaration//GEN-END:variables

}

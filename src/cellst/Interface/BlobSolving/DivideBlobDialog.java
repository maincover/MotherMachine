/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cellst.Interface.BlobSolving;

import ij.gui.*;

import java.awt.*;
import java.util.*;

import cellst.Image.*;
import cellst.Main.*;

/**
 * Dialog managing blob division by user.
 *
 * @author Magali Vangkeosay, David Parsons
 */
public class DivideBlobDialog extends javax.swing.JDialog
{
  // ==========================================================================
  //                      CONSTRUCTOR
  // ==========================================================================

  /**
   * Creates new form DivideBlobDialog
   */
  public DivideBlobDialog(java.awt.Frame parent, boolean modal)
  {
    super(parent, modal);
    initComponents();

  }

  // ==========================================================================
  //                      GENERATED CODE
  // ==========================================================================
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jPopupSearch1 = new javax.swing.JPopupMenu();
    jMenuItem2 = new javax.swing.JMenuItem();
    jPopupSearch2 = new javax.swing.JPopupMenu();
    jMenuItem3 = new javax.swing.JMenuItem();
    jLabelSpeedB = new javax.swing.JLabel();
    jLabel1 = new javax.swing.JLabel();
    jScrollBarSpeedA = new javax.swing.JScrollBar();
    jLabelSpeedA = new javax.swing.JLabel();
    jScrollBarSpeedB = new javax.swing.JScrollBar();
    jButtonFinish = new javax.swing.JButton();
    jButtonPropagate = new javax.swing.JButton();
    jButtonCancel = new javax.swing.JButton();

    jPopupSearch1.setPreferredSize(new java.awt.Dimension(200, 20));

    jMenuItem2.setText("Click on first blob center");
    jMenuItem2.setPreferredSize(new java.awt.Dimension(200, 20));
    jMenuItem2.setRequestFocusEnabled(false);
    jPopupSearch1.add(jMenuItem2);

    jPopupSearch2.setPreferredSize(new java.awt.Dimension(200, 20));

    jMenuItem3.setText("Click on second blob center");
    jMenuItem3.setPreferredSize(new java.awt.Dimension(200, 20));
    jMenuItem3.setRequestFocusEnabled(false);
    jPopupSearch2.add(jMenuItem3);

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setResizable(false);
    addWindowListener(new java.awt.event.WindowAdapter()
    {
      public void windowClosed(java.awt.event.WindowEvent evt)
      {
        formWindowClosed(evt);
      }
    });
    addComponentListener(new java.awt.event.ComponentAdapter()
    {
      public void componentShown(java.awt.event.ComponentEvent evt)
      {
        formComponentShown(evt);
      }
    });

    jLabelSpeedB.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabelSpeedB.setText("0");

    jLabel1.setText("Viscosity parameters");

    jScrollBarSpeedA.setMaximum(500);
    jScrollBarSpeedA.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
    jScrollBarSpeedA.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jScrollBarSpeedA.addAdjustmentListener(new java.awt.event.AdjustmentListener()
    {
      public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt)
      {
        jScrollBarSpeedAjScrollBarSpeedBAdjustmentValueChanged(evt);
      }
    });

    jLabelSpeedA.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabelSpeedA.setText("0");

    jScrollBarSpeedB.setMaximum(255);
    jScrollBarSpeedB.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
    jScrollBarSpeedB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jScrollBarSpeedB.addAdjustmentListener(new java.awt.event.AdjustmentListener()
    {
      public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt)
      {
        jScrollBarSpeedAjScrollBarSpeedBAdjustmentValueChanged(evt);
      }
    });

    jButtonFinish.setText("Finish");
    jButtonFinish.setPreferredSize(new java.awt.Dimension(100, 30));
    jButtonFinish.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonFinishActionPerformed(evt);
      }
    });

    jButtonPropagate.setText("Validate and Propagate to next slice");
    jButtonPropagate.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonPropagateActionPerformed(evt);
      }
    });

    jButtonCancel.setText("Cancel");
    jButtonCancel.setPreferredSize(new java.awt.Dimension(100, 30));
    jButtonCancel.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonCancelActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jButtonFinish, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButtonPropagate)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      .addGroup(layout.createSequentialGroup()
        .addGap(12, 12, 12)
        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      .addGroup(layout.createSequentialGroup()
        .addGap(12, 12, 12)
        .addComponent(jScrollBarSpeedB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGap(12, 12, 12))
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollBarSpeedA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabelSpeedA, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabelSpeedB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jScrollBarSpeedA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabelSpeedA)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jScrollBarSpeedB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabelSpeedB)
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jButtonFinish, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jButtonPropagate))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  // ==========================================================================
  //                       EVENT MANAGEMENT METHODS
  // ==========================================================================
  private void jScrollBarSpeedAjScrollBarSpeedBAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt)//GEN-FIRST:event_jScrollBarSpeedAjScrollBarSpeedBAdjustmentValueChanged
  {//GEN-HEADEREND:event_jScrollBarSpeedAjScrollBarSpeedBAdjustmentValueChanged
    if (startPt1 < 0 || startPt2 < 0)
    {
      dispose();
      return;
    }

    double speedA = jScrollBarSpeedA.getValue() / 100.D;
    double speedB = jScrollBarSpeedB.getValue();

    // ============== Update labels ===========================================
    jLabelSpeedB.setText("" + speedB);
    jLabelSpeedA.setText("" + speedA);

    // ============== Init variables ==========================================
    BlobsCheckFrame parent = ((BlobsCheckFrame) getParent());
    Fluo_Bac_Tracker fluobt = parent.getFluobt();

    newBlobsSet = renormIFbt.divideBlob(startPt1, startPt2, blobsSet, blobLabel,
                                        speedA, speedB, fluobt.getConn8());

    if (newBlobsSet == null)
    {
      int[] newStarts = getStartingPoint();

      if (newStarts == null)
      {
        askStartPointsToUser();
        return;
      }
      else
      {
        startPt1 = newStarts[0];
        startPt2 = newStarts[1];
      }

      newBlobsSet = renormIFbt.divideBlob(startPt1, startPt2, blobsSet,
                                          blobLabel, speedA, speedB, fluobt.
          getConn8());
    }

    int maxLab = Collections.max(newBlobsSet.getList().keySet());
    Cell cell = new Cell(maxLab);
    cell.add(maxLab - 1);
    Roi newRoi = newBlobsSet.getRoiFromCell(cell);
    parent.getImageBlobs().setRoi(newRoi);

    // ============= Show new divided blob ===================================
//    parent.updateSlicePreview( slice, newBlobsSet, renormIFbt );
    parent.getImageBlobs().setBlobsOrSeedsImage(slice, newBlobsSet.
        getColorProcessorGraph(fluobt.getIWidth(), fluobt.getIHeight()));
  }//GEN-LAST:event_jScrollBarSpeedAjScrollBarSpeedBAdjustmentValueChanged

  private void jButtonFinishActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonFinishActionPerformed
  {//GEN-HEADEREND:event_jButtonFinishActionPerformed
    // ================ Get parent frame and fluobt ===========================
    BlobsCheckFrame parent = (BlobsCheckFrame) getParent();
    Fluo_Bac_Tracker fluobt = parent.getFluobt();

    // =============== Save new blobs shapeSet ================================
    String blobsPath = fluobt.getfinalBlobsDir().resolve("Blobs_" + slice).
        toString();

    if (newBlobsSet != null)
    {
      Utils.saveObject(newBlobsSet, blobsPath);
    }

    // ======= Close this dialog ==============================================
    dispose();
  }//GEN-LAST:event_jButtonFinishActionPerformed

  private void jButtonPropagateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonPropagateActionPerformed
  {//GEN-HEADEREND:event_jButtonPropagateActionPerformed
    // ================ Get parent frame and fluobt ===========================
    BlobsCheckFrame parent = (BlobsCheckFrame) getParent();
    Fluo_Bac_Tracker fluobt = parent.getFluobt();

    ShapeSet blobs = (ShapeSet) Utils.loadObject(
        parent.getFluobt().getBlobsDir().resolve("Blobs_" + slice).toString());
    parent.getImageBlobs().setBlobsOrSeedsImage(slice, blobs.
        getColorProcessorGraph(fluobt.getIWidth(), fluobt.getIHeight()));

    // ======== If this is last slice of stack, call finish button method =====
    if (slice >= fluobt.getISize())
    {
      jButtonFinishActionPerformed(null);

      return;
    }

    // =============== Save new blobs shapeSet ================================
    String blobsPath = fluobt.getfinalBlobsDir().resolve("Blobs_" + slice).
        toString();

    if (newBlobsSet == null)
    {
      return;
    }

    Utils.saveObject(newBlobsSet, blobsPath);

    parent.getImageBlobs().setBlobsOrSeedsImage(slice, newBlobsSet.
        getColorProcessorGraph(fluobt.getIWidth(), fluobt.getIHeight()));

    // ============== Propagate ===============================================
    slice++;
    parent.setSlice(slice);

    renormIFbt = ImageFbt.load(fluobt.getRenormDir().resolve("slice_" + slice));

    blobsPath = fluobt.getfinalBlobsDir().resolve("Blobs_" + slice).toString();
    blobsSet = (ShapeSet) Utils.loadObject(blobsPath);
    newBlobsSet = null;

    int[] labelList = blobsSet.toLabels(fluobt.getIWidth(), fluobt.getIHeight());
    Point mousePos = parent.getLastMousePos();
    int clickIndex = parent.getImageBlobs().getPixIndexFromClick(mousePos);
    blobLabel = labelList[clickIndex];

    // ============== Compute new roi to show blob ============================
    ShapeFbt blob = blobsSet.getShape(blobLabel);
    blob.setCenterAndRadius();
    blob.updateBoundary();

    HashSet<Point> border = blob.getBoundary();
    int length = border.size();

    int[] coordx = new int[length];
    int[] coordy = new int[length];
    int i = 0;
    for (Point pix : border)
    {
      coordx[i] = pix.x;
      coordy[i] = pix.y;

      i++;
    }

    Roi blobRoi = new PointRoi(coordx, coordy, length);
    parent.getImageBlobs().setRoi(blobRoi);
    parent.getImageBlobs().repaint();

    jScrollBarSpeedAjScrollBarSpeedBAdjustmentValueChanged(null);
  }//GEN-LAST:event_jButtonPropagateActionPerformed

  private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonCancelActionPerformed
  {//GEN-HEADEREND:event_jButtonCancelActionPerformed
    // ======= Close this dialog ==============================================
    dispose();
  }//GEN-LAST:event_jButtonCancelActionPerformed

  private void formWindowClosed(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosed
  {//GEN-HEADEREND:event_formWindowClosed

    // ======= reinit imageBlobs roi in parent frame ==========================
    BlobsCheckFrame parent = (BlobsCheckFrame) getParent();

    if (parent.isVisible())
    {
      ShapeSet blobs = (ShapeSet) Utils.loadObject(
          parent.getFluobt().getfinalBlobsDir().resolve("Blobs_" + slice).
          toString());
      parent.getImageBlobs().setBlobsOrSeedsImage(slice, blobs.
          getColorProcessorGraph(renormIFbt.getWidth(), renormIFbt.getHeight()));
    }
  }//GEN-LAST:event_formWindowClosed

  private void formComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentShown
  {//GEN-HEADEREND:event_formComponentShown
    // =========== Get slice =================================================
    BlobsCheckFrame parentFrame = (BlobsCheckFrame) getParent();
    Fluo_Bac_Tracker fluobt = parentFrame.getFluobt();
    slice = parentFrame.getSlice();

    // =========== Get blobs shapeSet ========================================
    String blobsPath = fluobt.getfinalBlobsDir().resolve("Blobs_" + slice).
        toString();
    blobsSet = (ShapeSet) Utils.loadObject(blobsPath);

    // ============ Get pixel clicked index ===================================
    Point mousePos = parentFrame.getLastMousePos();
    int clickIndex = parentFrame.getImageBlobs().
        getPixIndexFromClick(mousePos.x, mousePos.y);

    Point onScreen = parentFrame.getLocationOnScreen();
    onScreen.x += mousePos.x;
    onScreen.y += mousePos.y;
    setLocation(onScreen.x + 100, onScreen.y);

    // =========== Set label attribute ========================================
    int[] labelList = blobsSet.toLabels(fluobt.getIWidth(), fluobt.getIHeight());
    blobLabel = labelList[ clickIndex];

    // ============ Get renormalized image ====================================
    renormIFbt = ImageFbt.load(fluobt.getRenormDir().resolve("slice_" + slice));

    // =========== get starting points ========================================
    if (parentFrame.searchDividPts)
    {
      parentFrame.setSearchDividePts(false);
    }
    else
    {
      int[] startPts = getStartingPoint();

      if (startPts == null)
      {
        askStartPointsToUser();
        jScrollBarSpeedAjScrollBarSpeedBAdjustmentValueChanged(null);
        parentFrame.getImageBlobs().repaint();
        return;
      }
      else
      {
        startPt1 = startPts[0];
        startPt2 = startPts[1];
      }
    }

    // ====================== Update scrollbars values =======================
    jScrollBarSpeedA.setValue((int) (100 * fluobt.getSpeedA()));
    jScrollBarSpeedB.setValue((int) fluobt.getSpeedB());
  }//GEN-LAST:event_formComponentShown

  private int[] getStartingPoint()
  {
    // =========== Get blob to divide =========================================
    // --------------- get blob -----------------------------------------------
    ShapeFbt blob = blobsSet.getShape(blobLabel);

    // -------------- if blob wasan't found, return null ----------------------
    if (blob == null)
    {
      System.out.println(
          "Error in ImageFbt.autoDivideBlob : blob doesn't exists in Blobs ShapeSet");
      return null;
    }

    // ------------- Update center, radius and boundary of the blob -----------
    blob.setCenterAndRadius();
    blob.updateBoundary();

    // ================== Find the two points in blob border ==================
    //               That are the most distant from one each other.
    // ----------- init variables --------------------------------------------
    HashSet<Point> border = blob.getBoundary();
    HashSet<Point> done = new HashSet<Point>();
    double maxDist = 0.;
    Point vertex1 = null;
    Point vertex2 = null;

    // ---------------- For each couple of point in blob border --------------
    // 1 ) Compute distance between points
    // 2 ) register max distance and points if needed 
    for (Point point1 : border)
    {
      // add point1 to list of done points.
      done.add(point1);

      for (Point point2 : border)
      {
        // if point2 was already computed, do nothing.
        if (done.contains(point2))
        {
          continue;
        }

        // === 1 ) Compute distance between points ===
        double dist = point1.distance(point2);

        // 2 ) === register max distance and points if needed ===
        if (dist > maxDist)
        {
          maxDist = dist;
          vertex1 = point1;
          vertex2 = point2;
        }
      }
    }

    // ========= If most distant points weren't found, return null ============
    if (vertex1 == null || vertex2 == null)
    {
      return null;
    }

    // ========= find nearest minimum local from points =======================
    Point localMin1 = renormIFbt.slice(blob, vertex1, 1000);
    Point localMin2 = renormIFbt.slice(blob, vertex2, 1000);

    // ===================== Check that local minimums were found =============
    // If not, return null.
    int localMin1Ind;
    if (blob.getPixels().contains(localMin1))
    {
      localMin1Ind = renormIFbt.pointToIndex(localMin1);
    }
    else
    {
      System.out.println(
          "ImageFbt.autoDivideBlob : couldn't find local minimum.");
      return null;
    }

    int localMin2Ind;
    if (blob.getPixels().contains(localMin1))
    {
      localMin2Ind = renormIFbt.pointToIndex(localMin2);
    }
    else
    {
      System.out.println(
          "ImageFbt.autoDivideBlob : couldn't find local minimum.");
      return null;
    }

    // ======== return divide blob starting from local minimums computed. =====
    int[] res =
    {
      localMin1Ind, localMin2Ind
    };
    return res;
  }

  private void askStartPointsToUser()
  {
    startPt1 = -1;
    startPt2 = -1;

    BlobsCheckFrame parent = (BlobsCheckFrame) getParent();
    parent.setSearchDividePts(true);

    dispose();
  }

  // ==========================================================================
  //                       SETTERS
  // ==========================================================================
  public void setStartPt1(int pt)
  {
    startPt1 = pt;
  }

  public void setStartPt2(int pt)
  {
    startPt2 = pt;
  }

  // ==========================================================================
  //                       GETTERS
  // ==========================================================================
  public int getStartPt1()
  {
    return startPt1;
  }

  public int getStartPt2()
  {
    return startPt2;
  }

  // ==========================================================================
  //                       GENERATED MAIN 
  // ==========================================================================
  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.
          getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(DivideBlobDialog.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(DivideBlobDialog.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(DivideBlobDialog.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(DivideBlobDialog.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        DivideBlobDialog dialog = new DivideBlobDialog(new javax.swing.JFrame(),
                                                       true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter()
        {
          @Override
          public void windowClosing(java.awt.event.WindowEvent e)
          {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }
  // ==========================================================================
  //                       PERSONNAL ATTRIBUTES
  // ==========================================================================
  /**
   * Number of the slice in renormalized stack the blob is add to.
   */
  private int slice;
  /**
   * Label of blob to divide.
   */
  private int blobLabel;
  /**
   * Renormalized ImageFbt of the corresponding slice.
   */
  private ImageFbt renormIFbt;
  /**
   * BlobsSet in the renormalized image.
   */
  private ShapeSet blobsSet;
  /**
   * BlobsSet in the renormalized image with divided blob.
   */
  private ShapeSet newBlobsSet;
  /**
   * First starting point of dilatation to compute division.
   */
  private int startPt1 = -1;
  /**
   * Second starting point of dilatation to compute division.
   */
  private int startPt2 = -1;
  // ==========================================================================
  //                        GENERATED ATTRIBUTES
  // ==========================================================================
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButtonCancel;
  private javax.swing.JButton jButtonFinish;
  private javax.swing.JButton jButtonPropagate;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabelSpeedA;
  private javax.swing.JLabel jLabelSpeedB;
  private javax.swing.JMenuItem jMenuItem2;
  private javax.swing.JMenuItem jMenuItem3;
  private javax.swing.JPopupMenu jPopupSearch1;
  private javax.swing.JPopupMenu jPopupSearch2;
  private javax.swing.JScrollBar jScrollBarSpeedA;
  private javax.swing.JScrollBar jScrollBarSpeedB;
  // End of variables declaration//GEN-END:variables
}

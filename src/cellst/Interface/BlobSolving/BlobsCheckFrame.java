/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cellst.Interface.BlobSolving;

import ij.*;
import ij.gui.*;
import ij.io.*;
import ij.process.*;

import java.awt.*;
import java.nio.file.*;
import java.util.*;
import java.util.logging.*;

import cellst.Enums.BlobsDrawOpt;
import cellst.Enums.Step;
import cellst.Image.*;
import cellst.Interface.ImagePanel;
import cellst.Interface.InterfaceControl;
import cellst.Interface.WaitingDialog;
import cellst.Interface.Preprocessings.MainWorkFlowFrame;
import cellst.Main.*;

/**
 * Blobs checking frame, where the user can delete, divide or add blobs, and
 * change connections.
 *
 * @author Magali Vangkeosay, David Parsons
 */
public class BlobsCheckFrame extends javax.swing.JFrame implements Observer
{

  // ==========================================================================
  // ===                     CONSTRUCTOR
  // ==========================================================================
  /**
   * Creates new form BlobsCheckFrame.
   *
   * @param _getFluobt() Fluo_Bac_Tracker
   */
  public BlobsCheckFrame(InterfaceControl _control)
  {
    initComponents();

    setTitle("FLUO_BAC_TRACKER - Blobs Checking");

    // ================= Init attribute ============================
    control = _control;

    // ============== Init scrollbar values ===============================
    jScrollBar1.setValues(1, 1, 1, control.getFluobt().getISize() + 1);

    // ============ Hide popUp menus ======================================
    jPopupInBlob.setVisible(false);
    jPopupOutBlob.setVisible(false);

    // ======= request focus on image blobs so key pressed are detected ===
    imageBlobs.requestFocus();

  }

  // ==========================================================================
  // ===                    GENERATED CODE
  // ==========================================================================
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jPopupInBlob = new javax.swing.JPopupMenu();
    jMenuDelete = new javax.swing.JMenuItem();
    jMenuDivide = new javax.swing.JMenuItem();
    jMenuChangeLink = new javax.swing.JMenuItem();
    jPopupOutBlob = new javax.swing.JPopupMenu();
    jMenuAdd = new javax.swing.JMenuItem();
    jPopupSearch1 = new javax.swing.JPopupMenu();
    jMenuItem2 = new javax.swing.JMenuItem();
    jPopupSearch2 = new javax.swing.JPopupMenu();
    jMenuItem3 = new javax.swing.JMenuItem();
    jScrollBar1 = new javax.swing.JScrollBar();
    jButtonBack = new javax.swing.JButton();
    jButtonNext = new javax.swing.JButton();
    imageBlobs = new cellst.Interface.ImagePanel();
    jButtonLinks = new javax.swing.JButton();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenuFile = new javax.swing.JMenu();
    jMenuSave = new javax.swing.JMenuItem();
    jMenuSaveAs = new javax.swing.JMenuItem();
    Load = new javax.swing.JMenuItem();
    jMenuChangeWorkingDir = new javax.swing.JMenuItem();
    jMenuQuit = new javax.swing.JMenuItem();
    jMenu2 = new javax.swing.JMenu();

    jPopupInBlob.setPreferredSize(new java.awt.Dimension(130, 60));

    jMenuDelete.setText("Delete");
    jMenuDelete.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuDeleteActionPerformed(evt);
      }
    });
    jPopupInBlob.add(jMenuDelete);

    jMenuDivide.setText("Divide");
    jMenuDivide.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuDivideActionPerformed(evt);
      }
    });
    jPopupInBlob.add(jMenuDivide);

    jMenuChangeLink.setText("Add/Delete link");
    jMenuChangeLink.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuChangeLinkActionPerformed(evt);
      }
    });
    jPopupInBlob.add(jMenuChangeLink);

    jPopupOutBlob.setPreferredSize(new java.awt.Dimension(100, 30));

    jMenuAdd.setText("Add");
    jMenuAdd.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuAddActionPerformed(evt);
      }
    });
    jPopupOutBlob.add(jMenuAdd);

    jPopupSearch1.setPreferredSize(new java.awt.Dimension(200, 20));

    jMenuItem2.setText("Click on first blob center");
    jMenuItem2.setPreferredSize(new java.awt.Dimension(200, 20));
    jMenuItem2.setRequestFocusEnabled(false);
    jPopupSearch1.add(jMenuItem2);

    jPopupSearch2.setPreferredSize(new java.awt.Dimension(200, 20));

    jMenuItem3.setText("Click on second blob center");
    jMenuItem3.setPreferredSize(new java.awt.Dimension(200, 20));
    jMenuItem3.setRequestFocusEnabled(false);
    jPopupSearch2.add(jMenuItem3);

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    addWindowListener(new java.awt.event.WindowAdapter()
    {
      public void windowClosing(java.awt.event.WindowEvent evt)
      {
        formWindowClosing(evt);
      }
      public void windowOpened(java.awt.event.WindowEvent evt)
      {
        formWindowOpened(evt);
      }
    });

    jScrollBar1.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
    jScrollBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jScrollBar1.setPreferredSize(new java.awt.Dimension(5, 15));
    jScrollBar1.addAdjustmentListener(new java.awt.event.AdjustmentListener()
    {
      public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt)
      {
        jScrollBar1AdjustmentValueChanged(evt);
      }
    });

    jButtonBack.setText("<< Back");
    jButtonBack.setPreferredSize(new java.awt.Dimension(100, 30));
    jButtonBack.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonBackActionPerformed(evt);
      }
    });

    jButtonNext.setText("Next >>");
    jButtonNext.setPreferredSize(new java.awt.Dimension(100, 30));
    jButtonNext.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonNextActionPerformed(evt);
      }
    });

    imageBlobs.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        imageBlobsMouseWheelMoved(evt);
      }
    });
    imageBlobs.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mousePressed(java.awt.event.MouseEvent evt)
      {
        imageBlobsMousePressed(evt);
      }
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        imageBlobsMouseClicked(evt);
      }
    });
    imageBlobs.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
    {
      public void mouseMoved(java.awt.event.MouseEvent evt)
      {
        imageBlobsMouseMoved(evt);
      }
    });

    javax.swing.GroupLayout imageBlobsLayout = new javax.swing.GroupLayout(imageBlobs);
    imageBlobs.setLayout(imageBlobsLayout);
    imageBlobsLayout.setHorizontalGroup(
      imageBlobsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );
    imageBlobsLayout.setVerticalGroup(
      imageBlobsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 363, Short.MAX_VALUE)
    );

    jButtonLinks.setText("Edit Links");
    jButtonLinks.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonLinks.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonLinksActionPerformed(evt);
      }
    });

    jMenuFile.setText("File");

    jMenuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
    jMenuSave.setText("Save");
    jMenuSave.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuSaveActionPerformed(evt);
      }
    });
    jMenuFile.add(jMenuSave);

    jMenuSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
    jMenuSaveAs.setText("Save As");
    jMenuSaveAs.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuSaveAsActionPerformed(evt);
      }
    });
    jMenuFile.add(jMenuSaveAs);

    Load.setText("Load");
    Load.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        LoadActionPerformed(evt);
      }
    });
    jMenuFile.add(Load);

    jMenuChangeWorkingDir.setText("Change working directory");
    jMenuChangeWorkingDir.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuChangeWorkingDirActionPerformed(evt);
      }
    });
    jMenuFile.add(jMenuChangeWorkingDir);

    jMenuQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
    jMenuQuit.setText("Quit");
    jMenuQuit.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuQuitActionPerformed(evt);
      }
    });
    jMenuFile.add(jMenuQuit);

    jMenuBar1.add(jMenuFile);

    jMenu2.setText("Help");
    jMenuBar1.add(jMenu2);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(imageBlobs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jScrollBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
            .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
            .addComponent(jButtonLinks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
            .addComponent(jButtonNext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(imageBlobs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jButtonNext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jButtonLinks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  // ==========================================================================
  // ===                  EVENT METHODS
  // ==========================================================================
  /**
   * Saves results in a new results path.
   *
   * @param evt
   */
  private void jMenuSaveAsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuSaveAsActionPerformed
  {//GEN-HEADEREND:event_jMenuSaveAsActionPerformed
    control.saveAs(this);
  }//GEN-LAST:event_jMenuSaveAsActionPerformed

  /**
   * Returns to pre-treatements window.
   *
   * @param evt
   */
  private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonBackActionPerformed
  {//GEN-HEADEREND:event_jButtonBackActionPerformed

    // ============== Re create main workflow windows ========================
    MainWorkFlowFrame mainFrame = MainWorkFlowFrame.create(new InterfaceControl(
        control.getFluobt()));

    // ============== Update its previews ====================================
    mainFrame.updatePreviews();

    // ============== Show it ================================================
    mainFrame.setVisible(true);

    // ============== Close blobCheck frame ==================================
    dispose();
  }//GEN-LAST:event_jButtonBackActionPerformed

  /**
   * Go to next step ( = blobsolving ).
   *
   * @param evt
   */
  private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonNextActionPerformed
  {//GEN-HEADEREND:event_jButtonNextActionPerformed
    try
    {
      BlobSolver blobSolv = BlobSolver.loadFiles(control.getFluobt().
          getblobSolvDir());

      if (blobSolv != null && !blobSolv.getLineage().isEmpty())
      {
        YesNoCancelDialog dialog = new YesNoCancelDialog(this,
                                                         "Recompute or load ?",
                                                         "Do you want to load last lineage ?");

        if (dialog.yesPressed())
        {

          dispose();
          CellsCheckFrame cellFrame;

          cellFrame = new CellsCheckFrame(control); 
          control.getFluobt().addObserver(cellFrame);
          cellFrame.setVisible(true);

          return;
        }
        else if (dialog.cancelPressed())
        {
          return;
        }
      }
    }
    catch (Exception ex)
    {

    }
    
    control.runAll(Step.FINAL_BLOBS, Step.BLOBSOLVER);

//    try
//    {
//      control.getRun().join();
//    }
//    catch (InterruptedException ex)
//    {
//      ex.printStackTrace();
//      return;
//    }
    dispose();

    CellsCheckFrame cellFrame;

    cellFrame = new CellsCheckFrame(control);
    cellFrame.setVisible(true);


  }//GEN-LAST:event_jButtonNextActionPerformed

  /**
   * Saves results in result path.
   *
   * @param evt
   */
  private void jMenuSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuSaveActionPerformed
  {//GEN-HEADEREND:event_jMenuSaveActionPerformed
    control.save(this);
  }//GEN-LAST:event_jMenuSaveActionPerformed

  /**
   * Quit plugin.
   *
   * @param evt
   */
  private void jMenuQuitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuQuitActionPerformed
  {//GEN-HEADEREND:event_jMenuQuitActionPerformed
    control.quit(this);
  }//GEN-LAST:event_jMenuQuitActionPerformed

  /**
   * Load results from a path.
   *
   * @param evt
   */
  private void LoadActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_LoadActionPerformed
  {//GEN-HEADEREND:event_LoadActionPerformed
    control.load(this);

    // ============== Fill undone steps preview with black =====================
    //                   or do previews
    preview();
    jScrollBar1.setValues(1, 1, 1, control.getFluobt().getISize() + 1);
  }//GEN-LAST:event_LoadActionPerformed

  /**
   * Manages mouse clicked over imageBlobs. If click is done over a
   * newSelectedBlob it is recorded and shown. If right click over a
   * newSelectedBlob : delete and divide options are shown. If right click
   * outside a newSelectedBlob : add option is shown. If double clicked : blobs
   * are opened as an ImagePlus.
   *
   * @param evt
   */
  private void imageBlobsMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_imageBlobsMouseClicked
  {//GEN-HEADEREND:event_imageBlobsMouseClicked

    // =========== hide popup menus ===========================================
    jPopupInBlob.setVisible(false);
    jPopupOutBlob.setVisible(false);

    // =========== Get which mouse button has been clicked. ===================
    int button = evt.getButton();

    // ============ Register mouse Position ===================================
    mousePos = evt.getPoint();

    // ==================== Left or right click ===============================
    // 1) If right click show needed popup menus
    // 2) If left click search start points for division or change link if needed
    // 3) Select clicked newSelectedBlob if neded
    if (button != 2)
    {
      // ---------- 1) If right click show needed popup menus -----------------
      if (button == 3)
      {
        ShowPopUpMenu(imageBlobs.getPixIndexFromClick(evt.getPoint()), evt.
            getLocationOnScreen());
      }
      // ----------- 2) If left click search start points ---------------------
      //              for division or change link if needed
      else if (button == 1)
      {
        // === If we are seaching division start points ===
        if (searchDividPts)
        {
          SearchDividStartPtsClick(mousePos);
          return;
        }

        // === If we are changing a link ===
        if (changingLink)
        {
          ChangeLinkClick(mousePos);
          return;
        }
      }

      // -------------- 3) Select clicked newSelectedBlob if neded -----------------------
      selectBlobFromClick(mousePos);
    }

    // ========= If double clicked open image as Imageplus =================== 
    else
    {
      control.show(Step.FINAL_BLOBS, BlobsDrawOpt.GRAPH);
    }
  }//GEN-LAST:event_imageBlobsMouseClicked

  /**
   * When window open, update preview();
   *
   * @param evt
   */
  private void formWindowOpened(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowOpened
  {//GEN-HEADEREND:event_formWindowOpened
    preview();
  }//GEN-LAST:event_formWindowOpened

  /**
   * Changes image slice when scrollbar value is changed.
   *
   * @param evt
   */
  private void jScrollBar1AdjustmentValueChanged(java.awt.event.AdjustmentEvent evt)//GEN-FIRST:event_jScrollBar1AdjustmentValueChanged
  {//GEN-HEADEREND:event_jScrollBar1AdjustmentValueChanged
    // ========== Get new scrollbar value =====================================
    int val = evt.getValue();

    // ========== Update image blobs slice ====================================
    imageBlobs.setSlice(val);

    // ========== Unselect newSelectedBlob if one newSelectedBlob was selected ======================
    blobLab = -1;
    imageBlobs.setRoi(null);
  }//GEN-LAST:event_jScrollBar1AdjustmentValueChanged

  /**
   * Deletes a newSelectedBlob.
   *
   * @param evt
   */
  private void jMenuDeleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuDeleteActionPerformed
  {//GEN-HEADEREND:event_jMenuDeleteActionPerformed
    // =========== Get slice =================================================
    int slice = jScrollBar1.getValue();

    // ================ Get blobs ShapeSet ===================================
    String blobsPath = control.getFluobt().getfinalBlobsDir().resolve("Blobs_"
                                                                      + slice).
        toString();
    ShapeSet blobs = (ShapeSet) Utils.loadObject(blobsPath);

    // =============== remove selected newSelectedBlob from blobs ShapeSet ===============
    ShapeSet newBlobs = blobs.duplicate();
    newBlobs.removeShape(blobLab);

    // ============== Close popup menu ========================================
    jPopupInBlob.setVisible(false);

    // ============== Update preview ==========================================
    imageBlobs.setBlobsOrSeedsImage(slice, newBlobs.getColorProcessorGraph(
        control.getFluobt().getIWidth(), control.getFluobt().getIHeight()));

    // ======== Ask if user to validate or want to propagate deletion =========
    propagDialog.setLocation(mousePos.x + 100, mousePos.y);
    propagDialog.setVisible(true);

    if (propagDialog.finishPressed())
    {
      // --------------- save blobs shapeSet ----------------------------------
      Utils.saveObject(newBlobs, blobsPath);
    }
    else if (propagDialog.propagatePressed())
    {
      // --------------- save blobs shapeSet ----------------------------------
      Utils.saveObject(newBlobs, blobsPath);

      // -------------- if last slice : finish deletions ----------------------
      if (slice >= control.getFluobt().getISize())
      {
        return;
      }

      // --------------- Go to, next slice ------------------------------------
      slice++;
      jScrollBar1.setValue(slice);
      imageBlobs.setSlice(slice);
      imageBlobs.repaint();

      // ------- Compute mouse position index in zoomed image referential -----
      int index = imageBlobs.getPixIndexFromClick(mousePos.x, mousePos.y);

      // -------- Load blobs ShapeSet and convert it in labels array ----------
      blobsPath = control.getFluobt().getfinalBlobsDir().resolve("Blobs_"
                                                                 + slice).
          toString();
      blobs = (ShapeSet) Utils.loadObject(blobsPath);
      int[] labels = blobs.toLabels(control.getFluobt().getIWidth(), control.
          getFluobt().getIHeight());

      // -------- Get label corresponding to mouse position -------------------
      blobLab = labels[index];

      if (blobLab == - 1)
      {
//        imageBlobs.setBlobsOrSeedsSetList( slice, blobs );
        return;
      }

      // -------- Update roi of imageBlobs ------------------------------------
      // === Load newSelectedBlob ==
      ShapeFbt blob = blobs.getShape(blobLab);

      // === Compute its center radius and boundary ===
      blob.setCenterAndRadius();
      blob.updateBoundary();

      int boundaryLength = blob.getBoundary().size();

      int[] coordx = new int[boundaryLength];
      int[] coordy = new int[boundaryLength];
      int i = 0;
      for (Point pix : blob.getBoundary())
      {
        coordx[i] = pix.x;
        coordy[i] = pix.y;

        i++;
      }

      Roi blobRoi = new PointRoi(coordx, coordy, boundaryLength);

      // === Register Roi in imageBlobs ===
      imageBlobs.setRoi(blobRoi);

      // -------- recall delete method ----------------------------------------
      jMenuDeleteActionPerformed(null);

    }
    // If deletion not validate, repaint preview with the blob.
    else
    {
      imageBlobs.setBlobsOrSeedsImage(slice, blobs.getColorProcessorGraph(
          control.getFluobt().getIWidth(), control.getFluobt().getIHeight()));
    }
  }//GEN-LAST:event_jMenuDeleteActionPerformed

  /**
   * Adds a newSelectedBlob.
   *
   * @param evt
   */
  private void jMenuAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuAddActionPerformed
  {//GEN-HEADEREND:event_jMenuAddActionPerformed
    jPopupOutBlob.setVisible(false);

    // ============ Get pixel clicked index ===================================
    int index = imageBlobs.getPixIndexFromClick(mousePos.x, mousePos.y);
    Point pos = Utils.indexToPoint(index, control.getFluobt().getIWidth(),
                                   control.getFluobt().
        getIHeight());
    addDialog.setPos(pos);

    addDialog.setVisible(true);
  }//GEN-LAST:event_jMenuAddActionPerformed

  /**
   * Divides a newSelectedBlob.
   *
   * @param evt
   */
  private void jMenuDivideActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuDivideActionPerformed
  {//GEN-HEADEREND:event_jMenuDivideActionPerformed
    // ============== Close popupMenu =========================================
    jPopupInBlob.setVisible(false);

    dividDialog.setVisible(true);
  }//GEN-LAST:event_jMenuDivideActionPerformed

  private void jMenuChangeLinkActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuChangeLinkActionPerformed
  {//GEN-HEADEREND:event_jMenuChangeLinkActionPerformed
    jPopupInBlob.setVisible(false);

    if (blobLab == -1)
    {
      return;
    }

    changingLink = true;

    ShapeSet blobsList = (ShapeSet) Utils.loadObject(control.getFluobt().
        getfinalBlobsDir().resolve("Blobs_" + jScrollBar1.getValue()).
        toString());
    ShapeFbt blob = blobsList.getShape(blobLab);

    blob.setCenterAndRadius();
    changeLinkCenter = blob.getCenter();


  }//GEN-LAST:event_jMenuChangeLinkActionPerformed

  private void imageBlobsMouseMoved(java.awt.event.MouseEvent evt)//GEN-FIRST:event_imageBlobsMouseMoved
  {//GEN-HEADEREND:event_imageBlobsMouseMoved
    // ============ If we are seaching division start points ==================
    if (searchDividPts)
    {
      Point location = MouseInfo.getPointerInfo().getLocation();
      location.x += 10;
      location.y += 10;
      if (dividDialog.getStartPt1() < 0)
      {
        jPopupSearch1.setVisible(true);
        jPopupSearch1.setLocation(location);
      }
      else if (dividDialog.getStartPt2() < 0)
      {
        jPopupSearch2.setVisible(true);
        jPopupSearch2.setLocation(location);
      }
    }

    // ============ If we are changing link of newSelectedBlob ==========================
    if (changingLink)
    {
      Point position = evt.getPoint();

      try
      {
        position = imageBlobs.getPixFromClick(position);
      }
      catch (IndexOutOfBoundsException ex)
      {
        return;
      }

      int slice = jScrollBar1.getValue();

//      ShapeSet blobsList = ( ShapeSet ) Utils.loadObject( control.getFluobt().
//              getfinalBlobsDir().resolve( "Blobs_" + slice ).toString() );
      ImageFbt renormFbt = ImageFbt.load(control.getFluobt().getRenormDir().
          resolve(
              "slice_" + slice));

      renormFbt.setColor(Color.white);
      renormFbt.setLineWidth(3);
      renormFbt.drawLine(position.x, position.y, changeLinkCenter.x,
                         changeLinkCenter.y);

//      updateSlicePreview( slice, blobsList, renormFbt );
      imageBlobs.setImageProcessor(renormFbt, slice);
    }
  }//GEN-LAST:event_imageBlobsMouseMoved

  private void imageBlobsMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_imageBlobsMousePressed
  {//GEN-HEADEREND:event_imageBlobsMousePressed
    mousePos = evt.getPoint();
  }//GEN-LAST:event_imageBlobsMousePressed

  private void imageBlobsMouseWheelMoved(java.awt.event.MouseWheelEvent evt)//GEN-FIRST:event_imageBlobsMouseWheelMoved
  {//GEN-HEADEREND:event_imageBlobsMouseWheelMoved
    jScrollBar1.setValue(imageBlobs.getSlice());
  }//GEN-LAST:event_imageBlobsMouseWheelMoved

  private void jButtonLinksActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonLinksActionPerformed
  {//GEN-HEADEREND:event_jButtonLinksActionPerformed
    linkDialog.setVisible(true);

    YesNoCancelDialog dialog = new YesNoCancelDialog((Frame) getParent(),
                                                     "Re clean blobs",
                                                     "Do you want to re-clean blobs ?");

    if (dialog.yesPressed())
    {
      for (int i = 1; i <= control.getFluobt().getISize(); i++)
      {
        String blobsPath = control.getFluobt().getfinalBlobsDir().resolve(
            "Blobs_" + i).
            toString();
        ShapeSet blobs = (ShapeSet) Utils.loadObject(blobsPath);

        blobs.cleanGraph();

        Utils.saveObject(blobs, blobsPath);
      }
    }

    preview();
  }//GEN-LAST:event_jButtonLinksActionPerformed

    private void jMenuChangeWorkingDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuChangeWorkingDirActionPerformed
      DirectoryChooser dirChoos = new DirectoryChooser(
          "Current working directory : " + control.getFluobt().getWorkingDir());
      String chosen = dirChoos.getDirectory();

      if (chosen != null)
      {
        control.getFluobt().changeWorkingDir(Paths.get(chosen));
      }
    }//GEN-LAST:event_jMenuChangeWorkingDirActionPerformed

  private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
  {//GEN-HEADEREND:event_formWindowClosing
    control.quit(this);
  }//GEN-LAST:event_formWindowClosing

  // ==========================================================================
  // ===                      Observer methods
  // ==========================================================================
  @Override
  public void update(Observable o, Object arg)
  {
    Step step = (Step) arg;
    if (step.compareTo(Step.FINAL_BLOBS) == 0)
    {
      preview();
    }
  }

  // ==========================================================================
  // ===                    MAIN
  // ==========================================================================
  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.
          getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(BlobsCheckFrame.class.getName()).
          log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(BlobsCheckFrame.class.getName()).
          log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(BlobsCheckFrame.class.getName()).
          log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(BlobsCheckFrame.class.getName()).
          log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        try
        {
          new BlobsCheckFrame(null).setVisible(true);
        }
        catch (Exception ex)
        {
          Logger.getLogger(BlobsCheckFrame.class.getName()).log(Level.SEVERE,
                                                                null, ex);
        }
      }
    });
  }

  // ==========================================================================
  // ===                 OTHER METHODS
  // ==========================================================================
  /**
   * Upadte previews of finalblobs shapeSets.
   *
   */
  public void preview()
  {
    control.preview(imageBlobs, false, Step.FINAL_BLOBS, BlobsDrawOpt.GRAPH);
    pack();
  }

  /**
   * Method called when a click is done after changingLink was set to true.
   *
   * @param clickedPoint Point that was clicked in imageBlobs
   */
  private void ChangeLinkClick(Point clickedPoint)
  {
    int slice = jScrollBar1.getValue();
    ImageFbt renormFbt = ImageFbt.load(control.getFluobt().getRenormDir().
        resolve(
            "slice_" + slice));
    imageBlobs.setImageProcessor(renormFbt, slice);

    if (blobLab == -1)
    {
      changingLink = false;
      return;
    }

    // ============ Get pixel index from clicked point ========================
    // It is a pixel index of the newSelectedBlob we want to add/delete a link with.
    int currIndex;
    try
    {
      currIndex = imageBlobs.getPixIndexFromClick(clickedPoint);
    }
    catch (ArrayIndexOutOfBoundsException ex)
    {
      changingLink = false;
      return;
    }

    // ============ Import blobs list and renormalize image corresponding =====
    String blobsPath = control.getFluobt().getfinalBlobsDir().resolve("Blobs_"
                                                                      + slice).
        toString();
    ShapeSet oldBlobsList = (ShapeSet) Utils.loadObject(blobsPath);
    ShapeSet blobsList = oldBlobsList.duplicate();
    ShapeFbt selectedBlob = blobsList.getShape(blobLab);

    // =============== Get Label of clicked newSelectedBlob ==============================
    int[] labels = blobsList.toLabels(control.getFluobt().getIWidth(), control.
        getFluobt().getIHeight());
    int clickedBlobLabel = labels[currIndex];

    if (clickedBlobLabel == -1)
    {
      return;
    }

    // ================ Get blobsList graph  =================================
    ConnectionGraph graph = blobsList.getGraph();

    // =========== If graph contains a link between ==========================
    //        clicked newSelectedBlob and selected newSelectedBlob , remove it.
    Pair connection = new Pair(blobLab, clickedBlobLabel);
    if (graph.contains(connection))
    {
      graph.removeConnection(connection);
    }
    // =========== Else if graph doesn't contains a link between ==============
    //        clicked newSelectedBlob and selected newSelectedBlob , add it.
    else
    {
      // Compute border length between the blobs.

      ShapeFbt clickedBlob = blobsList.getShape(clickedBlobLabel);
      double border = selectedBlob.border(clickedBlob);

      // Add connection.
      graph.putConnection(blobLab, clickedBlobLabel, border);
    }

    // ============= Update preview ===========================================
    imageBlobs.setBlobsOrSeedsImage(slice, blobsList.getColorProcessorGraph(
        control.getFluobt().getIWidth(), control.getFluobt().getIHeight()));

    changingLink = false;

    // ======= Ask user if he wants to finish propagate or cancel action ======
    propagDialog.setVisible(true);

    // =========== If finish is pressed, save link changed ====================
    if (propagDialog.finishPressed())
    {
      Utils.saveObject(blobsList, blobsPath);
    }
    // =========== If propagate is pressed ===================================
    // 1 ) Save link changed
    // 2 ) Increment slice
    // 3 ) Find newSelectedBlob corresponding to selected newSelectedBlob in next slice and select it
    // 4 ) Update imageBlobs roi with this new selected newSelectedBlob
    // 5 ) Update changeLinkCenter
    // 6 ) Update preview
    // 7 ) call ChangeLinkClick for this new slice
    else if (propagDialog.propagatePressed())
    {

      // -------------- 1 ) Save link changed ---------------------------------
      Utils.saveObject(blobsList, blobsPath);

      if (slice > control.getFluobt().getISize())
      {
        return;
      }

      // -------------- 2 ) Increment slice -----------------------------------
      slice++;
      jScrollBar1.setValue(slice);

      // ------------- 3 ) Find newSelectedBlob corresponding to -------------------------
      //          selected newSelectedBlob in next slice and select it
      selectedBlob.setCenterAndRadius();
      int index = Utils.pointToIndex(selectedBlob.getCenter(), control.
          getFluobt().
          getIWidth(), control.getFluobt().getIHeight());

      blobsList = (ShapeSet) Utils.loadObject(control.getFluobt().
          getfinalBlobsDir().
          resolve("Blobs_" + slice).toString());
      labels = blobsList.toLabels(control.getFluobt().getIWidth(), control.
          getFluobt().getIHeight());
      blobLab = labels[ index];

      if (blobLab == -1)
      {
        changingLink = false;
        return;
      }

      // --------- 4 ) Update imageBlobs roi with this new selected newSelectedBlob ------
      // === Load newSelectedBlob ==
      ShapeFbt newSelectedBlob = blobsList.getShape(blobLab);

      // === Compute its center radius and boundary ===
      newSelectedBlob.setCenterAndRadius();
      newSelectedBlob.updateBoundary();

      int boundaryLength = newSelectedBlob.getBoundary().size();

      // === Do pointroi with boundary ===
      int[] coordx = new int[boundaryLength];
      int[] coordy = new int[boundaryLength];
      int i = 0;
      for (Point pix : newSelectedBlob.getBoundary())
      {
        coordx[i] = pix.x;
        coordy[i] = pix.y;

        i++;
      }

      Roi blobRoi = new PointRoi(coordx, coordy, boundaryLength);

      // === Register Roi in imageBlobs ===
      imageBlobs.setRoi(blobRoi);

      // --------------- 5 ) Update changeLinkCenter --------------------------
      changeLinkCenter = newSelectedBlob.getCenter();

      // ------------------ 6 ) Update preview --------------------------------
//      updateSlicePreview( slice );
      imageBlobs.repaint();

      // ------------- 7 ) call ChangeLinkClick for this new slice ------------
      ChangeLinkClick(clickedPoint);
    }
    // ============== Remove link preview if ot was not validate  =============
    else
    {
      imageBlobs.setBlobsOrSeedsImage(slice, oldBlobsList.
          getColorProcessorGraph(control.getFluobt().getIWidth(), control.
              getFluobt().getIHeight()));
    }

    // ================ Set change link boolean to false =====================
    changingLink = false;
  }

  /**
   * Method called when a click is done after searchDividStartsPts was set to
   * true.
   *
   * @param clickedPoint Point that was clicked in imageBlobs
   */
  private void SearchDividStartPtsClick(Point clickedPoint)
  {
    // ========== Get pixel point from clicked point on imageBlobs ============
    Point startPt = imageBlobs.getPixFromClick(clickedPoint);

    // ============== If first start point was not yet register, ==============
    //                       register it as clicked point
    if (dividDialog.getStartPt1() < 0)
    {
      dividDialog.setStartPt1(Utils.pointToIndex(startPt, control.getFluobt().
          getIWidth(),
                                                 control.getFluobt().
          getIHeight()));
      jPopupSearch1.setVisible(false);
    }
    // =========== Else if second start point was not yet register, ===========
    // register it as clicked point and return to division dialog
    else if (dividDialog.getStartPt2() < 0)
    {
      dividDialog.setStartPt2(Utils.pointToIndex(startPt, control.getFluobt().
          getIWidth(),
                                                 control.getFluobt().
          getIHeight()));
      dividDialog.setVisible(true);
      jPopupSearch2.setVisible(false);
    }

  }

  /**
   * Selects clicked newSelectedBlob and set it as roi in imageBlobs so that its
   * boundary is highlighted.
   *
   * @param clickedPoint Point that was clicked in imageBlobs
   */
  private void selectBlobFromClick(Point clickedPoint)
  {
    // ============ Get pixel index from clicked point ========================
    int index;
    try
    {
      index = imageBlobs.getPixIndexFromClick(clickedPoint);
    }
    catch (ArrayIndexOutOfBoundsException ex)
    {
      return;
    }

    // ====== Load blobs ShapeSet and convert it in labels array ==============
    String blobsPath = control.getFluobt().getfinalBlobsDir().resolve("Blobs_"
                                                                      + jScrollBar1.
        getValue()).toString();
    ShapeSet blobs = (ShapeSet) Utils.loadObject(blobsPath);
    int[] labels = blobs.toLabels(control.getFluobt().getIWidth(), control.
        getFluobt().getIHeight());

    // ====== Get label corresponding to mouse position =======================
    blobLab = labels[index];

    // ============= If no newSelectedBlob was clicked on, set image roi to null =========
    if (blobLab == -1)
    {
      imageBlobs.setRoi(null);
    }
    // ========= If a newSelectedBlob was clicked, set image roi as the newSelectedBlob =============
    //             bounding box.
    else
    {
      // ------------------- Load newSelectedBlob ----------------------------------------
      ShapeFbt blob = blobs.getShape(blobLab);

      // -------------- Compute its center radius and boundary ----------------
      blob.setCenterAndRadius();
      blob.updateBoundary();

      int boundaryLength = blob.getBoundary().size();

      int[] coordx = new int[boundaryLength];
      int[] coordy = new int[boundaryLength];
      int i = 0;
      for (Point pix : blob.getBoundary())
      {
        coordx[i] = pix.x;
        coordy[i] = pix.y;

        i++;
      }

      Roi blobRoi = new PointRoi(coordx, coordy, boundaryLength);

      // ------------ Register Roi in imageBlobs ------------------------------
      imageBlobs.setRoi(blobRoi);
    }

    // ============ repaint frame =============================================
    imageBlobs.repaint();
  }

  /**
   * Method managing showing popup menus in or out a newSelectedBlob.
   *
   * @param pixIndex Index of clicked pixel
   * @param screenLocation screen location of the mouse
   */
  private void ShowPopUpMenu(int pixIndex, Point screenLocation)
  {
    // ====== Clicked in background ? =========================================
    int[] back = (int[]) Utils.loadObject(
        control.getFluobt().getRenormDir().resolve(
            "slice_" + jScrollBar1.getValue() + "_"
            + ImageFbt.BACKGROUND_FILENAME).
        toString());
    boolean backgroundClicked = (back[pixIndex] == 1);

    // ========= If a newSelectedBlob was clicked on, show inblob popup menu =============
    if (blobLab != -1)
    {
      jPopupInBlob.setLocation(screenLocation);
      jPopupInBlob.setVisible(true);
    }
    // ========= If no newSelectedBlob was clicked on, and not in background =============
    //                   show outblob popup menu 
    else if (!backgroundClicked)
    {
      jPopupOutBlob.setLocation(screenLocation);
      jPopupOutBlob.setVisible(true);
    }
  }

  // ==========================================================================
  //                             GETTERS
  // ==========================================================================
  /**
   * Get Fluobt attribute.
   *
   * @return
   */
  public Fluo_Bac_Tracker getFluobt()
  {
    return control.getFluobt();
  }

  /**
   * Get scrollBar value ( corresponding to previews slice number ).
   *
   * @return
   */
  public int getSlice()
  {
    return jScrollBar1.getValue();
  }

  /**
   * returns last recorded clicked or dragged mouse position.
   *
   * @return
   */
  public Point getLastMousePos()
  {
    return mousePos;
  }

  /**
   * Returns imageBlobs panel.
   *
   * @return
   */
  public ImagePanel getImageBlobs()
  {
    return imageBlobs;
  }

  // ==========================================================================
  //                             SETTERS
  // ==========================================================================
  /**
   * Set scrollBar value ( corresponding to previews slice number ).
   *
   */
  public void setSlice(int _slice)
  {
    jScrollBar1.setValue(_slice);
  }

  public void setSearchDividePts(boolean search)
  {
    searchDividPts = search;
  }
  // ==========================================================================
  //                 PERSONAL ATTRIBUTES
  // ==========================================================================
  /**
   * Interface controler.
   */
  InterfaceControl control;
  /**
   * Selected newSelectedBlob label.
   */
  private int blobLab;
  /**
   * Last mouse registered position.
   */
  private Point mousePos;
  /**
   * JDialog managing newSelectedBlob adding.
   */
  AddBlobDialog addDialog = new AddBlobDialog(this, true);
  /**
   * JDialog managing newSelectedBlob division.
   */
  DivideBlobDialog dividDialog = new DivideBlobDialog(this, true);
  /**
   * JDialog used to ask user if he wants to validate and finish an action,
   * validate and propagate an action or cancel an action.
   */
  PropagateDialog propagDialog = new PropagateDialog(this, true);
  /**
   * True if starting division points are being search, false if not.
   */
  boolean searchDividPts = false;
  /**
   * True if a linked is being changed, false if not.
   */
  boolean changingLink = false;
  /**
   * Center of newSelectedBlob to which a link is added/deleted.
   */
  Point changeLinkCenter;
  LinksDialog linkDialog = new LinksDialog(this, true);
  // ==========================================================================
  //                 GENERATED ATTRIBUTES
  // ==========================================================================
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem Load;
  private cellst.Interface.ImagePanel imageBlobs;
  private javax.swing.JButton jButtonBack;
  private javax.swing.JButton jButtonLinks;
  private javax.swing.JButton jButtonNext;
  private javax.swing.JMenu jMenu2;
  private javax.swing.JMenuItem jMenuAdd;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JMenuItem jMenuChangeLink;
  private javax.swing.JMenuItem jMenuChangeWorkingDir;
  private javax.swing.JMenuItem jMenuDelete;
  private javax.swing.JMenuItem jMenuDivide;
  private javax.swing.JMenu jMenuFile;
  private javax.swing.JMenuItem jMenuItem2;
  private javax.swing.JMenuItem jMenuItem3;
  private javax.swing.JMenuItem jMenuQuit;
  private javax.swing.JMenuItem jMenuSave;
  private javax.swing.JMenuItem jMenuSaveAs;
  private javax.swing.JPopupMenu jPopupInBlob;
  private javax.swing.JPopupMenu jPopupOutBlob;
  private javax.swing.JPopupMenu jPopupSearch1;
  private javax.swing.JPopupMenu jPopupSearch2;
  private javax.swing.JScrollBar jScrollBar1;
  // End of variables declaration//GEN-END:variables
}

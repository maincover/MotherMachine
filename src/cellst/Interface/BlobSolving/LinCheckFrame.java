/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cellst.Interface.BlobSolving;

import ij.*;
import ij.gui.*;
import ij.measure.ResultsTable;
import ij.process.*;

import java.awt.*;
import java.awt.image.ColorModel;
import java.util.*;

import javax.swing.BorderFactory;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;

import cellst.Enums.Step;
import cellst.Image.*;
import cellst.Interface.ImagePanel;
import cellst.Interface.InterfaceControl;
import cellst.Main.*;

/**
 *
 * @author Magali Vangkeosay, David Parsons
 */
public class LinCheckFrame extends javax.swing.JFrame implements Observer
{

  // ==========================================================================
  //                         CONSTRUCTOR
  // ==========================================================================
  /**
   * Creates new form LinCheckFrame
   */
  public LinCheckFrame(InterfaceControl _control)
  {
    initComponents();

    setTitle("FLUO_BAC_TRACKER - Lineage Checking");

    control = _control;
    
    jScrollBar1.setValues(1, 1, 1, control.getFluobt().getISize() + 1);
    
    
    nowIm.mutualLink(afterIm);
    nowIm.mutualLink(beforeIm);
    afterIm.mutualLink(beforeIm);
    
  }

  // ==========================================================================
  //                       GENERATED CODE
  // ==========================================================================
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jPopupMenu1 = new javax.swing.JPopupMenu();
    changeMotherItem = new javax.swing.JMenuItem();
    changeDaughterItem = new javax.swing.JMenuItem();
    beforeIm = new cellst.Interface.ImagePanel();
    nowIm = new cellst.Interface.ImagePanel();
    afterIm = new cellst.Interface.ImagePanel();
    jButton1 = new javax.swing.JButton();
    jButton2 = new javax.swing.JButton();
    jScrollBar1 = new javax.swing.JScrollBar();
    jSkelet = new javax.swing.JButton();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenuFile = new javax.swing.JMenu();
    jMenuSave = new javax.swing.JMenuItem();
    jMenuSaveAs = new javax.swing.JMenuItem();
    Load = new javax.swing.JMenuItem();
    jMenuQuit = new javax.swing.JMenuItem();
    jMenu2 = new javax.swing.JMenu();

    changeMotherItem.setText("Change mother cell");
    changeMotherItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        changeMotherItemActionPerformed(evt);
      }
    });
    jPopupMenu1.add(changeMotherItem);

    changeDaughterItem.setText("Change daughter(s) cell(s)");
    changeDaughterItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        changeDaughterItemActionPerformed(evt);
      }
    });
    jPopupMenu1.add(changeDaughterItem);

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        formMouseClicked(evt);
      }
    });
    addWindowListener(new java.awt.event.WindowAdapter()
    {
      public void windowClosing(java.awt.event.WindowEvent evt)
      {
        formWindowClosing(evt);
      }
    });
    addComponentListener(new java.awt.event.ComponentAdapter()
    {
      public void componentShown(java.awt.event.ComponentEvent evt)
      {
        formComponentShown(evt);
      }
    });

    beforeIm.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    beforeIm.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        formMouseWheelMoved(evt);
      }
    });
    beforeIm.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        beforeImMouseClicked(evt);
      }
    });
    beforeIm.addKeyListener(new java.awt.event.KeyAdapter()
    {
      public void keyPressed(java.awt.event.KeyEvent evt)
      {
        formKeyPressed(evt);
      }
    });

    javax.swing.GroupLayout beforeImLayout = new javax.swing.GroupLayout(beforeIm);
    beforeIm.setLayout(beforeImLayout);
    beforeImLayout.setHorizontalGroup(
      beforeImLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 214, Short.MAX_VALUE)
    );
    beforeImLayout.setVerticalGroup(
      beforeImLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 278, Short.MAX_VALUE)
    );

    nowIm.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    nowIm.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        formMouseWheelMoved(evt);
      }
    });
    nowIm.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        nowImMouseClicked(evt);
      }
    });
    nowIm.addKeyListener(new java.awt.event.KeyAdapter()
    {
      public void keyPressed(java.awt.event.KeyEvent evt)
      {
        formKeyPressed(evt);
      }
    });

    javax.swing.GroupLayout nowImLayout = new javax.swing.GroupLayout(nowIm);
    nowIm.setLayout(nowImLayout);
    nowImLayout.setHorizontalGroup(
      nowImLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 214, Short.MAX_VALUE)
    );
    nowImLayout.setVerticalGroup(
      nowImLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );

    afterIm.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    afterIm.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        formMouseWheelMoved(evt);
      }
    });
    afterIm.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        afterImMouseClicked(evt);
      }
    });
    afterIm.addKeyListener(new java.awt.event.KeyAdapter()
    {
      public void keyPressed(java.awt.event.KeyEvent evt)
      {
        formKeyPressed(evt);
      }
    });

    javax.swing.GroupLayout afterImLayout = new javax.swing.GroupLayout(afterIm);
    afterIm.setLayout(afterImLayout);
    afterImLayout.setHorizontalGroup(
      afterImLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 214, Short.MAX_VALUE)
    );
    afterImLayout.setVerticalGroup(
      afterImLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );

    jButton1.setText("<< Back");
    jButton1.setPreferredSize(new java.awt.Dimension(100, 30));
    jButton1.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButton1ActionPerformed(evt);
      }
    });

    jButton2.setText("Results");
    jButton2.setPreferredSize(new java.awt.Dimension(100, 30));
    jButton2.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButton2ActionPerformed(evt);
      }
    });

    jScrollBar1.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
    jScrollBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jScrollBar1.addAdjustmentListener(new java.awt.event.AdjustmentListener()
    {
      public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt)
      {
        jScrollBar1AdjustmentValueChanged(evt);
      }
    });

    jSkelet.setText("Skelet");
    jSkelet.setPreferredSize(new java.awt.Dimension(100, 30));
    jSkelet.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jSkeletActionPerformed(evt);
      }
    });

    jMenuFile.setText("File");

    jMenuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
    jMenuSave.setText("Save");
    jMenuSave.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuSaveActionPerformed(evt);
      }
    });
    jMenuFile.add(jMenuSave);

    jMenuSaveAs.setText("Save As");
    jMenuSaveAs.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuSaveAsActionPerformed(evt);
      }
    });
    jMenuFile.add(jMenuSaveAs);

    Load.setText("Load");
    Load.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        LoadActionPerformed(evt);
      }
    });
    jMenuFile.add(Load);

    jMenuQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
    jMenuQuit.setText("Quit");
    jMenuQuit.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuQuitActionPerformed(evt);
      }
    });
    jMenuFile.add(jMenuQuit);

    jMenuBar1.add(jMenuFile);

    jMenu2.setText("Help");
    jMenuBar1.add(jMenu2);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(beforeIm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jScrollBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(nowIm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addComponent(afterIm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSkelet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(beforeIm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(afterIm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(nowIm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jSkelet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  // ==========================================================================
  //                       ACTION MANAGEMENT METHODS
  // ==========================================================================
  private void jMenuSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuSaveActionPerformed
  {//GEN-HEADEREND:event_jMenuSaveActionPerformed
    control.save(this);
  }//GEN-LAST:event_jMenuSaveActionPerformed

  private void jMenuSaveAsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuSaveAsActionPerformed
  {//GEN-HEADEREND:event_jMenuSaveAsActionPerformed
    control.saveAs(this);
  }//GEN-LAST:event_jMenuSaveAsActionPerformed

  private void LoadActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_LoadActionPerformed
  {//GEN-HEADEREND:event_LoadActionPerformed
    control.load(this);
    
    jScrollBar1.setValues(1, 1, 1, control.getFluobt().getISize());
    preview();
  }//GEN-LAST:event_LoadActionPerformed

  private void jMenuQuitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuQuitActionPerformed
  {//GEN-HEADEREND:event_jMenuQuitActionPerformed
    control.quit(this);
  }//GEN-LAST:event_jMenuQuitActionPerformed

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
  {//GEN-HEADEREND:event_jButton1ActionPerformed
    CellsCheckFrame cellFrame = new CellsCheckFrame(control);
    cellFrame.setVisible(true);

    dispose();
  }//GEN-LAST:event_jButton1ActionPerformed

  private void formComponentShown(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentShown
  {//GEN-HEADEREND:event_formComponentShown
    preview();
  }//GEN-LAST:event_formComponentShown

  private void jScrollBar1AdjustmentValueChanged(java.awt.event.AdjustmentEvent evt)//GEN-FIRST:event_jScrollBar1AdjustmentValueChanged
  {//GEN-HEADEREND:event_jScrollBar1AdjustmentValueChanged

    int val = evt.getValue();

    nowIm.setSlice(val);
    nowIm.setRoi(null);

    beforeIm.setSlice(val);
    beforeIm.setRoi(null);

    afterIm.setSlice(val);
    afterIm.setRoi(null);
  }//GEN-LAST:event_jScrollBar1AdjustmentValueChanged

  private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt)//GEN-FIRST:event_formMouseWheelMoved
  {//GEN-HEADEREND:event_formMouseWheelMoved
    ImagePanel panel = (ImagePanel) evt.getComponent();

    if (evt.isControlDown())
    {
      double zoom = panel.getZoom();

      nowIm.zoom(zoom - nowIm.getZoom());
      beforeIm.zoom(zoom - beforeIm.getZoom());
      afterIm.zoom(zoom - afterIm.getZoom());
    }
    else if (evt.isAltDown() || evt.isShiftDown())
    {
      Point topLeftCorner = panel.getTopLeftCorner();

      nowIm.setTopLeftCorner(topLeftCorner);
      beforeIm.setTopLeftCorner(topLeftCorner);
      afterIm.setTopLeftCorner(topLeftCorner);
    }
    else
    {
      int val = panel.getSlice();
      nowIm.setSlice(val);
      beforeIm.setSlice(val);
      afterIm.setSlice(val);
      jScrollBar1.setValue(val);
    }

  }//GEN-LAST:event_formMouseWheelMoved

  private void nowImMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_nowImMouseClicked
  {//GEN-HEADEREND:event_nowImMouseClicked
    // hide popup menu
    jPopupMenu1.setVisible(false);

    // select clicked cell in nowIm and its mother in beforeIm, 
    // and daughters in afterIm.
    mousePos = evt.getPoint();

    selectCellFromClick(mousePos);

    // =========== if right click, show popup menu ============================
    if (evt.getButton() == 3 && selectCell != null)
    {
      jPopupMenu1.setLocation(MouseInfo.getPointerInfo().getLocation());
      jPopupMenu1.setVisible(true);
    }
  }//GEN-LAST:event_nowImMouseClicked

  private void formMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseClicked
  {//GEN-HEADEREND:event_formMouseClicked
    jPopupMenu1.setVisible(false);


  }//GEN-LAST:event_formMouseClicked

  private void changeMotherItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_changeMotherItemActionPerformed
  {//GEN-HEADEREND:event_changeMotherItemActionPerformed
    jPopupMenu1.setVisible(false);
    changingMother = true;
    beforeIm.setBorder(BorderFactory.createLineBorder(Color.red, 3, true));
    
    editedTrans = new CellTransition(jScrollBar1.getValue() - 1, null, selectCell);

    LinkedHashSet<CellTransition> lineage
                            = (LinkedHashSet<CellTransition>) Utils.loadObject(
        control.getFluobt().getblobSolvDir().resolve("Lineage").toString());
    for (CellTransition trans : lineage)
    {
      if (trans.getT() == jScrollBar1.getValue() - 1
          && (trans.getDaughter1().equals(selectCell)
              || (trans.getDaughter2() != null && trans.getDaughter2().equals(
                  selectCell))))
      {
        editedTrans = trans;
        break;
      }
    }

    if (showAgain)
    {
      JCheckBox rememberChk = new JCheckBox("Do not show this message again.");

      String msg = "Click on new mother.\n Type Enter to confirm. \n Escape to cancel.";

      Object[] msgContent =
      {
        msg, rememberChk
      };

      JOptionPane.showMessageDialog(this, msgContent, "How to ...", 3);

      showAgain = !rememberChk.isSelected();
    }
  }//GEN-LAST:event_changeMotherItemActionPerformed

  private void changeDaughterItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_changeDaughterItemActionPerformed
  {//GEN-HEADEREND:event_changeDaughterItemActionPerformed
    jPopupMenu1.setVisible(false);
    changingDaughter = true;
    afterIm.setBorder(BorderFactory.createLineBorder(Color.red, 3, true));

    editedTrans = new CellTransition(jScrollBar1.getValue(), selectCell, null);

    
    LinkedHashSet<CellTransition> lineage
                            = (LinkedHashSet<CellTransition>) Utils.loadObject(
        control.getFluobt().getblobSolvDir().resolve("Lineage").toString());

    for (CellTransition trans : lineage)
    {
      if (trans.getT() == jScrollBar1.getValue()
          && trans.getMother().equals(selectCell))
      {
        editedTrans = trans;
        break;
      }
    }

    if (showAgain)
    {
      JCheckBox rememberChk = new JCheckBox("Do not show this message again.");

      String msg = "Click on new daughter(s).\n Type Enter to confirm. \n Escape to cancel.";

      Object[] msgContent =
      {
        msg, rememberChk
      };

      JOptionPane.showMessageDialog(this, msgContent, "How to...", 1);

      showAgain = !rememberChk.isSelected();
    }
  }//GEN-LAST:event_changeDaughterItemActionPerformed

  private void beforeImMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_beforeImMouseClicked
  {//GEN-HEADEREND:event_beforeImMouseClicked
    if (changingMother)
    {
      // ============ Get pixel index from clicked point ========================
      int index;
      try
      {
        index = beforeIm.getPixIndexFromClick(evt.getPoint());
      }
      catch (ArrayIndexOutOfBoundsException ex)
      {
        return;
      }

      // ====== Load afterBlobs ShapeSet and convert it in labels array ==========
      BlobSolver blobsolv = BlobSolver.loadFiles(control.getFluobt().getblobSolvDir());
      ShapeSet beforeBlobs = blobsolv.getBlobListOverMovie().get(jScrollBar1.
          getValue() - 1);
      int[] labels = beforeBlobs.
          toLabels(control.getFluobt().getIWidth(), control.getFluobt().getIHeight());

      // ====== Get label corresponding to mouse position ===================
      int blobLab = labels[index];

      // ========= If a Blob was clicked ================================
      // ----------------  if it is in a certain cell. -----------------------
      //   edit transition
      for (Cell currCell : beforeBlobs.getPossibleCells())
      {
        if (currCell.contains(blobLab) && currCell.isCertain())
        {
          newMother = currCell;
          beforeIm.setRoi(beforeBlobs.getRoiFromCell(currCell));

          break;
        }
      }
    }
    else if (changingDaughter)
    {
      return;
    }
    else
    {
      // hide popup menu
      jPopupMenu1.setVisible(false);

      // select clicked cell in nowIm and its mother in beforeIm, 
      // and daughters in afterIm.
      mousePos = evt.getPoint();

      selectCellFromClick(mousePos);
    }

  }//GEN-LAST:event_beforeImMouseClicked

  private void afterImMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_afterImMouseClicked
  {//GEN-HEADEREND:event_afterImMouseClicked
    if (changingDaughter)
    {
      // ============ Get pixel index from clicked point ========================
      int index;
      try
      {
        index = afterIm.getPixIndexFromClick(evt.getPoint());
      }
      catch (ArrayIndexOutOfBoundsException ex)
      {
        return;
      }

      // ====== Load afterBlobs ShapeSet and convert it in labels array ==========
      BlobSolver blobsolv = BlobSolver.loadFiles(control.getFluobt().getblobSolvDir());
      ShapeSet afterBlobs = blobsolv.getBlobListOverMovie().get(jScrollBar1.
          getValue() + 1);
      int[] labels = afterBlobs.
          toLabels(control.getFluobt().getIWidth(), control.getFluobt().getIHeight());

      // ====== Get label corresponding to mouse position ===================
      int blobLab = labels[index];

      // ========= If a Blob was clicked ================================
      // ----------------  if it is in a certain cell. -----------------------
      //   edit transition
      for (Cell currCell : afterBlobs.getPossibleCells())
      {
        if (currCell.contains(blobLab) && currCell.isCertain())
        {
          if (newDaughter1 == null)
          {
            newDaughter1 = currCell;
            afterIm.setRoi(afterBlobs.getRoiFromCell(newDaughter1));

          }
          else if (!newDaughter1.equals(currCell))
          {
            if (newDaughter2 != null && newDaughter2.equals(currCell))
            {
              newDaughter2 = null;
              afterIm.setRoi(afterBlobs.getRoiFromCell(newDaughter1));
            }
            else
            {
              newDaughter2 = currCell;

              Cell roiCell = new Cell(newDaughter1);
              for (int lab : newDaughter2.getLabels())
              {
                roiCell.add(lab);
              }
              afterIm.setRoi(afterBlobs.getRoiFromCell(roiCell));
            }
          }
          else if (newDaughter2 != null)
          {
            newDaughter1 = new Cell(newDaughter2);
            newDaughter2 = null;
            afterIm.setRoi(afterBlobs.getRoiFromCell(newDaughter1));
          }

          break;
        }
      }

    }
    else if (changingMother)
    {
      return;
    }
    else
    {
      // hide popup menu
      jPopupMenu1.setVisible(false);

      // select clicked cell in nowIm and its mother in beforeIm, 
      // and daughters in afterIm.
      mousePos = evt.getPoint();

      selectCellFromClick(mousePos);
    }
  }//GEN-LAST:event_afterImMouseClicked

  private void formKeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_formKeyPressed
  {//GEN-HEADEREND:event_formKeyPressed
    // If EnTER pressed
    int key = evt.getKeyCode();
    if (key == 10 || key == 27)
    {
      if (key == 10)
      {
        BlobSolver blobsolv = BlobSolver.loadFiles(control.getFluobt().getblobSolvDir());

        if (newMother != null)
        {
          try
          {
            if( editedTrans.getMother() != null)
            {
              blobsolv.editTransitionMother(editedTrans, newMother);
            }
            else
            {
              editedTrans.setMother(newMother);
              blobsolv.addTransition(new CellTransition(editedTrans));
            }
          }
          catch (InterruptedException ex)
          {
            return ;
          }
          blobsolv.saveFiles(control.getFluobt().getblobSolvDir());
        }
        else if (newDaughter1 != null)
        {
          try
          {
            if( editedTrans.getDaughter1() != null )
            {
              blobsolv.editTransitionDaughter(editedTrans, newDaughter1, newDaughter2);
            }
            else
            {
              editedTrans.setDaughter1(newDaughter1);
              editedTrans.setDaughter2(newDaughter2);
              blobsolv.addTransition(editedTrans);
            }
          }
          catch (InterruptedException ex)
          {
            return;
          }
          
          blobsolv.saveFiles(control.getFluobt().getblobSolvDir());
        }

      }

      afterIm.setBorder(BorderFactory.
          createLineBorder(Color.black, 1, false));
      beforeIm.setBorder(BorderFactory.
          createLineBorder(Color.black, 1, false));

      changingMother = false;
      changingDaughter = false;

      editedTrans = null;
      newMother = null;
      newDaughter1 = null;
      newDaughter2 = null;

      nowIm.setRoi(null);
      afterIm.setRoi(null);
      beforeIm.setRoi(null);

      preview();

    }


  }//GEN-LAST:event_formKeyPressed

  private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed
  {//GEN-HEADEREND:event_jButton2ActionPerformed
    BlobSolver blobsolv = BlobSolver.loadFiles(control.getFluobt().getblobSolvDir());

    ResultsTable results = blobsolv.getResults();

    results.show("Lineage");
  }//GEN-LAST:event_jButton2ActionPerformed

  private void jSkeletActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jSkeletActionPerformed
  {//GEN-HEADEREND:event_jSkeletActionPerformed
    // =============== load blobsolver =======================================
    BlobSolver blobsolv = BlobSolver.loadFiles(control.getFluobt().getblobSolvDir());

    // ============= show skelet =============================================
    try
    {
      blobsolv.showVectSkelet(1, 0);
    }
    catch (InterruptedException ex)
    {
      ex.printStackTrace();
    }
  }//GEN-LAST:event_jSkeletActionPerformed

  private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
  {//GEN-HEADEREND:event_formWindowClosing
    control.quit(this);
  }//GEN-LAST:event_formWindowClosing

  
  // ==========================================================================
  //                     PERSONNAL METHODS
  // ==========================================================================  
  /**
   * Updates images previews of lineage : current slice preview, before slice
   * preview and after slice preview.
   */
  public void preview()
  {
    control.preview(nowIm, false, Step.BLOBSOLVER);
    
    // ==================== Variables =========================================
    int width = control.getFluobt().getIWidth();
    int height = control.getFluobt().getIHeight();
    int nbPixels = width * height;

    // ----------- Init a black image processor -------------------------------
    short[] zeros = new short[nbPixels];
    for (int i = 0; i < nbPixels; i++)
    {
      zeros[i] = 0;
    }

    ImageProcessor zeroProcessor = new ShortProcessor(width, height, zeros,
                                                      (ColorModel) null);


    // ================ Duplicate stack for before and after image ============
    ImageStack beforeStack = new ImagePlus("", nowIm.getImage()).duplicate().getImageStack();
    ImageStack afterStack = new ImagePlus("", nowIm.getImage()).duplicate().getImageStack();
    ImageStack beforeCells = new ImagePlus("", nowIm.getBlobsOrSeedsStack()).duplicate().getImageStack();
    ImageStack afterCells = new ImagePlus("", nowIm.getBlobsOrSeedsStack()).duplicate().getImageStack();
    int slice = nowIm.getSlice();

    // ================== Before preview ======================================
    // ---------- add a black slice at the beginning of beforeStack -----------
    //               and remove last slice
    beforeStack.addSlice("", zeroProcessor, 0);
    beforeStack.deleteLastSlice();

    // ------------- Put beforeStack to before preview ------------------------
    beforeCells.addSlice("", zeroProcessor.convertToRGB(), 0);
    beforeCells.deleteLastSlice();
    
    control.preview(beforeStack, beforeCells, beforeIm, false, slice);

    // ====================== After preview ===================================
    // ---------- add a black slice at the end of afterStack ------------------
    //               and remove first slice
    afterStack.addSlice("", zeroProcessor);
    afterStack.deleteSlice(1);

    // ------------- Put afterStack to after preview --------------------------
    afterCells.addSlice("", zeroProcessor.convertToRGB());
    afterCells.deleteSlice(1);
    
    control.preview(afterStack, afterCells, afterIm, false, slice);

    // ====================== Repaint previews and pack =======================
    nowIm.repaint();
    beforeIm.repaint();
    afterIm.repaint();

    pack();
  }

  /**
   * Selects clicked newSelectedBlob and set it as roi in imageBlobs so that its
   * boundary is highlighted.
   *
   * @param clickedPoint Point that was clicked in imageBlobs
   */
  private void selectCellFromClick(Point clickedPoint)
  {
    // ============ Get pixel index from clicked point ========================
    int index;
    try
    {
      index = nowIm.getPixIndexFromClick(clickedPoint);
    }
    catch (ArrayIndexOutOfBoundsException ex)
    {
      return;
    }

    // ====== reinit selectCell ============================================
                                       selectCell = null;

    // ====== Load afterBlobs ShapeSet and convert it in labels array ==========
    String blobspath = control.getFluobt().getblobSolvDir().resolve("Set_" + jScrollBar1.
        getValue()).toString();
    ShapeSet nowBlobs = (ShapeSet) Utils.loadObject(blobspath);
    int[] labels = nowBlobs.toLabels(control.getFluobt().getIWidth(), control.getFluobt().getIHeight());

    // ====== Get label corresponding to mouse position ===================
    int blobLab = labels[index];

    // ============= If no Blob was clicked on, set image roi to null =====
    // and return.
    if (blobLab == -1)
    {
      // ------------------------ set rois to null ----------------------------
      nowIm.setRoi(null);
      afterIm.setRoi(null);
      beforeIm.setRoi(null);

      // ------------------------ repaint frame -------------------------------
      repaint();

      // ------------------------ return --------------------------------------
      return;
    }

    // ========= If a Blob was clicked ================================
    // 1 ) if it is in a certain cell. 
    //     1a ) select the cell it is in
    //     1b ) compute roi representing border of the cell.
    // 2 ) Register roi in nowIm
    // 3 ) Update before and after images
    // ---------------- 1 ) if it is in a certain cell. -----------------------
    //     1a ) select the cell it is in
    //     1b ) compute roi representing border of the cell.
    PointRoi nowRoi = null;
    for (Cell currCell : nowBlobs.getPossibleCells())
    {
      if (currCell.contains(blobLab) && currCell.isCertain())
      {
        // === 1a ) Select cell  ===
        selectCell = currCell;

        // === 1b ) Compute roi representing border of the cell. ===-
        nowRoi = nowBlobs.getRoiFromCell(currCell);

        break;
      }
    }

    // ------------------- 2 ) Register Roi in nowIm -------------------------
    nowIm.setRoi(nowRoi);

    // ----------- 3 ) Update before and after images -------------------------
    // === Reinit their roi to null. ===
    beforeIm.setRoi(null);
    afterIm.setRoi(null);

    // === If nowRoi is null, repaint frame and return ===
    if (nowRoi == null)
    {
      repaint();
      return;
    }

    // === Get blobsolver lineage ===
    String lineagePath = control.getFluobt().getblobSolvDir().resolve("Lineage").toString();
    LinkedHashSet<CellTransition> lineage = (LinkedHashSet<CellTransition>) Utils.
        loadObject(lineagePath);

    // === For each transition of lineage ===
    // a ) get its cells and time
    // b ) if mother in transition is selected cell
    //     compute afterRoi containing border(s) of daughter(s) cell(s) 
    //     And set afterRoi as afterIm roi.
    // c ) if one of the daughter in transition is selected cell
    //     compute beforeRoi containing border of mother cell
    //     And set beforeRoi as beforeIm roi.
    int slice = jScrollBar1.getValue();
    for (CellTransition transition : lineage)
    {
      // --- a ) get its cells and time ---
      int time = transition.getT();
      Cell mother = transition.getMother();
      Cell daughter1 = transition.getDaughter1();
      Cell daughter2 = transition.getDaughter2();

      // --- b ) if mother in transition is selected cell ---
      //     compute afterRoi containing border(s) of daughter(s) cell(s) 
      if (time == slice && mother.equals(selectCell))
      {
        // Get afterBlobs ShapeSet
        String afterBlobspath = control.getFluobt().getblobSolvDir().resolve(
            "Set_" + (time + 1)).toString();
        ShapeSet afterBlobs = (ShapeSet) Utils.loadObject(afterBlobspath);

        // Get roi from daughter1 cell.
        PointRoi afterRoi = afterBlobs.getRoiFromCell(daughter1);

        // If daughter2 cell is not null, add its border point to after roi
        if (daughter2 != null)
        {
          for (int currLabel : daughter2.getLabels())
          {
            ShapeFbt currBlob = afterBlobs.getShape(currLabel);
            currBlob.setCenterAndRadius();
            currBlob.updateBoundary();

            for (Point pix : currBlob.getBoundary())
            {
              if (afterRoi == null)
              {
                afterRoi = new PointRoi(pix.x, pix.y);
              }
              else
              {
                afterRoi = afterRoi.addPoint(pix.x, pix.y);
              }
            }
          }

        }

        //  set afterRoi as afterIm roi.
        afterIm.setRoi(afterRoi);

      }

      // --- c ) if one of the daughter in transition is selected cell ---
      //     compute beforeRoi containing border of mother cell
      //     And set beforeRoi as beforeIm roi.
      if (time == slice - 1
          && (daughter1.equals(selectCell)
              || (daughter2 != null && daughter2.equals(selectCell))))
      {
        // get afterBlobs ShapeSet
        String beforeBlobspath = control.getFluobt().getblobSolvDir().
            resolve("Set_" + time).toString();
        ShapeSet beforeBlobs = (ShapeSet) Utils.loadObject(beforeBlobspath);

        // get roi from mother cell
        PointRoi beforeRoi = beforeBlobs.getRoiFromCell(mother);

        // set before roi as beforeIm roi.
        beforeIm.setRoi(beforeRoi);
      }

    }

    // ============ repaint frame =============================================
    repaint();
  }

  public Fluo_Bac_Tracker getFluobt()
  {
    return control.getFluobt();
  }

  // ==========================================================================
  // ===                      Observer methods
  // ==========================================================================
  @Override
  public void update(Observable o, Object arg)
  {
    Step step = (Step) arg;
    if (step.compareTo(Step.BLOBSOLVER) == 0)
    {
      preview();
    }
  }
  
  // ==========================================================================
  //                       GENERATED MAIN
  // ==========================================================================
  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.
          getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(LinCheckFrame.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(LinCheckFrame.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(LinCheckFrame.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(LinCheckFrame.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        new LinCheckFrame(null).setVisible(true);
      }
    });
  }
  // ==========================================================================
  //                       PERSONNAL ATTRIBUTES
  // ==========================================================================
  /**
   * Interface controler.
   */
  InterfaceControl control;
  /**
   * Selected cell. Null if no cell selected.
   */
  protected Cell selectCell;
  /**
   * Last clicked mouse position.
   */
  protected Point mousePos;
  /**
   * Flag true if user is changing mother cell of a selected cell.
   */
  protected boolean changingMother;
  /**
   * Flag true if user is changing daughter(s) cell of a selected cell.
   */
  protected boolean changingDaughter;
  /**
   * Modified transition when user is editing a transition.
   */
  protected CellTransition editedTrans;
  /**
   * New mother cell when user is editing a transition.
   */
  protected Cell newMother;
  /**
   * New first daughter cell when user is editing a transition.
   */
  protected Cell newDaughter1;
  /**
   * New second daughter cell when user is editing a transition.
   */
  protected Cell newDaughter2;
  /**
   * Flag. True : help messages will continue to appear.
   */
  protected boolean showAgain = true;
  // ==========================================================================
  //                       GENERATED ATTRIBUTES
  // ==========================================================================
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem Load;
  private cellst.Interface.ImagePanel afterIm;
  private cellst.Interface.ImagePanel beforeIm;
  private javax.swing.JMenuItem changeDaughterItem;
  private javax.swing.JMenuItem changeMotherItem;
  private javax.swing.JButton jButton1;
  private javax.swing.JButton jButton2;
  private javax.swing.JMenu jMenu2;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JMenu jMenuFile;
  private javax.swing.JMenuItem jMenuQuit;
  private javax.swing.JMenuItem jMenuSave;
  private javax.swing.JMenuItem jMenuSaveAs;
  private javax.swing.JPopupMenu jPopupMenu1;
  private javax.swing.JScrollBar jScrollBar1;
  private javax.swing.JButton jSkelet;
  private cellst.Interface.ImagePanel nowIm;
  // End of variables declaration//GEN-END:variables
}

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cellst.Interface.Preprocessings;

import ij.*;
import ij.gui.*;
import ij.io.*;

import java.awt.Frame;
import java.nio.file.*;
import java.util.*;

import cellst.Enums.Step;
import cellst.Image.*;
import cellst.Interface.InterfaceControl;
import cellst.Main.*;

/**
 * JDialog detailing workflow from rough background computation to denoising.
 *
 * @author Magali Vangkeosay, David Parsons
 */
public class DenoisDialog extends javax.swing.JDialog
{

  /**
   * Creates new form DenoisDialog.
   */
  public DenoisDialog(MainWorkFlowFrame parent, boolean modal)
  {
    super(parent, modal);
    initComponents();

    control = parent.control;
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jButtonRoughBRun = new javax.swing.JButton();
    imageDenois = new cellst.Interface.ImagePanel();
    jCheckDenois = new javax.swing.JCheckBox();
    jLabel1 = new javax.swing.JLabel();
    jButtonDenoisParam = new javax.swing.JButton();
    imageOrig = new cellst.Interface.ImagePanel();
    imageRoughB = new cellst.Interface.ImagePanel();
    jButtonRoughBParam = new javax.swing.JButton();
    jLabel2 = new javax.swing.JLabel();
    jCheckroughB = new javax.swing.JCheckBox();
    jButtonReturn = new javax.swing.JButton();
    jButtonRunAll = new javax.swing.JButton();
    jButtonStop = new javax.swing.JButton();
    jButtonDenoisRun = new javax.swing.JButton();
    jProgressBar1 = new javax.swing.JProgressBar();
    jScrollBar1 = new javax.swing.JScrollBar();
    jSkipRoughB = new javax.swing.JCheckBox();
    jSkipDenois = new javax.swing.JCheckBox();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    jMenuSave = new javax.swing.JMenuItem();
    jMenuSaveAs = new javax.swing.JMenuItem();
    jSeparator1 = new javax.swing.JPopupMenu.Separator();
    jMenuQuit = new javax.swing.JMenuItem();
    jMenuHel = new javax.swing.JMenu();
    jSeparator3 = new javax.swing.JPopupMenu.Separator();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    addComponentListener(new java.awt.event.ComponentAdapter()
    {
      public void componentHidden(java.awt.event.ComponentEvent evt)
      {
        formComponentHidden(evt);
      }
    });

    jButtonRoughBRun.setText("Run");
    jButtonRoughBRun.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonRoughBRun.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonRoughBRunActionPerformed(evt);
      }
    });

    imageDenois.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    imageDenois.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        imageOrigMouseWheelMoved(evt);
      }
    });
    imageDenois.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        imageDenoisMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout imageDenoisLayout = new javax.swing.GroupLayout(imageDenois);
    imageDenois.setLayout(imageDenoisLayout);
    imageDenoisLayout.setHorizontalGroup(
      imageDenoisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 148, Short.MAX_VALUE)
    );
    imageDenoisLayout.setVerticalGroup(
      imageDenoisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );

    jCheckDenois.setText("whole movie");

    jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
    jLabel1.setForeground(new java.awt.Color(203, 49, 53));
    jLabel1.setText("Rough Background");

    jButtonDenoisParam.setText("Param");
    jButtonDenoisParam.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonDenoisParam.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonDenoisParamActionPerformed(evt);
      }
    });

    imageOrig.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    imageOrig.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        imageOrigMouseWheelMoved(evt);
      }
    });
    imageOrig.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        imageOrigMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout imageOrigLayout = new javax.swing.GroupLayout(imageOrig);
    imageOrig.setLayout(imageOrigLayout);
    imageOrigLayout.setHorizontalGroup(
      imageOrigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );
    imageOrigLayout.setVerticalGroup(
      imageOrigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 180, Short.MAX_VALUE)
    );

    imageRoughB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    imageRoughB.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        imageOrigMouseWheelMoved(evt);
      }
    });
    imageRoughB.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        imageRoughBMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout imageRoughBLayout = new javax.swing.GroupLayout(imageRoughB);
    imageRoughB.setLayout(imageRoughBLayout);
    imageRoughBLayout.setHorizontalGroup(
      imageRoughBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 148, Short.MAX_VALUE)
    );
    imageRoughBLayout.setVerticalGroup(
      imageRoughBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 168, Short.MAX_VALUE)
    );

    jButtonRoughBParam.setText("Param");
    jButtonRoughBParam.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonRoughBParam.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonRoughBParamActionPerformed(evt);
      }
    });

    jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
    jLabel2.setForeground(new java.awt.Color(203, 49, 53));
    jLabel2.setText("Denoising");

    jCheckroughB.setText("whole movie");

    jButtonReturn.setText("Return to Main");
    jButtonReturn.setPreferredSize(new java.awt.Dimension(200, 30));
    jButtonReturn.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonReturnActionPerformed(evt);
      }
    });

    jButtonRunAll.setText("Run All");
    jButtonRunAll.setPreferredSize(new java.awt.Dimension(200, 30));
    jButtonRunAll.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonRunAllActionPerformed(evt);
      }
    });

    jButtonStop.setText("Stop");
    jButtonStop.setPreferredSize(new java.awt.Dimension(200, 30));
    jButtonStop.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonStopActionPerformed(evt);
      }
    });

    jButtonDenoisRun.setText("Run");
    jButtonDenoisRun.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonDenoisRun.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonDenoisRunActionPerformed(evt);
      }
    });

    jScrollBar1.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
    jScrollBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jScrollBar1.setPreferredSize(new java.awt.Dimension(150, 15));
    jScrollBar1.addAdjustmentListener(new java.awt.event.AdjustmentListener()
    {
      public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt)
      {
        jScrollBar1AdjustmentValueChanged(evt);
      }
    });

    jSkipRoughB.setText("skip");
    jSkipRoughB.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jSkipRoughBActionPerformed(evt);
      }
    });

    jSkipDenois.setText("skip");
    jSkipDenois.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jSkipDenoisActionPerformed(evt);
      }
    });

    jMenu1.setText("File");

    jMenuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
    jMenuSave.setText("Save");
    jMenuSave.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuSaveActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuSave);

    jMenuSaveAs.setText("Save As");
    jMenuSaveAs.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuSaveAsActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuSaveAs);

    jSeparator1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jMenu1.add(jSeparator1);

    jMenuQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
    jMenuQuit.setText("Quit");
    jMenuQuit.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuQuitActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuQuit);

    jMenuBar1.add(jMenu1);

    jMenuHel.setText("Help");

    jSeparator3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jMenuHel.add(jSeparator3);

    jMenuBar1.add(jMenuHel);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jButtonRunAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButtonStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jButtonReturn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(107, 107, 107))
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(imageOrig, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jScrollBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
              .addComponent(jLabel1)
              .addComponent(jCheckroughB)
              .addComponent(jButtonRoughBParam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtonRoughBRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jSkipRoughB))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(imageRoughB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
              .addComponent(jLabel2)
              .addComponent(jCheckDenois)
              .addComponent(jButtonDenoisParam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtonDenoisRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jSkipDenois))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(imageDenois, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGap(12, 12, 12))
          .addGroup(layout.createSequentialGroup()
            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(12, 12, 12)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(imageOrig, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(imageRoughB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(imageDenois, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabel1)
              .addComponent(jLabel2))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
              .addComponent(jCheckroughB)
              .addComponent(jCheckDenois))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
              .addComponent(jButtonRoughBParam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtonDenoisParam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jButtonRoughBRun, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtonDenoisRun, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jSkipRoughB))
              .addGroup(layout.createSequentialGroup()
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSkipDenois)))
            .addGap(0, 0, Short.MAX_VALUE)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
          .addComponent(jButtonReturn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jButtonRunAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jButtonStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  /**
   * JButton event to compute rough background.
   *
   * @param evt
   */
  private void jButtonRoughBRunActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRoughBRunActionPerformed
  {//GEN-HEADEREND:event_jButtonRoughBRunActionPerformed
    int slice = -1;
    if (!jCheckroughB.isSelected())
    {
      slice = jScrollBar1.getValue();
    }

    control.run(Step.ORIG, Step.ROUGH_BACKGROUND, slice);
  }//GEN-LAST:event_jButtonRoughBRunActionPerformed

  /**
   * JButton event to change denoising parameters.
   *
   * @param evt
   */
  private void jButtonDenoisParamActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonDenoisParamActionPerformed
  {//GEN-HEADEREND:event_jButtonDenoisParamActionPerformed
    // ============== Create a dialog to change options =======================
    GenericDialog dialog = new GenericDialog("Denoising Options");
    dialog.addComponentListener(null);

    dialog.addNumericField("Denoising level : ", control.getFluobt().
        getDenoiseLevel(), 3);
    dialog.addNumericField("Reduction coefficient : ", control.getFluobt().
        getDenoiseReduc(),
                           3);
    dialog.addNumericField("minimal number of patches : ", control.getFluobt().
        getDenoiseNbPatch(), 0);
    dialog.addNumericField("patch side length in pixels (an odd integer) : ",
                           control.getFluobt().getDenoisePatchSize(), 0);
    dialog.addNumericField(
        "maximum patch distance in pixels (search window is 2d+1 x 2d+1) : ",
        control.getFluobt().getDenoiseMaxDist(), 0);
    dialog.addNumericField("precision for TV denoising (eps) : ", control.
        getFluobt().
        getDenoiseEps(), 3);

    String[] modeList = Fluo_Bac_Tracker.AggMode.getNames();
    dialog.addChoice("aggregation mode : ", modeList, control.getFluobt().
        getDenoiseMode().
        name());

    // ============================ Show the Dialog ===========================
    dialog.showDialog();

    // ======== If dialog canceled return without doing anything ==============
    if (dialog.wasCanceled())
    {
      return;
    }

    // ============== Else get back user new options ==========================
    double newLevel = dialog.getNextNumber();
    double newReduc = dialog.getNextNumber();
    int newNbPatch = (int) dialog.getNextNumber();
    double newPatchSize = dialog.getNextNumber();
    double newMaxDist = dialog.getNextNumber();
    double newEps = dialog.getNextNumber();
    Fluo_Bac_Tracker.AggMode newMode = Fluo_Bac_Tracker.AggMode.valueOf(dialog.
        getNextChoice());

    // ==== If invalid numbers are found,  return without doing anything  =====
    if (dialog.invalidNumber())
    {
      IJ.showMessage("Invalid numbers");
      return;
    }

    // ============== Else update control.getFluobt() attributes with new options  =========
    control.getFluobt().setDenoiseLevel(newLevel);
    control.getFluobt().setDenoiseReduc(newReduc);
    control.getFluobt().setDenoiseNbPatch(newNbPatch);
    control.getFluobt().setDenoisePatchSize((int) newPatchSize);
    control.getFluobt().setDenoiseMaxDist(newMaxDist);
    control.getFluobt().setDenoiseEps(newEps);
    control.getFluobt().setDenoiseMode(newMode);
  }//GEN-LAST:event_jButtonDenoisParamActionPerformed

  /**
   * JButton event to change rough background threshold.
   *
   * @param evt
   */
  private void jButtonRoughBParamActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRoughBParamActionPerformed
  {//GEN-HEADEREND:event_jButtonRoughBParamActionPerformed
    // ============== Create a dialog to change options =======================
    GenericDialog dialog = new GenericDialog("Rough Background Options");
    dialog.addComponentListener(null);

    dialog.addNumericField("roughBackground threshold", control.getFluobt().
        getRoughBThres(),
                           3);
    dialog.
        addNumericField("roughBackground radius", control.getFluobt().
            getRoughBRadius(), 3);

    // ============================ Show the Dialog ===========================
    dialog.showDialog();

    // ======== If dialog canceled return without doing anything ==============
    if (dialog.wasCanceled())
    {
      return;
    }

    // ============== Else get back user new options ==========================
    double newRoughThres = dialog.getNextNumber();
    double newRoughRad = dialog.getNextNumber();

    // ==== If invalid numbers are found,  return without doing anything  =====
    if (dialog.invalidNumber())
    {
      IJ.showMessage("Invalid numbers");
      return;
    }

    // ============== Else update control.getFluobt() attributes with new options  =========
    control.getFluobt().setRoughBThres(newRoughThres);
    control.getFluobt().setRoughBRadius(newRoughRad);
  }//GEN-LAST:event_jButtonRoughBParamActionPerformed

  /**
   * JButton event to denoise images.
   *
   * @param evt
   */
  private void jButtonDenoisRunActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonDenoisRunActionPerformed
  {//GEN-HEADEREND:event_jButtonDenoisRunActionPerformed
    int slice = -1;
    if (!jCheckDenois.isSelected())
    {
      slice = jScrollBar1.getValue();
    }

    control.run(Step.ROUGH_BACKGROUND, Step.DENOIS, slice);

  }//GEN-LAST:event_jButtonDenoisRunActionPerformed

  /**
   * JButton event to compute rough background and denoise images.
   *
   * @param evt
   */
  private void jButtonRunAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRunAllActionPerformed
  {//GEN-HEADEREND:event_jButtonRunAllActionPerformed
    int slice = -1;
    if (!jCheckroughB.isSelected())
    {
      slice = jScrollBar1.getValue();
    }
    
    control.run(Step.ORIG, Step.DENOIS, slice);
  }//GEN-LAST:event_jButtonRunAllActionPerformed

  /**
   * Double-click on imageOrig panel open original ImagePlus.
   *
   * @param evt
   */
  private void imageOrigMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_imageOrigMouseClicked
  {//GEN-HEADEREND:event_imageOrigMouseClicked
    // =================== If event is a Double click. ========================
    if (evt.getClickCount() == 2)
    {
      control.show(Step.ORIG);
    }
  }//GEN-LAST:event_imageOrigMouseClicked

  /**
   * Double click on roughBimage panel open an ImagePlus showing rough
   * background.
   *
   * @param evt
   */
  private void imageRoughBMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_imageRoughBMouseClicked
  {//GEN-HEADEREND:event_imageRoughBMouseClicked
    // =================== If event is a Double click. ========================
    // Load original stack and rough background.
    // Set background on original stack.
    // put in white every ixel in background
    // Show ImagePlus
    if (evt.getClickCount() == 2)
    {
      control.show(Step.ROUGH_BACKGROUND);
    }
  }//GEN-LAST:event_imageRoughBMouseClicked

  /**
   * Double-click on imageDenois panel open an ImagePlus showing denoised
   * images.
   *
   * @param evt
   */
  private void imageDenoisMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_imageDenoisMouseClicked
  {//GEN-HEADEREND:event_imageDenoisMouseClicked
    // =================== If event is a Double click. ========================
    if (evt.getClickCount() == 2)
    {
      control.show(Step.DENOIS);
    }
  }//GEN-LAST:event_imageDenoisMouseClicked

  /**
   * Saves all results in result path.
   *
   * @param evt
   */
  private void jMenuSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuSaveActionPerformed
  {//GEN-HEADEREND:event_jMenuSaveActionPerformed
    control.save((Frame) getParent());
  }//GEN-LAST:event_jMenuSaveActionPerformed

  /**
   * Saves all results in a new results chosen path.
   *
   * @param evt
   */
  private void jMenuSaveAsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuSaveAsActionPerformed
  {//GEN-HEADEREND:event_jMenuSaveAsActionPerformed
    control.saveAs((Frame) getParent());
  }//GEN-LAST:event_jMenuSaveAsActionPerformed

  /**
   * Closes window. Doesn't close the application.
   *
   * @param evt
   */
  private void jMenuQuitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuQuitActionPerformed
  {//GEN-HEADEREND:event_jMenuQuitActionPerformed
    control.quit((Frame) getParent());
  }//GEN-LAST:event_jMenuQuitActionPerformed

  /**
   * Interrupts run thread.
   *
   * @param evt
   */
  private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonStopActionPerformed
  {//GEN-HEADEREND:event_jButtonStopActionPerformed
    control.stopRun();
  }//GEN-LAST:event_jButtonStopActionPerformed

  /**
   * Close window to return to main window.s
   *
   * @param evt
   */
  private void jButtonReturnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonReturnActionPerformed
  {//GEN-HEADEREND:event_jButtonReturnActionPerformed
    dispose();
  }//GEN-LAST:event_jButtonReturnActionPerformed

  private void jScrollBar1AdjustmentValueChanged(java.awt.event.AdjustmentEvent evt)//GEN-FIRST:event_jScrollBar1AdjustmentValueChanged
  {//GEN-HEADEREND:event_jScrollBar1AdjustmentValueChanged
    int val = jScrollBar1.getValue();

    imageDenois.setSlice(val);
    imageOrig.setSlice(val);
    imageRoughB.setSlice(val);
  }//GEN-LAST:event_jScrollBar1AdjustmentValueChanged

  private void imageOrigMouseWheelMoved(java.awt.event.MouseWheelEvent evt)//GEN-FIRST:event_imageOrigMouseWheelMoved
  {//GEN-HEADEREND:event_imageOrigMouseWheelMoved
    int val = evt.getWheelRotation() + jScrollBar1.getValue();
    val = Math.max(val, 1);
    val = Math.min(val, control.getFluobt().getISize());

    setSlice(val);
  }//GEN-LAST:event_imageOrigMouseWheelMoved

  private void formComponentHidden(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentHidden
  {//GEN-HEADEREND:event_formComponentHidden
    MainWorkFlowFrame mainFrame = ((MainWorkFlowFrame) getParent());
    mainFrame.setEnabled(true);
    mainFrame.updatePreviews();
  }//GEN-LAST:event_formComponentHidden

  private void jSkipRoughBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jSkipRoughBActionPerformed
  {//GEN-HEADEREND:event_jSkipRoughBActionPerformed
    control.getFluobt().setDoRoughB(!jSkipRoughB.isSelected());
  }//GEN-LAST:event_jSkipRoughBActionPerformed

  private void jSkipDenoisActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jSkipDenoisActionPerformed
  {//GEN-HEADEREND:event_jSkipDenoisActionPerformed
    control.getFluobt().setDoDenois(!jSkipDenois.isSelected());
  }//GEN-LAST:event_jSkipDenoisActionPerformed

  // ==========================================================================
  //                    MAIN
  // ==========================================================================
  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.
          getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(DenoisDialog.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(DenoisDialog.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(DenoisDialog.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(DenoisDialog.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        DenoisDialog dialog = new DenoisDialog(null, true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter()
        {
          @Override
          public void windowClosing(java.awt.event.WindowEvent e)
          {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }

  // ==========================================================================
  //                     PERSONAL METHODS
  // ==========================================================================
  // --------------------------------------------------------------------------
  //                  PREVIEWS
  // --------------------------------------------------------------------------
  /**
   * Updates all imagePanels in this JDialog.
   *
   */
  public void updatePreviews()
  {
    origPreview();
    roughBPreview();
    denoisPreview();
  }

  /**
   * Updates origImage panel.
   *
   */
  public void origPreview()
  {
    control.preview(imageOrig, true, Step.ORIG);

    // ------ Get current slice number --------------------------------------
    jScrollBar1.setValues(jScrollBar1.getValue(), 1, 1, control.getFluobt().
        getISize() + 1);

  }

  /**
   * Updates rough background ImagePanel.
   *
   */
  public void roughBPreview()
  {
    control.preview(imageRoughB, true, Step.ROUGH_BACKGROUND);
//    ImageStack stack = getRoughBPreview();
//
//    // --------------- 4) Update imageRoughB with this stack ----------------
//    imageRoughB.setImageWithResize(stack, imageOrig.getSlice());
  }

  /**
   * Updates desnoised ImagePanel.
   */
  public void denoisPreview()
  {
    control.preview(imageDenois, true, Step.DENOIS);
  }

  /**
   * Clears images previews.
   */
  public void clearPreviews()
  {
    imageOrig.setImageWithResize(null, 0);
    imageRoughB.setImageWithResize(null, 0);
    imageDenois.setImageWithResize(null, 0);
  }

  // --------------------------------------------------------------------------
  //                GET ImageStack  PREVIEWS
  // --------------------------------------------------------------------------
  /**
   * returns preview ImageStack for rough background. It is original stack with
   * background in white.
   *
   * @return
   */
  public ImageStack getRoughBPreview()
  {
    // 1) Load rough background and load original stack
    // 2) Set rough background to original stack
    // 3) Set to black every pixels in background

    // -------- 1) Load rough background and load original stack ----------
    ArrayList<int[]> back = new ArrayList<int[]>(control.getFluobt().getISize());

    for (int i = 1; i <= control.getFluobt().getISize(); i++)
    {
      Path backPath = control.getFluobt().getRoughBDir().resolve(control.
          getFluobt().ROUGHB_NAMEFILE + "_"
                                                                 + i);

      if (Files.exists(backPath))
      {
        int[] currBack = (int[]) Utils.loadObject(backPath.toString());
        back.add(i - 1, currBack);
      }
      else
      {
        back.add(i - 1, null);
      }
    }

    StackFbt stack = StackFbt.loadImages(control.getFluobt().getOrigDir(),
                                         control.getFluobt().getISize());

    // ------- 2) Set rough background to original stack --------------------
    stack.setBackground(back);

    // ------- 3) Set to white every pixels in background -------------------
    int size = control.getFluobt().getISize();
    int pixNb = control.getFluobt().getIWidth() * control.getFluobt().
        getIHeight();
    for (int slice = 1; slice <= size; slice++)
    {
      int[] currBack = back.get(slice - 1);

      if (currBack != null)
      {
        for (int index = 0; index < pixNb; index++)
        {
          if (currBack[ index] == 1)
          {
            stack.getProcessor(slice).set(index, 65535);
          }
        }
      }
    }

    return stack;

  }

  // ==========================================================================
  //                    GETTERS
  // ==========================================================================
  /**
   * Returns scrollbar value, which defines which slice of the stack is shown in
   * previews.
   *
   * @return
   */
  public int getSlice()
  {
    return jScrollBar1.getValue();
  }

  // ==========================================================================
  //                    SETTERS
  // ==========================================================================
  /**
   * Set scrollbar value, which defines which slice of the stack is shown in
   * previews.
   *
   * Update previews accordingly.
   *
   * @param _slice
   */
  public void setSlice(int _slice)
  {
    // =========== Set scrollbar value =======================================
    jScrollBar1.setValue(_slice);

    // ========== Update previews ============================================
    imageDenois.setSlice(_slice);
    imageOrig.setSlice(_slice);
    imageRoughB.setSlice(_slice);
  }

  /**
   * Set scrollbar values and update slice shown in previews.
   *
   * @param newValue new slice number to be shown in previews.
   * @param newExtends new extends value
   * @param newMin new minimum value
   * @param newMax new maximum value
   */
  public void setScrollValues(int newValue, int newExtends, int newMin,
                              int newMax)
  {
    // =========== Update scrollbar values  ===================================
    jScrollBar1.setValues(newValue, newExtends, newMin, newMax);

    // ========== Update previews ============================================
    imageDenois.setSlice(newValue);
    imageOrig.setSlice(newValue);
    imageRoughB.setSlice(newValue);
  }

  /**
   * Set Progressbar value.
   *
   * @param _prog
   */
  public void setProgress(double _prog)
  {
    jProgressBar1.setValue((int) _prog);
  }
  
   /**
   * @param skipDenois must denois be skipped or not
   */
  public void setSkipDenois(boolean skipDenois)
  {
    jSkipDenois.setSelected( skipDenois );
  }

  /**
   * @param skipRoughB must rough background be skipped or not
   */
  public void setSkipRoughB(boolean skipRoughB)
  {
    jSkipRoughB.setSelected(skipRoughB); 
  }
  
  
  // ==========================================================================
  //                    PERSONAL ATTRIBUTES
  // ==========================================================================
  /**
   * Interface controler.
   */
  InterfaceControl control;

  // ==========================================================================
  //                     ATTRIBUTES
  // ==========================================================================
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private cellst.Interface.ImagePanel imageDenois;
  private cellst.Interface.ImagePanel imageOrig;
  private cellst.Interface.ImagePanel imageRoughB;
  private javax.swing.JButton jButtonDenoisParam;
  private javax.swing.JButton jButtonDenoisRun;
  private javax.swing.JButton jButtonReturn;
  private javax.swing.JButton jButtonRoughBParam;
  private javax.swing.JButton jButtonRoughBRun;
  private javax.swing.JButton jButtonRunAll;
  private javax.swing.JButton jButtonStop;
  private javax.swing.JCheckBox jCheckDenois;
  private javax.swing.JCheckBox jCheckroughB;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JMenu jMenuHel;
  private javax.swing.JMenuItem jMenuQuit;
  private javax.swing.JMenuItem jMenuSave;
  private javax.swing.JMenuItem jMenuSaveAs;
  private javax.swing.JProgressBar jProgressBar1;
  private javax.swing.JScrollBar jScrollBar1;
  private javax.swing.JPopupMenu.Separator jSeparator1;
  private javax.swing.JPopupMenu.Separator jSeparator3;
  private javax.swing.JCheckBox jSkipDenois;
  private javax.swing.JCheckBox jSkipRoughB;
  // End of variables declaration//GEN-END:variables
}

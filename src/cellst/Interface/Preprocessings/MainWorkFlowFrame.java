/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cellst.Interface.Preprocessings;

import ij.*;
import ij.gui.*;
import ij.io.*;

import java.io.IOException;
import java.nio.file.*;
import java.util.*;
import java.util.concurrent.*;

import cellst.Enums.BlobsDrawOpt;
import cellst.Enums.Step;
import cellst.Image.*;
import cellst.Interface.ImagePanel;
import cellst.Interface.InterfaceControl;
import cellst.Interface.BlobSolving.BlobsCheckFrame;
import cellst.Main.*;

/**
 *
 * @author dparsons
 */
public class MainWorkFlowFrame extends javax.swing.JFrame implements Observer
{
  // ==========================================================================
  //                  CONSTRUCTOR
  // ==========================================================================

  /**
   * Private constructor creating new form MainWorkFlowFrame.
   *
   * This doesn't initialize and start loopingRunnable executor. Use create
   * static method to create a MainWorkFlowFrame.
   */
  private MainWorkFlowFrame(InterfaceControl _control)
  {
    initComponents();

    setTitle("FLUO_BAC_TRACKER - Preprocessings");

    control = _control;

    denoisDialog = new DenoisDialog(this, false);
    renormDialog = new RenormDialog(this, false);
    segmentDialog = new SegmentDialog(this, false);

    jScrollBar1.setValues(1, 1, 1, 1);

    setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
  }

  /**
   * Creates a new MainWorkFlowFrame and start loopingExec to update progress
   * and previews regularly.
   *
   * @param _control
   * @return
   */
  public static MainWorkFlowFrame create(InterfaceControl _control)
  {
    // ============ Create new MainWorkFlowFrame ==============================
    MainWorkFlowFrame newFrame = new MainWorkFlowFrame(_control);

    // ============ Return frame ==============================================
    return newFrame;
  }
// ==========================================================================
//                  GENERATED CODE
// ==========================================================================

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jButtonDenoisParam = new javax.swing.JButton();
    jCheckBoxRenorm = new javax.swing.JCheckBox();
    jButtonRenormDetails = new javax.swing.JButton();
    jButtonDenoisRun = new javax.swing.JButton();
    jProgressBar = new javax.swing.JProgressBar();
    jButtonRunAll = new javax.swing.JButton();
    jButtonStop = new javax.swing.JButton();
    jButtonNext = new javax.swing.JButton();
    jCheckBoxDenois = new javax.swing.JCheckBox();
    jButtonRenormParam = new javax.swing.JButton();
    jButtonRenormRun = new javax.swing.JButton();
    jButtonDenoisDetails = new javax.swing.JButton();
    jButtonSegmentParam = new javax.swing.JButton();
    jButtonSegmentRun = new javax.swing.JButton();
    jCheckBoxSegment = new javax.swing.JCheckBox();
    jButtonSegmentDetails = new javax.swing.JButton();
    imageDenois = new cellst.Interface.ImagePanel();
    imageRenorm = new cellst.Interface.ImagePanel();
    imageSegment = new cellst.Interface.ImagePanel();
    jScrollBar1 = new javax.swing.JScrollBar();
    imageOrig = new cellst.Interface.ImagePanel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    jLabel4 = new javax.swing.JLabel();
    jSkipDenois = new javax.swing.JCheckBox();
    jSkipRenorm = new javax.swing.JCheckBox();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    jMenuSave = new javax.swing.JMenuItem();
    jMenuSaveAs = new javax.swing.JMenuItem();
    jMenuLoad = new javax.swing.JMenuItem();
    jSeparator1 = new javax.swing.JPopupMenu.Separator();
    jMenuImportImgs = new javax.swing.JMenuItem();
    jSeparator2 = new javax.swing.JPopupMenu.Separator();
    jMenuChangeWorkingDir = new javax.swing.JMenuItem();
    jMenuQuit = new javax.swing.JMenuItem();
    jMenu2 = new javax.swing.JMenu();
    jMenuParam = new javax.swing.JMenuItem();
    jSeparator3 = new javax.swing.JPopupMenu.Separator();
    jMenuZoom = new javax.swing.JMenuItem();
    jMenuCells = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    addWindowListener(new java.awt.event.WindowAdapter()
    {
      public void windowClosed(java.awt.event.WindowEvent evt)
      {
        formWindowClosed(evt);
      }
      public void windowClosing(java.awt.event.WindowEvent evt)
      {
        formWindowClosing(evt);
      }
    });

    jButtonDenoisParam.setText("Param");
    jButtonDenoisParam.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonDenoisParam.setRequestFocusEnabled(false);
    jButtonDenoisParam.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonDenoisParamActionPerformed(evt);
      }
    });

    jCheckBoxRenorm.setText("Whole Movie");

    jButtonRenormDetails.setText("Details");
    jButtonRenormDetails.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonRenormDetails.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonRenormDetailsActionPerformed(evt);
      }
    });

    jButtonDenoisRun.setText("Run");
    jButtonDenoisRun.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonDenoisRun.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonDenoisRunActionPerformed(evt);
      }
    });

    jButtonRunAll.setText("Run All");
    jButtonRunAll.setPreferredSize(new java.awt.Dimension(200, 30));
    jButtonRunAll.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonRunAllActionPerformed(evt);
      }
    });

    jButtonStop.setText("Stop");
    jButtonStop.setPreferredSize(new java.awt.Dimension(200, 30));
    jButtonStop.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonStopActionPerformed(evt);
      }
    });

    jButtonNext.setText("Next >>");
    jButtonNext.setPreferredSize(new java.awt.Dimension(200, 30));
    jButtonNext.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonNextActionPerformed(evt);
      }
    });

    jCheckBoxDenois.setText("Whole Movie");

    jButtonRenormParam.setText("Param");
    jButtonRenormParam.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonRenormParam.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonRenormParamActionPerformed(evt);
      }
    });

    jButtonRenormRun.setText("Run");
    jButtonRenormRun.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonRenormRun.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonRenormRunActionPerformed(evt);
      }
    });

    jButtonDenoisDetails.setText("Details");
    jButtonDenoisDetails.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonDenoisDetails.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonDenoisDetailsActionPerformed(evt);
      }
    });

    jButtonSegmentParam.setText("Param");
    jButtonSegmentParam.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonSegmentParam.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonSegmentParamActionPerformed(evt);
      }
    });

    jButtonSegmentRun.setText("Run");
    jButtonSegmentRun.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonSegmentRun.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonSegmentRunActionPerformed(evt);
      }
    });

    jCheckBoxSegment.setText("Whole Movie");

    jButtonSegmentDetails.setText("Details");
    jButtonSegmentDetails.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonSegmentDetails.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonSegmentDetailsActionPerformed(evt);
      }
    });

    imageDenois.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    imageDenois.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        imageOrigMouseWheelMoved(evt);
      }
    });
    imageDenois.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        imageDenoisMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout imageDenoisLayout = new javax.swing.GroupLayout(imageDenois);
    imageDenois.setLayout(imageDenoisLayout);
    imageDenoisLayout.setHorizontalGroup(
      imageDenoisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 120, Short.MAX_VALUE)
    );
    imageDenoisLayout.setVerticalGroup(
      imageDenoisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );

    imageRenorm.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    imageRenorm.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        imageOrigMouseWheelMoved(evt);
      }
    });
    imageRenorm.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        imageRenormMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout imageRenormLayout = new javax.swing.GroupLayout(imageRenorm);
    imageRenorm.setLayout(imageRenormLayout);
    imageRenormLayout.setHorizontalGroup(
      imageRenormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 122, Short.MAX_VALUE)
    );
    imageRenormLayout.setVerticalGroup(
      imageRenormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );

    imageSegment.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    imageSegment.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        imageOrigMouseWheelMoved(evt);
      }
    });
    imageSegment.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        imageSegmentMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout imageSegmentLayout = new javax.swing.GroupLayout(imageSegment);
    imageSegment.setLayout(imageSegmentLayout);
    imageSegmentLayout.setHorizontalGroup(
      imageSegmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 121, Short.MAX_VALUE)
    );
    imageSegmentLayout.setVerticalGroup(
      imageSegmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );

    jScrollBar1.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
    jScrollBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jScrollBar1.addAdjustmentListener(new java.awt.event.AdjustmentListener()
    {
      public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt)
      {
        jScrollBar1AdjustmentValueChanged(evt);
      }
    });

    imageOrig.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    imageOrig.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        imageOrigMouseWheelMoved(evt);
      }
    });
    imageOrig.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        imageOrigMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout imageOrigLayout = new javax.swing.GroupLayout(imageOrig);
    imageOrig.setLayout(imageOrigLayout);
    imageOrigLayout.setHorizontalGroup(
      imageOrigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 124, Short.MAX_VALUE)
    );
    imageOrigLayout.setVerticalGroup(
      imageOrigLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );

    jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
    jLabel2.setForeground(new java.awt.Color(203, 49, 53));
    jLabel2.setText("Renormalization");

    jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
    jLabel3.setForeground(new java.awt.Color(203, 49, 53));
    jLabel3.setText("Over-segmentation");

    jLabel4.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
    jLabel4.setForeground(new java.awt.Color(203, 49, 53));
    jLabel4.setText("Denoising");

    jSkipDenois.setText("skip");
    jSkipDenois.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jSkipDenoisActionPerformed(evt);
      }
    });

    jSkipRenorm.setText("skip");
    jSkipRenorm.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jSkipRenormActionPerformed(evt);
      }
    });

    jMenu1.setText("File");

    jMenuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
    jMenuSave.setText("Save");
    jMenuSave.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuSaveActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuSave);

    jMenuSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
    jMenuSaveAs.setText("Save As");
    jMenuSaveAs.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuSaveAsActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuSaveAs);

    jMenuLoad.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
    jMenuLoad.setText("Load");
    jMenuLoad.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuLoadActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuLoad);

    jSeparator1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jMenu1.add(jSeparator1);

    jMenuImportImgs.setText("Import");
    jMenuImportImgs.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuImportImgsActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuImportImgs);

    jSeparator2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jMenu1.add(jSeparator2);

    jMenuChangeWorkingDir.setText("Change working directory");
    jMenuChangeWorkingDir.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuChangeWorkingDirActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuChangeWorkingDir);

    jMenuQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
    jMenuQuit.setText("Quit");
    jMenuQuit.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuQuitActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuQuit);

    jMenuBar1.add(jMenu1);

    jMenu2.setText("Parameters");

    jMenuParam.setText("Load From");
    jMenuParam.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuParamActionPerformed(evt);
      }
    });
    jMenu2.add(jMenuParam);

    jSeparator3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jMenu2.add(jSeparator3);

    jMenuZoom.setText("Images Zoom");
    jMenuZoom.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuZoomActionPerformed(evt);
      }
    });
    jMenu2.add(jMenuZoom);

    jMenuCells.setText("Cells Parameters");
    jMenuCells.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuCellsActionPerformed(evt);
      }
    });
    jMenu2.add(jMenuCells);

    jMenuBar1.add(jMenu2);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGap(0, 160, Short.MAX_VALUE)
            .addComponent(jButtonRunAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButtonStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButtonNext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 160, Short.MAX_VALUE))
          .addComponent(jProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(imageOrig, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jScrollBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(jLabel4)
                .addComponent(jButtonDenoisParam, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButtonDenoisRun, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addComponent(jCheckBoxDenois)
              .addComponent(jButtonDenoisDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jSkipDenois))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(imageDenois, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(jButtonRenormParam, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButtonRenormDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButtonRenormRun, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel2))
              .addComponent(jCheckBoxRenorm)
              .addComponent(jSkipRenorm))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(imageRenorm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
              .addComponent(jLabel3)
              .addComponent(jCheckBoxSegment)
              .addComponent(jButtonSegmentParam, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtonSegmentDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtonSegmentRun, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(imageSegment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(12, 12, 12)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addComponent(jLabel4))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(jCheckBoxSegment)
                  .addComponent(jCheckBoxRenorm, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE))
              .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(jCheckBoxDenois)
                .addGap(6, 6, 6)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jButtonDenoisParam, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtonRenormParam, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtonSegmentParam, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jButtonRenormDetails, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jButtonSegmentDetails, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addComponent(jButtonDenoisDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jButtonDenoisRun, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtonRenormRun, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtonSegmentRun, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jSkipDenois, javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jSkipRenorm, javax.swing.GroupLayout.Alignment.TRAILING)))
          .addComponent(imageOrig, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(imageRenorm, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(imageSegment, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(imageDenois, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
          .addComponent(jButtonRunAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jButtonNext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jButtonStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  // ==========================================================================
  //                  ACTION METHODS
  // ==========================================================================
  /**
   * Saves results in results path.
   *
   * @param evt
   */
  private void jMenuSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuSaveActionPerformed
  {//GEN-HEADEREND:event_jMenuSaveActionPerformed
    control.save(this);
  }//GEN-LAST:event_jMenuSaveActionPerformed

  /**
   * JButton event to change denoising parameters.
   *
   * @param evt
   */
  private void jButtonDenoisParamActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonDenoisParamActionPerformed
  {//GEN-HEADEREND:event_jButtonDenoisParamActionPerformed
    // ============== Create a dialog to change options =======================
    GenericDialog dialog = new GenericDialog("Denoising Options");
    dialog.addComponentListener(null);

    dialog.addNumericField("Denoising level : ", control.getFluobt().
        getDenoiseLevel(), 3);
    dialog.addNumericField("Patch side length in pixels \n (an odd integer) : ",
                           control.getFluobt().getDenoisePatchSize(), 0);

    // ============================ Show the Dialog ===========================
    dialog.showDialog();

    // ======== If dialog canceled return without doing anything ==============
    if (dialog.wasCanceled())
    {
      return;
    }

    // ============== Else get back user new options ==========================
    double newLevel = dialog.getNextNumber();
    double newPatchSize = dialog.getNextNumber();

    // ==== If invalid numbers are found,  return without doing anything  =====
    if (dialog.invalidNumber())
    {
      IJ.showMessage("Invalid numbers");
      return;
    }

    // ============== Else update getFluobt() attributes with new options  =========
    control.getFluobt().setDenoiseLevel(newLevel);
    control.getFluobt().setDenoisePatchSize((int) newPatchSize);


  }//GEN-LAST:event_jButtonDenoisParamActionPerformed

  /**
   * Opens RenormDialog and manage renormalization details.
   *
   * @param evt
   */
  private void jButtonRenormDetailsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRenormDetailsActionPerformed
  {//GEN-HEADEREND:event_jButtonRenormDetailsActionPerformed
    renormDialog.setVisible(true);
    renormDialog.updatePreviews();
  }//GEN-LAST:event_jButtonRenormDetailsActionPerformed

  /**
   * Running roughBackground and denoising.
   */
  private void jButtonDenoisRunActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonDenoisRunActionPerformed
  {//GEN-HEADEREND:event_jButtonDenoisRunActionPerformed
    int slice = -1;
    if (!jCheckBoxDenois.isSelected())
    {
      slice = jScrollBar1.getValue();
    }

    control.run(Step.ORIG, Step.DENOIS, slice);
  }//GEN-LAST:event_jButtonDenoisRunActionPerformed

  /**
   * On Quit menu item clicked : closes window.
   *
   * @param evt
   */
  private void jMenuQuitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuQuitActionPerformed
  {//GEN-HEADEREND:event_jMenuQuitActionPerformed
    control.quit(this);
  }//GEN-LAST:event_jMenuQuitActionPerformed

  /**
   * Changes renormalization parameters.
   *
   * @param evt
   */
  private void jButtonRenormParamActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRenormParamActionPerformed
  {//GEN-HEADEREND:event_jButtonRenormParamActionPerformed
    // ============== Create a dialog to change options =======================
    GenericDialog dialog = new GenericDialog("Renormalization Options");
    dialog.addNumericField("Renormalization pseudo seeds threshold",
                           control.getFluobt().
        getRenormThres(), 3);
    dialog.addNumericField("Convolution square size (µm) : ", control.
        getFluobt().
        getRenormSqSize(), 3);
    dialog.addNumericField("Convolution iterations number : ", control.
        getFluobt().
        getRenormIter(), 0);

    // ============================ Show the Dialog ===========================
    dialog.showDialog();

    // ======== If dialog canceled return without doing anything ==============
    if (dialog.wasCanceled())
    {
      return;
    }

    // ============== Else get back user new options ==========================
    double newRenormThres = dialog.getNextNumber();
    double newSqSize = dialog.getNextNumber();
    int newIter = (int) dialog.getNextNumber();

    // ==== If invalid numbers are found,  return without doing anything  =====
    if (dialog.invalidNumber())
    {
      IJ.showMessage("Invalid numbers");
      return;
    }

    // ============== Else update getFluobt() attributes with new options  =========
    control.getFluobt().setRenormThres(newRenormThres);
    control.getFluobt().setRenormSqSize(newSqSize);
    control.getFluobt().setRenormIter(newIter);
  }//GEN-LAST:event_jButtonRenormParamActionPerformed

  /**
   * Runs final background computing, recentering and renormalization.
   *
   * @param evt
   */
  private void jButtonRenormRunActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRenormRunActionPerformed
  {//GEN-HEADEREND:event_jButtonRenormRunActionPerformed
    int slice = -1;
    if (!jCheckBoxRenorm.isSelected())
    {
      slice = jScrollBar1.getValue();
    }

    control.run(Step.DENOIS, Step.RENORM, slice);
  }//GEN-LAST:event_jButtonRenormRunActionPerformed

  /**
   * Opens DenoisDialog and manage denoising details.
   *
   * @param evt
   */
  private void jButtonDenoisDetailsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonDenoisDetailsActionPerformed
  {//GEN-HEADEREND:event_jButtonDenoisDetailsActionPerformed
    denoisDialog.setVisible(true);
    denoisDialog.updatePreviews();
  }//GEN-LAST:event_jButtonDenoisDetailsActionPerformed

  /**
   * Changes over-segmentation parameters.
   *
   * @param evt
   */
  private void jButtonSegmentParamActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSegmentParamActionPerformed
  {//GEN-HEADEREND:event_jButtonSegmentParamActionPerformed
    // ============== Create a dialog to change options =======================
    GenericDialog dialog = new GenericDialog("Renormalization Options");
    dialog.addNumericField("Seeds threshold", control.getFluobt().
        getSeedsThres(), 3);
    dialog.addNumericField("Blob min area (µm²) : ", control.getFluobt().
        getMinBlobArea(), 3);

    // ============================ Show the Dialog ===========================
    dialog.showDialog();

    // ======== If dialog canceled return without doing anything ==============
    if (dialog.wasCanceled())
    {
      return;
    }

    // ============== Else get back user new options ==========================
    double newSeedsThres = dialog.getNextNumber();
    double newBlobMinArea = dialog.getNextNumber();

    // ==== If invalid numbers are found,  return without doing anything  =====
    if (dialog.invalidNumber())
    {
      IJ.showMessage("Invalid numbers");
      return;
    }

    // ============== Else update getFluobt() attributes with new options  =========
    control.getFluobt().setSeedsThres(newSeedsThres);
    control.getFluobt().setMinBlobArea(newBlobMinArea);
  }//GEN-LAST:event_jButtonSegmentParamActionPerformed

  /**
   * Computes seeds, dilate them in blobs and clean them.
   *
   * @param evt
   */
  private void jButtonSegmentRunActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSegmentRunActionPerformed
  {//GEN-HEADEREND:event_jButtonSegmentRunActionPerformed
    int slice = -1;
    if (!jCheckBoxSegment.isSelected())
    {
      slice = jScrollBar1.getValue();
    }

    control.run(Step.RENORM, Step.FINAL_BLOBS, slice);
  }//GEN-LAST:event_jButtonSegmentRunActionPerformed

  /**
   * Opens SegmentDialog to manage over segmentation details.
   *
   * @param evt
   */
  private void jButtonSegmentDetailsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSegmentDetailsActionPerformed
  {//GEN-HEADEREND:event_jButtonSegmentDetailsActionPerformed
    segmentDialog.setVisible(true);
    segmentDialog.updatePreviews();
  }//GEN-LAST:event_jButtonSegmentDetailsActionPerformed

  /**
   * Update previews when scrollBar is changed.
   *
   * @param evt
   */
  private void jScrollBar1AdjustmentValueChanged(java.awt.event.AdjustmentEvent evt)//GEN-FIRST:event_jScrollBar1AdjustmentValueChanged
  {//GEN-HEADEREND:event_jScrollBar1AdjustmentValueChanged
    // ======== Get new scrollbar value =====================================
    int val = this.jScrollBar1.getValue();

    // ========  Update previews slice ========================
    setSlice(val);

  }//GEN-LAST:event_jScrollBar1AdjustmentValueChanged

  /**
   * Loads Results from a former results path.
   *
   * @param evt
   */
  private void jMenuLoadActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuLoadActionPerformed
  {//GEN-HEADEREND:event_jMenuLoadActionPerformed
    control.load(this);
    jScrollBar1.setValues(1, 1, 1, control.getFluobt().getISize());
    jSkipDenois.setSelected(!(control.getFluobt().isDoRoughB()
                              || control.getFluobt().isDoDenois()));
    jSkipRenorm.setSelected(!(control.getFluobt().isDoFinalB()
                              || control.getFluobt().isDoRecenter()
                              || control.getFluobt().isDoRenorm()));
    denoisDialog.setSkipRoughB(!control.getFluobt().isDoRoughB());
    denoisDialog.setSkipDenois(!control.getFluobt().isDoDenois());
    renormDialog.setSkipFinalB(!control.getFluobt().isDoFinalB());
    renormDialog.setSkipRecenter(!control.getFluobt().isDoRecenter());
    renormDialog.setSkipRenorm(!control.getFluobt().isDoRenorm());
  }//GEN-LAST:event_jMenuLoadActionPerformed

  /**
   * Import Original sstack from images sequence.
   *
   * @param evt
   */
  private void jMenuImportImgsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuImportImgsActionPerformed
  {//GEN-HEADEREND:event_jMenuImportImgsActionPerformed
    // =========== Delete previews ============================================
    clearPreviews();

    // =========== Import Images ==============================================
    control.importImgs(this);
  }//GEN-LAST:event_jMenuImportImgsActionPerformed

  /**
   * Save results in a new results path.
   *
   * @param evt
   */
  private void jMenuSaveAsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuSaveAsActionPerformed
  {//GEN-HEADEREND:event_jMenuSaveAsActionPerformed
    control.saveAs(this);
  }//GEN-LAST:event_jMenuSaveAsActionPerformed

  /**
   * Interrupts computing thread at any time.
   *
   * @param evt
   */
  private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonStopActionPerformed
  {//GEN-HEADEREND:event_jButtonStopActionPerformed
    control.stopRun();
  }//GEN-LAST:event_jButtonStopActionPerformed

  /**
   * Runs all steps of images pre-processings from rough background computation
   * to blobs cleaning.
   *
   * @param evt
   */
  private void jButtonRunAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRunAllActionPerformed
  {//GEN-HEADEREND:event_jButtonRunAllActionPerformed
    int slice = -1;
    if (!jCheckBoxDenois.isSelected())
    {
      slice = jScrollBar1.getValue();
    }

    control.run(Step.ORIG, Step.FINAL_BLOBS, slice);
  }//GEN-LAST:event_jButtonRunAllActionPerformed

  /**
   * Double-click on imageOrig panel open original ImagePlus.
   *
   * @param evt
   */
  private void imageOrigMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_imageOrigMouseClicked
  {//GEN-HEADEREND:event_imageOrigMouseClicked
    // =================== If event is a Double click. ========================
    // Load original images and show them.
    if (evt.getClickCount() == 2)
    {
      ImagePlus IP = Utils.openImages(control.getFluobt().getOrigDir(),
                                      "Original",
                                      control.getFluobt().
          getISize());
      IP.show();
    }
  }//GEN-LAST:event_imageOrigMouseClicked

  /**
   * Double-click on imageDenois panel open denoised ImagePlus.
   *
   * @param evt
   */
  private void imageDenoisMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_imageDenoisMouseClicked
  {//GEN-HEADEREND:event_imageDenoisMouseClicked
    // =================== If event is a Double click. ========================
    if (evt.getClickCount() == 2)
    {
      control.show(Step.DENOIS);
    }
  }//GEN-LAST:event_imageDenoisMouseClicked

  /**
   * Double-click on imageRenorm panel open renormed ImagePlus.
   *
   * @param evt
   */
  private void imageRenormMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_imageRenormMouseClicked
  {//GEN-HEADEREND:event_imageRenormMouseClicked
    // =================== If event is a Double click. ========================
    if (evt.getClickCount() == 2)
    {
      control.show(Step.RENORM);
    }
  }//GEN-LAST:event_imageRenormMouseClicked

  /**
   * Double-click on imageSegment panel open final blobs ImagePlus.
   *
   * @param evt
   */
  private void imageSegmentMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_imageSegmentMouseClicked
  {//GEN-HEADEREND:event_imageSegmentMouseClicked
    // =================== If event is a Double click. ========================
    if (evt.getClickCount() == 2)
    {
      control.show(Step.FINAL_BLOBS, BlobsDrawOpt.GRAPH);
    }

  }//GEN-LAST:event_imageSegmentMouseClicked

  /**
   * Loads new parameters from a precedent results path.
   *
   * @param evt
   */
  private void jMenuParamActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuParamActionPerformed
  {//GEN-HEADEREND:event_jMenuParamActionPerformed
    // ======================= Get parameters file ============================
    DirectoryChooser opDiag = new DirectoryChooser(
        "Choose file to load parameters");

    String fileDir = opDiag.getDirectory();

    // ======= If it is not null save parameters ==============================
    if (fileDir != null)
    {
      control.getFluobt().loadParam(fileDir + ".param");
    }
  }//GEN-LAST:event_jMenuParamActionPerformed

  /**
   * Changes images zoom.
   *
   * @param evt
   */
  private void jMenuZoomActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuZoomActionPerformed
  {//GEN-HEADEREND:event_jMenuZoomActionPerformed
    // ============== Create a dialog to change options =======================
    GenericDialog dialog = new GenericDialog("Images zoom");

    dialog.addNumericField("Zoom ( µm / pixel )", control.getFluobt().getZoom(),
                           3);

    // ============================ Show the Dialog ===========================
    dialog.showDialog();

    // ======== If dialog canceled return without doing anything ==============
    if (dialog.wasCanceled())
    {
      return;
    }

    // ============== Else get back user new options ==========================
    double newZoom = dialog.getNextNumber();

    // ==== If invalid numbers are found,  return without doing anything  =====
    if (dialog.invalidNumber())
    {
      IJ.showMessage("Invalid numbers");
    }
    else if (Double.compare(newZoom, control.getFluobt().getZoom()) != 0)
    {
      control.getFluobt().setZoom(newZoom);
    }
  }//GEN-LAST:event_jMenuZoomActionPerformed

  /**
   * Changes cell max width and min area.
   *
   * @param evt
   */
  private void jMenuCellsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuCellsActionPerformed
  {//GEN-HEADEREND:event_jMenuCellsActionPerformed
    // =============== Dialog to choose cells options =========================
    GenericDialog dialog = new GenericDialog("Cells Informations");
    dialog.addNumericField("Min cell Area", control.getFluobt().getMinArea(), 2);
    dialog.addNumericField("Max cell Width", control.getFluobt().getMaxWidth(),
                           2);

    // ============== Show dialog to user =====================================
    dialog.showDialog();

    // =============== Get user answers =======================================
    double newMinArea = dialog.getNextNumber();
    double newMaxWidth = dialog.getNextNumber();

    // ========== If some of the answers are invalid show error message =======
    if (dialog.invalidNumber())
    {
      IJ.showMessage("Invalid numbers");
      return;
    }

    // ========== Else update attributes and ask to update related options ====
    if (newMinArea != control.getFluobt().getMinArea() || newMaxWidth
                                                          != control.getFluobt().
        getMaxWidth())
    {
      // ----------- Ask user if related options are to be changed ---------- 
      YesNoCancelDialog ask = new YesNoCancelDialog(this, "Set options",
                                                    "Do you want to update cell related options automatically ?\n"
                                                    + "\n - Renormalization radius"
                                                    + "\n - Dilatation min blob area"
                                                    + "\n - Cleaning min blob border"
                                                    + "\n will be changed.");

      // === If answer is cancel, stopRun action. ===
      if (ask.cancelPressed())
      {
        return;
      } // === If answer is yes, change related options. ===
      else if (ask.yesPressed())
      {

        control.getFluobt().setRenormRadius(newMaxWidth / 2);
        control.getFluobt().setMinBlobArea(newMinArea / 3);
        control.getFluobt().setMinBlobBorder(newMaxWidth / 3);
      }

      // ----------- Update cells attributes ---------- 
      control.getFluobt().setMinArea(newMinArea);
      control.getFluobt().setMaxWidth(newMaxWidth);
    }
  }//GEN-LAST:event_jMenuCellsActionPerformed

  /**
   * Shutdown loopingRunnable executor when window is closed.
   *
   * @param evt
   */
  private void formWindowClosed(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosed
  {//GEN-HEADEREND:event_formWindowClosed
    denoisDialog.dispose();
    renormDialog.dispose();
    segmentDialog.dispose();
  }//GEN-LAST:event_formWindowClosed

  private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonNextActionPerformed
  {//GEN-HEADEREND:event_jButtonNextActionPerformed
    if (control.getFluobt().getMovieStep().compareTo(Step.FINAL_BLOBS) >= 0)
    {
      BlobsCheckFrame nextFrame;

      nextFrame = new BlobsCheckFrame(control);
      control.getFluobt().addObserver(nextFrame);
      nextFrame.setVisible(true);
      dispose();

    }
  }//GEN-LAST:event_jButtonNextActionPerformed

  private void imageOrigMouseWheelMoved(java.awt.event.MouseWheelEvent evt)//GEN-FIRST:event_imageOrigMouseWheelMoved
  {//GEN-HEADEREND:event_imageOrigMouseWheelMoved
    ImagePanel panel = (ImagePanel) evt.getComponent();
    int val = panel.getSlice();

    setSlice(val);
  }//GEN-LAST:event_imageOrigMouseWheelMoved

  private void jSkipDenoisActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jSkipDenoisActionPerformed
  {//GEN-HEADEREND:event_jSkipDenoisActionPerformed
    boolean noSkip = !jSkipDenois.isSelected();
    control.getFluobt().setDoDenois(noSkip);
    control.getFluobt().setDoRoughB(noSkip);
  }//GEN-LAST:event_jSkipDenoisActionPerformed

  private void jSkipRenormActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jSkipRenormActionPerformed
  {//GEN-HEADEREND:event_jSkipRenormActionPerformed
    boolean noSkip = !jSkipRenorm.isSelected();
    control.getFluobt().setDoRenorm(noSkip);
    control.getFluobt().setDoFinalB(noSkip);
    control.getFluobt().setDoRecenter(noSkip);
  }//GEN-LAST:event_jSkipRenormActionPerformed

    private void jMenuChangeWorkingDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuChangeWorkingDirActionPerformed
      DirectoryChooser dirChoos = new DirectoryChooser(
          "Current working directory : " + control.getFluobt().getWorkingDir());
      String chosen = dirChoos.getDirectory();

      if (chosen != null)
      {
        control.getFluobt().changeWorkingDir(Paths.get(chosen));
      }
    }//GEN-LAST:event_jMenuChangeWorkingDirActionPerformed

  private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
  {//GEN-HEADEREND:event_formWindowClosing
    control.quit(this);
  }//GEN-LAST:event_formWindowClosing

  // ==========================================================================
  //                 MAIN
  // ==========================================================================
  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.
          getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;

        }
      }
    }
    catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(MainWorkFlowFrame.class
          .getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(MainWorkFlowFrame.class
          .getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(MainWorkFlowFrame.class
          .getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(MainWorkFlowFrame.class
          .getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        new MainWorkFlowFrame(null).setVisible(true);
      }
    });
  }

  // ==========================================================================
  //                 OTHER METHODS
  // ========================================================================== 
  // --------------------------------------------------------------------------
  //                     PREVIEWS
  // --------------------------------------------------------------------------
  /**
   * Update all previews of the interface.
   */
  public void updatePreviews()
  {
    origPreview();
    denoisPreview();
    renormPreview();
    finalBlobsPreview();
  }

  /**
   * Update previews of original images.
   */
  public void origPreview()
  {
    control.preview(imageOrig, true, Step.ORIG);

    // ---- update JscrollBar values in main frame, ----------------------
    //         denois dialog, renorm dialog and segment dialog.
    int size = control.getFluobt().getISize();
    int currSlice = Math.min(getSlice(), size);
    jScrollBar1.setValues(currSlice, 1, 1, size);

    denoisDialog.setScrollValues(currSlice, 1, 1, size);
    renormDialog.setScrollValues(currSlice, 1, 1, size);
    segmentDialog.setScrollValues(currSlice, 1, 1, size);

  }

  /**
   * Update previews of denoised images.
   */
  public void denoisPreview()
  {
    control.preview(imageDenois, true, Step.DENOIS);
  }

  /**
   * Update previews of renormalized images.
   *
   */
  public void renormPreview()
  {
    control.preview(imageRenorm, true, Step.RENORM);
  }

  /**
   * Upadte previews of finalblobs shapeSets.
   */
  public void finalBlobsPreview()
  {
    control.preview(imageSegment, true, Step.FINAL_BLOBS, BlobsDrawOpt.GRAPH);

  }

  /**
   * Clears images previews.
   */
  public void clearPreviews()
  {
    imageOrig.setImageWithResize(null, 0);
    imageDenois.setImageWithResize(null, 0);
    imageRenorm.setImageWithResize(null, 0);
    imageSegment.setImageWithResize(null, 0);
    getDenoisDialog().clearPreviews();
    getRenormDialog().clearPreviews();
    getSegmentDialog().clearPreviews();
  }

  // ==========================================================================
  //                             GETTERS
  // ==========================================================================
  /**
   * Get Fluobt attribute.
   *
   * @return
   */
  public Fluo_Bac_Tracker getFluobt()
  {
    return control.getFluobt();
  }

  /**
   * Get scrollBar value ( corresponding to previews slice number ).
   *
   * @return
   */
  public int getSlice()
  {
    return jScrollBar1.getValue();
  }

  /**
   * Returns denoising details dialog.
   *
   * @return
   */
  public DenoisDialog getDenoisDialog()
  {
    return denoisDialog;
  }

  /**
   * Returns renormalization details dialog.
   *
   * @return
   */
  public RenormDialog getRenormDialog()
  {
    return renormDialog;
  }

  /**
   * Returns over-segmentation details dialog.
   *
   * @return
   */
  public SegmentDialog getSegmentDialog()
  {
    return segmentDialog;
  }

  // ==========================================================================
  //                             SETTERS
  // ==========================================================================
  /**
   * Set all previews slice number to show.
   *
   * @param val
   */
  public void setSlice(int val)
  {
    jScrollBar1.setValue(val);

    // ========  Update previews ============================================
    this.imageOrig.setSlice(val);
    this.imageDenois.setSlice(val);
    this.imageRenorm.setSlice(val);
    this.imageSegment.setSlice(val);

    // ======= Update details dialog scrollbar and previews =================
    denoisDialog.setSlice(val);
    renormDialog.setSlice(val);
    segmentDialog.setSlice(val);
  }

  /**
   * Set progressBar value.
   *
   * @param prog
   */
  public void setProgress(double prog)
  {
    jProgressBar.setValue((int) prog);
  }

  // ==========================================================================
  //                   Observer method
  // ==========================================================================
  @Override
  public void update(Observable o, Object arg)
  {
    Step step = (Step) arg;

    switch (step)
    {
      case ORIG:
        origPreview();
        if (denoisDialog.isVisible())
        {
          denoisDialog.origPreview();
        }
        break;

      case ROUGH_BACKGROUND:
        if (denoisDialog.isVisible())
        {
          denoisDialog.roughBPreview();
        }
        break;

      case DENOIS:
        denoisPreview();
        if (denoisDialog.isVisible())
        {
          denoisDialog.denoisPreview();
        }
        if (renormDialog.isVisible())
        {
          renormDialog.denoisPreview();
        }
        break;

      case FINAL_BACKGROUND:
        if (renormDialog.isVisible())
        {
          renormDialog.finalBPreview();
        }
        break;

      case RECENTER:
        if (renormDialog.isVisible())
        {
          renormDialog.recenterPreview();
        }
        break;

      case RENORM:
        renormPreview();
        if (renormDialog.isVisible())
        {
          renormDialog.renormPreview();
        }
        if (segmentDialog.isVisible())
        {
          segmentDialog.renormPreview();
        }
        break;

      case SEEDS:
        if (segmentDialog.isVisible())
        {
          segmentDialog.seedsPreview();
        }
        break;

      case BLOBS:
        if (segmentDialog.isVisible())
        {
          segmentDialog.blobsPreview();
        }
        break;

      case FINAL_BLOBS:
        finalBlobsPreview();
        if (segmentDialog.isVisible())
        {
          segmentDialog.finalBlobsPreview();
        }
        break;
    }

    double progress = control.getFluobt().getProgress();
    setProgress(progress);
    denoisDialog.setProgress(progress / 0.3);
    renormDialog.setProgress(Math.max(0, (progress - 30) / 0.4));
    segmentDialog.setProgress(Math.max(0, (progress - 70) / 0.3));
  }

  // ==========================================================================
  //                 PERSONAL ATTRIBUTES
  // ==========================================================================
  protected InterfaceControl control;

  /**
   * Denoising details dialog frame.
   */
  protected DenoisDialog denoisDialog;
  /**
   * Renormalization details dialog frame.
   */
  protected RenormDialog renormDialog;
  /**
   * Over-segmentation details dialog frame.
   */
  protected SegmentDialog segmentDialog;

  // ==========================================================================
  //                 GENERATED ATTRIBUTES
  // ==========================================================================
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private cellst.Interface.ImagePanel imageDenois;
  private cellst.Interface.ImagePanel imageOrig;
  private cellst.Interface.ImagePanel imageRenorm;
  private cellst.Interface.ImagePanel imageSegment;
  private javax.swing.JButton jButtonDenoisDetails;
  private javax.swing.JButton jButtonDenoisParam;
  private javax.swing.JButton jButtonDenoisRun;
  private javax.swing.JButton jButtonNext;
  private javax.swing.JButton jButtonRenormDetails;
  private javax.swing.JButton jButtonRenormParam;
  private javax.swing.JButton jButtonRenormRun;
  private javax.swing.JButton jButtonRunAll;
  private javax.swing.JButton jButtonSegmentDetails;
  private javax.swing.JButton jButtonSegmentParam;
  private javax.swing.JButton jButtonSegmentRun;
  private javax.swing.JButton jButtonStop;
  private javax.swing.JCheckBox jCheckBoxDenois;
  private javax.swing.JCheckBox jCheckBoxRenorm;
  private javax.swing.JCheckBox jCheckBoxSegment;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenu jMenu2;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JMenuItem jMenuCells;
  private javax.swing.JMenuItem jMenuChangeWorkingDir;
  private javax.swing.JMenuItem jMenuImportImgs;
  private javax.swing.JMenuItem jMenuLoad;
  private javax.swing.JMenuItem jMenuParam;
  private javax.swing.JMenuItem jMenuQuit;
  private javax.swing.JMenuItem jMenuSave;
  private javax.swing.JMenuItem jMenuSaveAs;
  private javax.swing.JMenuItem jMenuZoom;
  private javax.swing.JProgressBar jProgressBar;
  private javax.swing.JScrollBar jScrollBar1;
  private javax.swing.JPopupMenu.Separator jSeparator1;
  private javax.swing.JPopupMenu.Separator jSeparator2;
  private javax.swing.JPopupMenu.Separator jSeparator3;
  private javax.swing.JCheckBox jSkipDenois;
  private javax.swing.JCheckBox jSkipRenorm;
  // End of variables declaration//GEN-END:variables

}

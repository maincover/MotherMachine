/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cellst.Interface.Preprocessings;

import ij.*;
import ij.gui.*;
import ij.io.DirectoryChooser;

import java.awt.Frame;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import cellst.Enums.BlobsDrawOpt;
import cellst.Enums.Step;
import cellst.Image.*;
import cellst.Interface.InterfaceControl;
import cellst.Interface.Preprocessings.MainWorkFlowFrame;
import cellst.Main.*;

/**
 *
 * @author Magali Vangkeosay, David Parsons
 */
public class SegmentDialog extends javax.swing.JDialog
{

  // ==========================================================================
  //       CONSTRUCTOR
  // ==========================================================================
  /**
   * Creates new form SegmentDialog.
   */
  public SegmentDialog(MainWorkFlowFrame parent, boolean modal)
  {
    // ================ inherited constructor =================================
    super(parent, modal);

    // =============== generated code =========================================
    initComponents();

    // ============== set attribute ===========================================
    control = parent.control;
        
  }

  // ==========================================================================
  //       GENERATED CODE
  // ==========================================================================
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    imageBlobs = new cellst.Interface.ImagePanel();
    imageRenorm = new cellst.Interface.ImagePanel();
    jLabel1 = new javax.swing.JLabel();
    imageSeeds = new cellst.Interface.ImagePanel();
    jLabel2 = new javax.swing.JLabel();
    jButtonCleanBlobsRun = new javax.swing.JButton();
    jLabel3 = new javax.swing.JLabel();
    jCheckBoxCleanBlobs = new javax.swing.JCheckBox();
    jButtoncleanBlobsParam = new javax.swing.JButton();
    jButtonBlobsParam = new javax.swing.JButton();
    jButtonBlobsRun = new javax.swing.JButton();
    jScrollBar1 = new javax.swing.JScrollBar();
    jCheckBoxBlobs = new javax.swing.JCheckBox();
    imageCleanBlobs = new cellst.Interface.ImagePanel();
    jButtonSeedsParam = new javax.swing.JButton();
    jCheckBoxSeeds = new javax.swing.JCheckBox();
    jButtonRunAll = new javax.swing.JButton();
    jProgressBar = new javax.swing.JProgressBar();
    jButtonSeedsRun = new javax.swing.JButton();
    jButtonReturn = new javax.swing.JButton();
    jButtonStop = new javax.swing.JButton();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    jMenuSave = new javax.swing.JMenuItem();
    jMenuSaveAs = new javax.swing.JMenuItem();
    jSeparator1 = new javax.swing.JPopupMenu.Separator();
    jMenuQuit = new javax.swing.JMenuItem();
    jMenuHel = new javax.swing.JMenu();
    jSeparator3 = new javax.swing.JPopupMenu.Separator();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    addComponentListener(new java.awt.event.ComponentAdapter()
    {
      public void componentHidden(java.awt.event.ComponentEvent evt)
      {
        formComponentHidden(evt);
      }
    });

    imageBlobs.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    imageBlobs.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        imageRenormMouseWheelMoved(evt);
      }
    });
    imageBlobs.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        imageBlobsMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout imageBlobsLayout = new javax.swing.GroupLayout(imageBlobs);
    imageBlobs.setLayout(imageBlobsLayout);
    imageBlobsLayout.setHorizontalGroup(
      imageBlobsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 147, Short.MAX_VALUE)
    );
    imageBlobsLayout.setVerticalGroup(
      imageBlobsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );

    imageRenorm.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    imageRenorm.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        imageRenormMouseWheelMoved(evt);
      }
    });
    imageRenorm.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        imageRenormMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout imageRenormLayout = new javax.swing.GroupLayout(imageRenorm);
    imageRenorm.setLayout(imageRenormLayout);
    imageRenormLayout.setHorizontalGroup(
      imageRenormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 144, Short.MAX_VALUE)
    );
    imageRenormLayout.setVerticalGroup(
      imageRenormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );

    jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
    jLabel1.setForeground(new java.awt.Color(203, 49, 53));
    jLabel1.setText("Seeds ");

    imageSeeds.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    imageSeeds.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        imageRenormMouseWheelMoved(evt);
      }
    });
    imageSeeds.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        imageSeedsMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout imageSeedsLayout = new javax.swing.GroupLayout(imageSeeds);
    imageSeeds.setLayout(imageSeedsLayout);
    imageSeedsLayout.setHorizontalGroup(
      imageSeedsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 149, Short.MAX_VALUE)
    );
    imageSeedsLayout.setVerticalGroup(
      imageSeedsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );

    jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
    jLabel2.setForeground(new java.awt.Color(203, 49, 53));
    jLabel2.setText("Blobs");

    jButtonCleanBlobsRun.setText("Run");
    jButtonCleanBlobsRun.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonCleanBlobsRun.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonCleanBlobsRunActionPerformed(evt);
      }
    });

    jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
    jLabel3.setForeground(new java.awt.Color(203, 49, 53));
    jLabel3.setText("Cleaned Blobs");

    jCheckBoxCleanBlobs.setText("Whole Movie");

    jButtoncleanBlobsParam.setText("Param");
    jButtoncleanBlobsParam.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtoncleanBlobsParam.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtoncleanBlobsParamActionPerformed(evt);
      }
    });

    jButtonBlobsParam.setText("Param");
    jButtonBlobsParam.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonBlobsParam.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonBlobsParamActionPerformed(evt);
      }
    });

    jButtonBlobsRun.setText("Run");
    jButtonBlobsRun.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonBlobsRun.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonBlobsRunActionPerformed(evt);
      }
    });

    jScrollBar1.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
    jScrollBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jScrollBar1.addAdjustmentListener(new java.awt.event.AdjustmentListener()
    {
      public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt)
      {
        jScrollBar1AdjustmentValueChanged(evt);
      }
    });

    jCheckBoxBlobs.setText("Whole Movie");

    imageCleanBlobs.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    imageCleanBlobs.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        imageRenormMouseWheelMoved(evt);
      }
    });
    imageCleanBlobs.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        imageCleanBlobsMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout imageCleanBlobsLayout = new javax.swing.GroupLayout(imageCleanBlobs);
    imageCleanBlobs.setLayout(imageCleanBlobsLayout);
    imageCleanBlobsLayout.setHorizontalGroup(
      imageCleanBlobsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 148, Short.MAX_VALUE)
    );
    imageCleanBlobsLayout.setVerticalGroup(
      imageCleanBlobsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );

    jButtonSeedsParam.setText("Param");
    jButtonSeedsParam.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonSeedsParam.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonSeedsParamActionPerformed(evt);
      }
    });

    jCheckBoxSeeds.setText("Whole Movie");

    jButtonRunAll.setText("Run All");
    jButtonRunAll.setPreferredSize(new java.awt.Dimension(200, 30));
    jButtonRunAll.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonRunAllActionPerformed(evt);
      }
    });

    jButtonSeedsRun.setText("Run");
    jButtonSeedsRun.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonSeedsRun.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonSeedsRunActionPerformed(evt);
      }
    });

    jButtonReturn.setText("Return to Main");
    jButtonReturn.setPreferredSize(new java.awt.Dimension(200, 30));
    jButtonReturn.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonReturnActionPerformed(evt);
      }
    });

    jButtonStop.setText("Stop");
    jButtonStop.setPreferredSize(new java.awt.Dimension(200, 30));
    jButtonStop.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonStopActionPerformed(evt);
      }
    });

    jMenu1.setText("File");

    jMenuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
    jMenuSave.setText("Save");
    jMenuSave.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuSaveActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuSave);

    jMenuSaveAs.setText("Save As");
    jMenuSaveAs.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuSaveAsActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuSaveAs);

    jSeparator1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jMenu1.add(jSeparator1);

    jMenuQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
    jMenuQuit.setText("Quit");
    jMenuQuit.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuQuitActionPerformed(evt);
      }
    });
    jMenu1.add(jMenuQuit);

    jMenuBar1.add(jMenu1);

    jMenuHel.setText("Help");

    jSeparator3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jMenuHel.add(jSeparator3);

    jMenuBar1.add(jMenuHel);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(jButtonRunAll, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButtonStop, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButtonReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(imageRenorm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jScrollBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(jLabel1)
                .addComponent(jCheckBoxSeeds))
              .addComponent(jButtonSeedsParam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtonSeedsRun, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(imageSeeds, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
              .addComponent(jButtonBlobsParam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtonBlobsRun, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jCheckBoxBlobs)
              .addComponent(jLabel2))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(imageBlobs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
              .addComponent(jButtoncleanBlobsParam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jCheckBoxCleanBlobs)
              .addComponent(jButtonCleanBlobsRun, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jLabel3))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(imageCleanBlobs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .addComponent(jProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );

    layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButtonReturn, jButtonRunAll});

    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabel1)
              .addComponent(jLabel2)
              .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jCheckBoxSeeds)
              .addComponent(jCheckBoxBlobs)
              .addComponent(jCheckBoxCleanBlobs))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jButtonSeedsParam, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtonBlobsParam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtoncleanBlobsParam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jButtonSeedsRun, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtonBlobsRun, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtonCleanBlobsRun, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(imageCleanBlobs, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(imageRenorm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(imageSeeds, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(imageBlobs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addGap(11, 11, 11)
        .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
          .addComponent(jButtonStop, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jButtonRunAll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jButtonReturn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  // ==========================================================================
  //       ACTIONS METHODS
  // ==========================================================================
  /**
   * If double-clicked imageBlobs panel show blobs ShapeSets.
   *
   * @param evt
   */
  private void imageBlobsMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_imageBlobsMouseClicked
  {//GEN-HEADEREND:event_imageBlobsMouseClicked
    // =================== If event is a Double click. ========================
    // Load blobs shapeSets and show them.
    if (evt.getClickCount() == 2)
    {
      control.show(Step.BLOBS, BlobsDrawOpt.GRAPH);
    }
  }//GEN-LAST:event_imageBlobsMouseClicked

  /**
   * If double-clicked imageRenorm panel show renormalized stack.
   *
   * @param evt
   */
  private void imageRenormMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_imageRenormMouseClicked
  {//GEN-HEADEREND:event_imageRenormMouseClicked
    // Double click.
    if (evt.getClickCount() == 2)
    {
      control.show(Step.RENORM);
    }
  }//GEN-LAST:event_imageRenormMouseClicked

  /**
   * If double-clicked imageSeeds show seeds ShapeSets.
   *
   * @param evt
   */
  private void imageSeedsMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_imageSeedsMouseClicked
  {//GEN-HEADEREND:event_imageSeedsMouseClicked
    // =================== If event is a Double click. ========================
    // Load seeds shapeSets and show them.
    if (evt.getClickCount() == 2)
    {
      control.show(Step.SEEDS, BlobsDrawOpt.BLOBS);
    }
  }//GEN-LAST:event_imageSeedsMouseClicked

  /**
   * Runs connection graph and blobs cleaning.
   *
   * @param evt
   */
  private void jButtonCleanBlobsRunActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonCleanBlobsRunActionPerformed
  {//GEN-HEADEREND:event_jButtonCleanBlobsRunActionPerformed
    int slice = -1;
    if (!jCheckBoxCleanBlobs.isSelected())
    {
      slice = jScrollBar1.getValue();
    }

    control.run(Step.BLOBS, Step.FINAL_BLOBS, slice);
  }//GEN-LAST:event_jButtonCleanBlobsRunActionPerformed

  /**
   * Changes blobs cleaning parameters.
   *
   * @param evt
   */
  private void jButtoncleanBlobsParamActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtoncleanBlobsParamActionPerformed
  {//GEN-HEADEREND:event_jButtoncleanBlobsParamActionPerformed
    // ============== Create a dialog to change options =======================
    GenericDialog dialog = new GenericDialog("Cleaning blobs Options");
    dialog.addNumericField("Min blob area (µm²)", control.getFluobt().getMinBlobArea(), 3);
    dialog.addNumericField("Second dilatation iteration nb", control.getFluobt().
        getCleanIter(), 0);

    // ============================ Show the Dialog ===========================
    dialog.showDialog();

    // ======== If dialog canceled return without doing anything ==============
    if (dialog.wasCanceled())
    {
      return;
    }

    // ============== Else get back user new options ==========================
    double newMinBlobArea = dialog.getNextNumber();
    int newCleanIter = (int) dialog.getNextNumber();

    // ==== If invalid numbers are found,  return without doing anything  =====
    if (dialog.invalidNumber())
    {
      IJ.showMessage("Invalid numbers");
      return;
    }

    // ============== Else update control.getFluobt() attributes with new options  =========
    control.getFluobt().setMinBlobArea(newMinBlobArea);
    control.getFluobt().setCleanIter(newCleanIter);

  }//GEN-LAST:event_jButtoncleanBlobsParamActionPerformed

  /**
   * Changes seeds dilatation into blobs parameters.
   *
   * @param evt
   */
  private void jButtonBlobsParamActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonBlobsParamActionPerformed
  {//GEN-HEADEREND:event_jButtonBlobsParamActionPerformed
    // ============== Create a dialog to change options =======================
    GenericDialog dialog = new GenericDialog("Dilatation Options");
    dialog.addNumericField("Speed parameter 1 ( slope toughness )", control.getFluobt().
        getSpeedA(), 3);
    dialog.addNumericField("Speed parameter 2 ( point of transition )", control.getFluobt().
        getSpeedB(), 3);
    dialog.addNumericField("Max iterations nb", control.getFluobt().getDilateIter(), 0);
    dialog.addNumericField("Min significant border between blobs (µm)", control.getFluobt().
        getMinBlobBorder(), 3);

    // ============================ Show the Dialog ===========================
    dialog.showDialog();

    // ======== If dialog canceled return without doing anything ==============
    if (dialog.wasCanceled())
    {
      return;
    }

    // ============== Else get back user new options ==========================
    double newSpeedA = dialog.getNextNumber();
    double newSpeedB = dialog.getNextNumber();
    int newIter = (int) dialog.getNextNumber();
    double newMinBlobBorder = dialog.getNextNumber();

    // ==== If invalid numbers are found,  return without doing anything  =====
    if (dialog.invalidNumber())
    {
      IJ.showMessage("Invalid numbers");
      return;
    }

    // ============== Else update control.getFluobt() attributes with new options  =========
    control.getFluobt().setSpeedA(newSpeedA);
    control.getFluobt().setSpeedB(newSpeedB);
    control.getFluobt().setDilateIter(newIter);
    control.getFluobt().setMinBlobBorder(newMinBlobBorder);


  }//GEN-LAST:event_jButtonBlobsParamActionPerformed

  /**
   * Runs dilatation of seeds into blobs.
   *
   * @param evt
   */
  private void jButtonBlobsRunActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonBlobsRunActionPerformed
  {//GEN-HEADEREND:event_jButtonBlobsRunActionPerformed
    int slice = -1;
    if (!jCheckBoxBlobs.isSelected())
    {
      slice = jScrollBar1.getValue();
    }

    control.run(Step.SEEDS, Step.BLOBS, slice);
  }//GEN-LAST:event_jButtonBlobsRunActionPerformed

  /**
   * Changes shown slice in previews if scrollbar value change.
   *
   * @param evt
   */
  private void jScrollBar1AdjustmentValueChanged(java.awt.event.AdjustmentEvent evt)//GEN-FIRST:event_jScrollBar1AdjustmentValueChanged
  {//GEN-HEADEREND:event_jScrollBar1AdjustmentValueChanged
    // ========= Get value from scrollBar ===================================
    int val = this.jScrollBar1.getValue();

    // ========= Update slice nmber in previews. ============================
    this.imageRenorm.setSlice(val);
    this.imageSeeds.setSlice(val);
    this.imageBlobs.setSlice(val);
    this.imageCleanBlobs.setSlice(val);
  }//GEN-LAST:event_jScrollBar1AdjustmentValueChanged

  /**
   * If double-clicked, imageCleanBlobs show final blobs ShapeSets.
   *
   * @param evt
   */
  private void imageCleanBlobsMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_imageCleanBlobsMouseClicked
  {//GEN-HEADEREND:event_imageCleanBlobsMouseClicked
    // Double click.
    if (evt.getClickCount() == 2)
    {
      control.show(Step.FINAL_BLOBS, BlobsDrawOpt.GRAPH);
    }
  }//GEN-LAST:event_imageCleanBlobsMouseClicked

  /**
   * Changes seeds computation parameters.
   *
   * @param evt
   */
  private void jButtonSeedsParamActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSeedsParamActionPerformed
  {//GEN-HEADEREND:event_jButtonSeedsParamActionPerformed
    // ============== Create a dialog to change options =======================
    GenericDialog dialog = new GenericDialog("Renormalization Options");
    dialog.addNumericField("Seeds threshold", control.getFluobt().getSeedsThres(), 3);

    // ============================ Show the Dialog ===========================
    dialog.showDialog();

    // ======== If dialog canceled return without doing anything ==============
    if (dialog.wasCanceled())
    {
      return;
    }

    // ============== Else get back user new options ==========================
    double newThres = dialog.getNextNumber();

    // ==== If invalid numbers are found,  return without doing anything  =====
    if (Double.isNaN(newThres))
    {
      IJ.showMessage("Invalid numbers");
      return;
    }

    // ============== Else update control.getFluobt() attributes with new options  =========
    control.getFluobt().setSeedsThres(newThres);

  }//GEN-LAST:event_jButtonSeedsParamActionPerformed

  /**
   * Runs seeds computation and dilatation into blobs and blobs cleaning.
   *
   * @param evt
   */
  private void jButtonRunAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRunAllActionPerformed
  {//GEN-HEADEREND:event_jButtonRunAllActionPerformed
    int slice = -1;
    if (!jCheckBoxSeeds.isSelected())
    {
      slice = jScrollBar1.getValue();
    }

    control.run(Step.RENORM, Step.FINAL_BLOBS, slice);
  }//GEN-LAST:event_jButtonRunAllActionPerformed

  /**
   * Runs seeds computation.
   *
   * @param evt
   */
  private void jButtonSeedsRunActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSeedsRunActionPerformed
  {//GEN-HEADEREND:event_jButtonSeedsRunActionPerformed
    int slice = -1;
    if (!jCheckBoxSeeds.isSelected())
    {
      slice = jScrollBar1.getValue();
    }
    
    control.run(Step.RENORM, Step.SEEDS, slice);
  }//GEN-LAST:event_jButtonSeedsRunActionPerformed

  /**
   * Interrupt computation thread.
   *
   * @param evt
   */
  private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonStopActionPerformed
  {//GEN-HEADEREND:event_jButtonStopActionPerformed
    control.stopRun();
  }//GEN-LAST:event_jButtonStopActionPerformed

  /**
   * Save result in results path.
   *
   * @param evt
   */
  private void jMenuSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuSaveActionPerformed
  {//GEN-HEADEREND:event_jMenuSaveActionPerformed
    control.save((Frame) getParent());
  }//GEN-LAST:event_jMenuSaveActionPerformed

  /**
   *
   * Save results in new results path.
   *
   * @param evt
   */
  private void jMenuSaveAsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuSaveAsActionPerformed
  {//GEN-HEADEREND:event_jMenuSaveAsActionPerformed
    control.saveAs((Frame) getParent());
  }//GEN-LAST:event_jMenuSaveAsActionPerformed

  /**
   * Closes dialog.
   *
   * @param evt
   */
  private void jMenuQuitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuQuitActionPerformed
  {//GEN-HEADEREND:event_jMenuQuitActionPerformed
    control.quit((Frame) getParent());
  }//GEN-LAST:event_jMenuQuitActionPerformed

  /**
   * Closes dialog.
   *
   * @param evt
   */
  private void jButtonReturnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonReturnActionPerformed
  {//GEN-HEADEREND:event_jButtonReturnActionPerformed
    dispose();
  }//GEN-LAST:event_jButtonReturnActionPerformed

  private void imageRenormMouseWheelMoved(java.awt.event.MouseWheelEvent evt)//GEN-FIRST:event_imageRenormMouseWheelMoved
  {//GEN-HEADEREND:event_imageRenormMouseWheelMoved
    int val = evt.getWheelRotation() + jScrollBar1.getValue();
    val = Math.max(val, 1);
    val = Math.min(val, control.getFluobt().getISize());

    setSlice(val);
  }//GEN-LAST:event_imageRenormMouseWheelMoved

  private void formComponentHidden(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentHidden
  {//GEN-HEADEREND:event_formComponentHidden
    MainWorkFlowFrame mainFrame = ((MainWorkFlowFrame) getParent());
    mainFrame.setEnabled(true);
    mainFrame.updatePreviews();
  }//GEN-LAST:event_formComponentHidden

  // ==========================================================================
  //                 MAIN
  // ==========================================================================
  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.
          getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(SegmentDialog.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(SegmentDialog.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(SegmentDialog.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(SegmentDialog.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        SegmentDialog dialog = new SegmentDialog(null, true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter()
        {
          @Override
          public void windowClosing(java.awt.event.WindowEvent e)
          {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }

  // ==========================================================================
  //                PERSONAL METHODS
  // ==========================================================================
  // ---------------------------------------------------------------------------
  // ---                    PREVIEWS
  // --------------------------------------------------------------------------- 
  /**
   * Upadate all previews in dialog.
   */
  public void updatePreviews()
  {
    renormPreview();
    seedsPreview();
    blobsPreview();
    finalBlobsPreview();
  }

  /**
   * Update renormalized stack preview.
   */
  public void renormPreview()
  {
    control.preview(imageRenorm, true, Step.RENORM);
  }

  /**
   * Update seeds ShapeSets previews.
   */
  public void seedsPreview()
  {
    control.preview(imageSeeds, true, Step.SEEDS, BlobsDrawOpt.BLOBS);
  }

  /**
   * Update blobs ShapeSets previews.s
   *
   */
  public void blobsPreview()
  {
    control.preview(imageBlobs, true, Step.BLOBS, BlobsDrawOpt.GRAPH);
  }

  /**
   * Update final blobs ShapeSets preview.
   */
  public void finalBlobsPreview()
  {
    control.preview(imageCleanBlobs, true, Step.FINAL_BLOBS, BlobsDrawOpt.GRAPH);
  }

  /**
   * Clears images previews.
   */
  public void clearPreviews()
  {
    imageBlobs.setImageWithResize(null, 0);
    imageCleanBlobs.setImageWithResize(null, 0);
    imageRenorm.setImageWithResize(null, 0);
    imageSeeds.setImageWithResize(null, 0);
  }

  // ==========================================================================
  //                    GETTERS
  // ==========================================================================
  /**
   * Returns scrollbar value, which defines which slice of the stack is shown in
   * previews.
   *
   * @return
   */
  public int getSlice()
  {
    return jScrollBar1.getValue();
  }

  // ==========================================================================
  //                    SETTERS
  // ==========================================================================
  /**
   * Sets which slice of the stack is shown in previews.
   *
   * @param _slice
   */
  public void setSlice(int _slice)
  {
    jScrollBar1.setValue(_slice);
    imageBlobs.setSlice(_slice);
    imageCleanBlobs.setSlice(_slice);
    imageRenorm.setSlice(_slice);
    imageSeeds.setSlice(_slice);
  }

  /**
   * Set scrollBar values : value, extends, minimum, maximum, and update slice
   * shown by preview.
   *
   * @param newValue
   * @param newExtends
   * @param newMin
   * @param newMax
   */
  public void setScrollValues(int newValue, int newExtends, int newMin,
                              int newMax)
  {
    // ========= Set scrollBar values ========================================
    jScrollBar1.setValues(newValue, newExtends, newMin, newMax);

    // ========= Update previews slice =======================================
    imageBlobs.setSlice(newValue);
    imageCleanBlobs.setSlice(newValue);
    imageRenorm.setSlice(newValue);
    imageSeeds.setSlice(newValue);
  }

  /**
   * Set ProgressBar value.
   *
   * @param _prog
   */
  public void setProgress(double _prog)
  {
    jProgressBar.setValue((int) _prog);
  }
  // ==========================================================================
  //                             PERSONAL ATTRIBUTES
  // ==========================================================================
  InterfaceControl control;
  
  // ==========================================================================
  //                           ATTRIBUTES
  // ==========================================================================
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private cellst.Interface.ImagePanel imageBlobs;
  private cellst.Interface.ImagePanel imageCleanBlobs;
  private cellst.Interface.ImagePanel imageRenorm;
  private cellst.Interface.ImagePanel imageSeeds;
  private javax.swing.JButton jButtonBlobsParam;
  private javax.swing.JButton jButtonBlobsRun;
  private javax.swing.JButton jButtonCleanBlobsRun;
  private javax.swing.JButton jButtonReturn;
  private javax.swing.JButton jButtonRunAll;
  private javax.swing.JButton jButtonSeedsParam;
  private javax.swing.JButton jButtonSeedsRun;
  private javax.swing.JButton jButtonStop;
  private javax.swing.JButton jButtoncleanBlobsParam;
  private javax.swing.JCheckBox jCheckBoxBlobs;
  private javax.swing.JCheckBox jCheckBoxCleanBlobs;
  private javax.swing.JCheckBox jCheckBoxSeeds;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JMenu jMenuHel;
  private javax.swing.JMenuItem jMenuQuit;
  private javax.swing.JMenuItem jMenuSave;
  private javax.swing.JMenuItem jMenuSaveAs;
  private javax.swing.JProgressBar jProgressBar;
  private javax.swing.JScrollBar jScrollBar1;
  private javax.swing.JPopupMenu.Separator jSeparator1;
  private javax.swing.JPopupMenu.Separator jSeparator3;
  // End of variables declaration//GEN-END:variables
}

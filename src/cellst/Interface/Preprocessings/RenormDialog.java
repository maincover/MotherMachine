/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cellst.Interface.Preprocessings;

import ij.*;
import ij.gui.*;

import java.awt.Frame;
import java.nio.file.*;
import java.util.*;

import cellst.Enums.Step;
import cellst.Image.*;
import cellst.Interface.InterfaceControl;
import cellst.Main.*;

/**
 * Renormalization details dialog frame.
 *
 * @author Magali Vangkeosay, David Parsons
 */
public class RenormDialog extends javax.swing.JDialog
{
  // ==========================================================================
  // ===                CONSTRUCTOR
  // ==========================================================================

  /**
   * Creates new form RenormDialog.
   */
  public RenormDialog(MainWorkFlowFrame parent, boolean modal)
  {
    // ========== Inherited constructor =======================================
    super(parent, modal);

    // ========= Generated code ===============================================
    initComponents();

    // ========= Init attribute ===============================================
    control = parent.control;

  }

  // ==========================================================================
  // ===                GENERATED CODE
  // ==========================================================================
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    imageRenorm = new cellst.Interface.ImagePanel();
    jButtonReturn = new javax.swing.JButton();
    jCheckRenorm = new javax.swing.JCheckBox();
    jButtonRunAll = new javax.swing.JButton();
    jLabel1 = new javax.swing.JLabel();
    jButtonRenormParam = new javax.swing.JButton();
    jCheckFinalB = new javax.swing.JCheckBox();
    jProgressBar1 = new javax.swing.JProgressBar();
    jScrollBar1 = new javax.swing.JScrollBar();
    jButtonStop = new javax.swing.JButton();
    jButtonRenormRun = new javax.swing.JButton();
    jButtonFinalBRun = new javax.swing.JButton();
    imageDenois = new cellst.Interface.ImagePanel();
    imageFinalB = new cellst.Interface.ImagePanel();
    jButtonFinalBParam = new javax.swing.JButton();
    jLabel2 = new javax.swing.JLabel();
    imageRecenter = new cellst.Interface.ImagePanel();
    jButtonRecenterRun = new javax.swing.JButton();
    jLabel4 = new javax.swing.JLabel();
    jCheckRecenter = new javax.swing.JCheckBox();
    jSkipFinalB = new javax.swing.JCheckBox();
    jSkipRecenter = new javax.swing.JCheckBox();
    jSkipRenorm = new javax.swing.JCheckBox();
    jMenuBar = new javax.swing.JMenuBar();
    jMenuFile = new javax.swing.JMenu();
    jMenuSave = new javax.swing.JMenuItem();
    jMenuSaveAs = new javax.swing.JMenuItem();
    jSeparator1 = new javax.swing.JPopupMenu.Separator();
    jMenuQuit = new javax.swing.JMenuItem();
    jMenuHelp = new javax.swing.JMenu();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    addComponentListener(new java.awt.event.ComponentAdapter()
    {
      public void componentHidden(java.awt.event.ComponentEvent evt)
      {
        formComponentHidden(evt);
      }
    });

    imageRenorm.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    imageRenorm.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        imageDenoisMouseWheelMoved(evt);
      }
    });
    imageRenorm.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        imageRenormMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout imageRenormLayout = new javax.swing.GroupLayout(imageRenorm);
    imageRenorm.setLayout(imageRenormLayout);
    imageRenormLayout.setHorizontalGroup(
      imageRenormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 132, Short.MAX_VALUE)
    );
    imageRenormLayout.setVerticalGroup(
      imageRenormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 168, Short.MAX_VALUE)
    );

    jButtonReturn.setText("Return to Main");
    jButtonReturn.setPreferredSize(new java.awt.Dimension(200, 30));
    jButtonReturn.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonReturnActionPerformed(evt);
      }
    });

    jCheckRenorm.setText("whole movie");

    jButtonRunAll.setText("Run All");
    jButtonRunAll.setPreferredSize(new java.awt.Dimension(200, 30));
    jButtonRunAll.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonRunAllActionPerformed(evt);
      }
    });

    jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
    jLabel1.setForeground(new java.awt.Color(203, 49, 53));
    jLabel1.setText("Final Background");

    jButtonRenormParam.setText("Param");
    jButtonRenormParam.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonRenormParam.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonRenormParamActionPerformed(evt);
      }
    });

    jCheckFinalB.setText("whole movie");

    jScrollBar1.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
    jScrollBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    jScrollBar1.addAdjustmentListener(new java.awt.event.AdjustmentListener()
    {
      public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt)
      {
        jScrollBar1AdjustmentValueChanged(evt);
      }
    });

    jButtonStop.setText("Stop");
    jButtonStop.setPreferredSize(new java.awt.Dimension(200, 30));
    jButtonStop.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonStopActionPerformed(evt);
      }
    });

    jButtonRenormRun.setText("Run");
    jButtonRenormRun.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonRenormRun.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonRenormRunActionPerformed(evt);
      }
    });

    jButtonFinalBRun.setText("Run");
    jButtonFinalBRun.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonFinalBRun.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonFinalBRunActionPerformed(evt);
      }
    });

    imageDenois.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    imageDenois.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        imageDenoisMouseWheelMoved(evt);
      }
    });
    imageDenois.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        imageDenoisMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout imageDenoisLayout = new javax.swing.GroupLayout(imageDenois);
    imageDenois.setLayout(imageDenoisLayout);
    imageDenoisLayout.setHorizontalGroup(
      imageDenoisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 134, Short.MAX_VALUE)
    );
    imageDenoisLayout.setVerticalGroup(
      imageDenoisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 168, Short.MAX_VALUE)
    );

    imageFinalB.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    imageFinalB.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        imageDenoisMouseWheelMoved(evt);
      }
    });
    imageFinalB.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        imageFinalBMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout imageFinalBLayout = new javax.swing.GroupLayout(imageFinalB);
    imageFinalB.setLayout(imageFinalBLayout);
    imageFinalBLayout.setHorizontalGroup(
      imageFinalBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 134, Short.MAX_VALUE)
    );
    imageFinalBLayout.setVerticalGroup(
      imageFinalBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 168, Short.MAX_VALUE)
    );

    jButtonFinalBParam.setText("Param");
    jButtonFinalBParam.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonFinalBParam.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonFinalBParamActionPerformed(evt);
      }
    });

    jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
    jLabel2.setForeground(new java.awt.Color(203, 49, 53));
    jLabel2.setText("Renormalizing");

    imageRecenter.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    imageRecenter.addMouseWheelListener(new java.awt.event.MouseWheelListener()
    {
      public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
      {
        imageDenoisMouseWheelMoved(evt);
      }
    });
    imageRecenter.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        imageRecenterMouseClicked(evt);
      }
    });

    javax.swing.GroupLayout imageRecenterLayout = new javax.swing.GroupLayout(imageRecenter);
    imageRecenter.setLayout(imageRecenterLayout);
    imageRecenterLayout.setHorizontalGroup(
      imageRecenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 134, Short.MAX_VALUE)
    );
    imageRecenterLayout.setVerticalGroup(
      imageRecenterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );

    jButtonRecenterRun.setText("Run");
    jButtonRecenterRun.setPreferredSize(new java.awt.Dimension(120, 30));
    jButtonRecenterRun.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonRecenterRunActionPerformed(evt);
      }
    });

    jLabel4.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
    jLabel4.setForeground(new java.awt.Color(203, 49, 53));
    jLabel4.setText("Recentering");

    jCheckRecenter.setText("whole movie");
    jCheckRecenter.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jCheckRecenterActionPerformed(evt);
      }
    });

    jSkipFinalB.setText("skip");
    jSkipFinalB.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jSkipFinalBActionPerformed(evt);
      }
    });

    jSkipRecenter.setText("skip");
    jSkipRecenter.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jSkipRecenterActionPerformed(evt);
      }
    });

    jSkipRenorm.setText("skip");
    jSkipRenorm.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jSkipRenormActionPerformed(evt);
      }
    });

    jMenuFile.setText("File");

    jMenuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
    jMenuSave.setText("Save");
    jMenuSave.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuSaveActionPerformed(evt);
      }
    });
    jMenuFile.add(jMenuSave);

    jMenuSaveAs.setText("Save As");
    jMenuSaveAs.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuSaveAsActionPerformed(evt);
      }
    });
    jMenuFile.add(jMenuSaveAs);

    jSeparator1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jMenuFile.add(jSeparator1);

    jMenuQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
    jMenuQuit.setText("Quit");
    jMenuQuit.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jMenuQuitActionPerformed(evt);
      }
    });
    jMenuFile.add(jMenuQuit);

    jMenuBar.add(jMenuFile);

    jMenuHelp.setText("Help");
    jMenuBar.add(jMenuHelp);

    setJMenuBar(jMenuBar);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(0, 183, Short.MAX_VALUE)
            .addComponent(jButtonRunAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButtonStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButtonReturn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 183, Short.MAX_VALUE))
          .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(imageDenois, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jScrollBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
              .addComponent(jButtonFinalBRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jLabel1)
              .addComponent(jButtonFinalBParam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jCheckFinalB)
              .addComponent(jSkipFinalB))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(imageFinalB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
              .addComponent(jButtonRecenterRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jLabel4)
              .addComponent(jCheckRecenter)
              .addComponent(jSkipRecenter))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(imageRecenter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
              .addComponent(jButtonRenormRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jLabel2)
              .addComponent(jButtonRenormParam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jCheckRenorm)
              .addComponent(jSkipRenorm))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(imageRenorm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGap(12, 12, 12)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jCheckFinalB, javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jCheckRecenter, javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jCheckRenorm, javax.swing.GroupLayout.Alignment.TRAILING))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jButtonFinalBParam, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtonRenormParam, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jButtonRecenterRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtonFinalBRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtonRenormRun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jSkipFinalB)
              .addComponent(jSkipRecenter)
              .addComponent(jSkipRenorm))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
              .addComponent(jButtonReturn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtonRunAll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jButtonStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(imageDenois, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(imageFinalB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(imageRenorm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(imageRecenter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(74, 74, 74))))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  // ==========================================================================
  // ===              ACTIONS MANAGEMENT METHODS
  // ==========================================================================
  /**
   * Changes renormalization parameters.
   *
   * @param evt
   */
  private void jButtonRenormParamActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRenormParamActionPerformed
  {//GEN-HEADEREND:event_jButtonRenormParamActionPerformed
    // ============== Create a dialog to change options =======================
    GenericDialog dialog = new GenericDialog("Renormalization Options");
    dialog.addNumericField("Renormalization pseudo seeds threshold", control.
        getFluobt().
        getRenormThres(), 3);
    dialog.addNumericField(
        "Radius of sampling (µm) ( slightly bigger than cell radius ) : ",
        control.getFluobt().getRenormRadius(), 3);
    dialog.addNumericField("Convolution square size (µm) : ", control.
        getFluobt().
        getRenormSqSize(), 3);
    dialog.addNumericField("Convolution iterations number : ", control.
        getFluobt().
        getRenormIter(), 0);

    // ============================ Show the Dialog ===========================
    dialog.showDialog();

    // ======== If dialog canceled return without doing anything ==============
    if (dialog.wasCanceled())
    {
      return;
    }

    // ============== Else get back user new options ==========================
    double newRenormThres = dialog.getNextNumber();
    double newRadius = dialog.getNextNumber();
    double newSqSize = dialog.getNextNumber();
    int newIter = (int) dialog.getNextNumber();

    // ==== If invalid numbers are found,  return without doing anything  =====
    if (dialog.invalidNumber())
    {
      IJ.showMessage("Invalid numbers");
      return;
    }

    // ============== Else update control.getFluobt() attributes with new options  =========
    control.getFluobt().setRenormThres(newRenormThres);
    control.getFluobt().setRenormRadius(newRadius);
    control.getFluobt().setRenormSqSize(newSqSize);
    control.getFluobt().setRenormIter(newIter);

  }//GEN-LAST:event_jButtonRenormParamActionPerformed

  /**
   * Runs renormalization.
   *
   * @param evt
   */
  private void jButtonRenormRunActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRenormRunActionPerformed
  {//GEN-HEADEREND:event_jButtonRenormRunActionPerformed
    int slice = -1;
    if (!jCheckRenorm.isSelected())
    {
      slice = jScrollBar1.getValue();
    }

    control.run(Step.RECENTER, Step.RENORM, slice);
  }//GEN-LAST:event_jButtonRenormRunActionPerformed

  /**
   * Runs background computing.
   *
   * @param evt
   */
  private void jButtonFinalBRunActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonFinalBRunActionPerformed
  {//GEN-HEADEREND:event_jButtonFinalBRunActionPerformed
    int slice = -1;
    if (!jCheckFinalB.isSelected())
    {
      slice = jScrollBar1.getValue();
    }

    control.run(Step.DENOIS, Step.FINAL_BACKGROUND, slice);
  }//GEN-LAST:event_jButtonFinalBRunActionPerformed

  /**
   * Changes background threshold.
   *
   * @param evt
   */
  private void jButtonFinalBParamActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonFinalBParamActionPerformed
  {//GEN-HEADEREND:event_jButtonFinalBParamActionPerformed
    // ============== Create a dialog to change options =======================
    GenericDialog dialog = new GenericDialog("Final background Options");
    dialog.addNumericField("Final background threshold", control.getFluobt().
        getBackThres(),
                           3);

    // ============================ Show the Dialog ===========================
    dialog.showDialog();

    // ======== If dialog canceled return without doing anything ==============
    if (dialog.wasCanceled())
    {
      return;
    }

    // ============== Else get back user new options ==========================
    double newThres = dialog.getNextNumber();

    // ==== If invalid numbers are found,  return without doing anything  =====
    if (dialog.invalidNumber())
    {
      IJ.showMessage("Invalid numbers");
      return;
    }

    // ============== Else update control.getFluobt() attributes with new options  =========
    control.getFluobt().setBackThres(newThres);

  }//GEN-LAST:event_jButtonFinalBParamActionPerformed

  /**
   * Runs background computation, recenter images and renormalize them.
   *
   * @param evt
   */
  private void jButtonRunAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRunAllActionPerformed
  {//GEN-HEADEREND:event_jButtonRunAllActionPerformed
    int slice = -1;
    if (!jCheckFinalB.isSelected())
    {
      slice = jScrollBar1.getValue();
    }

    control.run(Step.DENOIS, Step.RENORM, slice);
  }//GEN-LAST:event_jButtonRunAllActionPerformed

  /**
   * Double-click on imageDenois panel open denoised ImagePlus.
   *
   * @param evt
   */
  private void imageDenoisMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_imageDenoisMouseClicked
  {//GEN-HEADEREND:event_imageDenoisMouseClicked
    // =================== If event is a Double click. ========================
    // Load denoised images and show them.
    if (evt.getClickCount() == 2)
    {
      control.show(Step.DENOIS);
    }
  }//GEN-LAST:event_imageDenoisMouseClicked

  /**
   * If double-clicked finalBimage show the image background.
   *
   * @param evt
   */
  private void imageFinalBMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_imageFinalBMouseClicked
  {//GEN-HEADEREND:event_imageFinalBMouseClicked
    // =================== If event is a Double click. ========================
    if (evt.getClickCount() == 2)
    {
      ImageStack stack = getFinalBackStack();

      // ------------------------ 4) Show ImagePlus -------------------------
      ImagePlus IP = new ImagePlus("Final background", stack);
      IP.show();

    }
  }//GEN-LAST:event_imageFinalBMouseClicked

  /**
   * If double-clicked renormimage show renormalized stack.
   *
   * @param evt
   */
  private void imageRenormMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_imageRenormMouseClicked
  {//GEN-HEADEREND:event_imageRenormMouseClicked
    // =================== If event is a Double click. ========================
    // Load renormalized images and show them.
    if (evt.getClickCount() == 2)
    {
      control.show(Step.RENORM);
    }
  }//GEN-LAST:event_imageRenormMouseClicked

  /**
   *
   *
   * @param evt
   */
  private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonStopActionPerformed
  {//GEN-HEADEREND:event_jButtonStopActionPerformed
    control.stopRun();
  }//GEN-LAST:event_jButtonStopActionPerformed

  /**
   * Manages return to main window.
   *
   * @param evt
   */
  private void jButtonReturnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonReturnActionPerformed
  {//GEN-HEADEREND:event_jButtonReturnActionPerformed
    dispose();
  }//GEN-LAST:event_jButtonReturnActionPerformed

  /**
   * Manages change of scrollBar value.
   *
   * @param evt
   */
  private void jScrollBar1AdjustmentValueChanged(java.awt.event.AdjustmentEvent evt)//GEN-FIRST:event_jScrollBar1AdjustmentValueChanged
  {//GEN-HEADEREND:event_jScrollBar1AdjustmentValueChanged
    int val = evt.getValue();
    imageDenois.setSlice(val);
    imageFinalB.setSlice(val);
    imageRecenter.setSlice(val);
    imageRenorm.setSlice(val);
  }//GEN-LAST:event_jScrollBar1AdjustmentValueChanged

  /**
   * Saves results in result path.
   *
   * @param evt
   */
  private void jMenuSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuSaveActionPerformed
  {//GEN-HEADEREND:event_jMenuSaveActionPerformed
    control.save((Frame) getParent());
  }//GEN-LAST:event_jMenuSaveActionPerformed

  /**
   * Saves results in a new results path.
   *
   * @param evt
   */
  private void jMenuSaveAsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuSaveAsActionPerformed
  {//GEN-HEADEREND:event_jMenuSaveAsActionPerformed
    control.saveAs((Frame) getParent());
  }//GEN-LAST:event_jMenuSaveAsActionPerformed

  private void jMenuQuitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuQuitActionPerformed
  {//GEN-HEADEREND:event_jMenuQuitActionPerformed
    control.quit((Frame) getParent());
  }//GEN-LAST:event_jMenuQuitActionPerformed

  private void jButtonRecenterRunActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonRecenterRunActionPerformed
  {//GEN-HEADEREND:event_jButtonRecenterRunActionPerformed
    int slice = -1;
    if (!jCheckRecenter.isSelected())
    {
      slice = jScrollBar1.getValue();
    }

    control.run(Step.FINAL_BACKGROUND, Step.RECENTER, slice);

  }//GEN-LAST:event_jButtonRecenterRunActionPerformed

  private void imageRecenterMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_imageRecenterMouseClicked
  {//GEN-HEADEREND:event_imageRecenterMouseClicked
    // Double click.
    if (evt.getClickCount() == 2)
    {
      control.show(Step.RECENTER);
    }
  }//GEN-LAST:event_imageRecenterMouseClicked

  private void imageDenoisMouseWheelMoved(java.awt.event.MouseWheelEvent evt)//GEN-FIRST:event_imageDenoisMouseWheelMoved
  {//GEN-HEADEREND:event_imageDenoisMouseWheelMoved
    int val = evt.getWheelRotation() + jScrollBar1.getValue();
    val = Math.max(val, 1);
    val = Math.min(val, control.getFluobt().getISize());

    setSlice(val);
  }//GEN-LAST:event_imageDenoisMouseWheelMoved

  private void formComponentHidden(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentHidden
  {//GEN-HEADEREND:event_formComponentHidden
    MainWorkFlowFrame mainFrame = ((MainWorkFlowFrame) getParent());
    mainFrame.setEnabled(true);
    mainFrame.updatePreviews();
  }//GEN-LAST:event_formComponentHidden

  private void jSkipFinalBActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jSkipFinalBActionPerformed
  {//GEN-HEADEREND:event_jSkipFinalBActionPerformed
    control.getFluobt().setDoFinalB(!jSkipFinalB.isSelected());
  }//GEN-LAST:event_jSkipFinalBActionPerformed

  private void jSkipRecenterActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jSkipRecenterActionPerformed
  {//GEN-HEADEREND:event_jSkipRecenterActionPerformed
    control.getFluobt().setDoRecenter(!jSkipRecenter.isSelected());
  }//GEN-LAST:event_jSkipRecenterActionPerformed

  private void jSkipRenormActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jSkipRenormActionPerformed
  {//GEN-HEADEREND:event_jSkipRenormActionPerformed
    control.getFluobt().setDoRenorm(!jSkipRenorm.isSelected());
  }//GEN-LAST:event_jSkipRenormActionPerformed

    private void jCheckRecenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckRecenterActionPerformed
      if (jCheckRecenter.isSelected())
      {
        jCheckRenorm.setEnabled(true);
      }
      else
      {
        jCheckRenorm.setEnabled(false);
        jCheckRenorm.setSelected(false);
      }
    }//GEN-LAST:event_jCheckRecenterActionPerformed

  // ==========================================================================
  //                   PERSONAL METHODS
  // ==========================================================================
  // -----------------------------------------------------------------------
  //                       Previews
  // -----------------------------------------------------------------------
  public void updatePreviews()
  {
    denoisPreview();
    finalBPreview();
    recenterPreview();
    renormPreview();
  }

  public void denoisPreview()
  {
    control.preview(imageDenois, true, Step.DENOIS);
  }

  public void finalBPreview()
  {

    ImageStack stack = getFinalBackStack();
    imageFinalB.setImageWithResize(stack, imageDenois.getSlice());

  }

  public void recenterPreview()
  {
    control.preview(imageRecenter, true, Step.RECENTER);
  }

  public void renormPreview()
  {
    control.preview(imageRenorm, true, Step.RENORM);
  }

  /**
   * Clears images previews.
   */
  public void clearPreviews()
  {
    imageDenois.setImageWithResize(null, 0);
    imageFinalB.setImageWithResize(null, 0);
    imageRecenter.setImageWithResize(null, 0);
    imageRenorm.setImageWithResize(null, 0);
  }

  /**
   * Get an image Stack with final background in black.
   *
   * @return
   */
  public ImageStack getFinalBackStack()
  {

    ArrayList<int[]> back = new ArrayList<int[]>(control.getFluobt().getISize());

    for (int i = 1; i <= control.getFluobt().getISize(); i++)
    {
      Path path = control.getFluobt().getBackgroundDir().resolve(control.
          getFluobt().BACKGROUND_NAMEFILE
                                                                 + "_" + i);
      if (Files.exists(path))
      {
        int[] currBack = (int[]) Utils.loadObject(path.toString());
        back.add(i - 1, currBack);
      }
      else
      {
        back.add(i - 1, null);
      }
    }

    StackFbt stack = StackFbt.loadImages(control.getFluobt().getDenoisDir(),
                                         control.getFluobt().
        getISize());

    if (stack == null)
    {
      stack = StackFbt.loadImages(control.getFluobt().getOrigDir(), control.
          getFluobt().getISize());

      if (stack == null)
      {
        System.out.println(
            "Warning RenormDialog.getFinalBackStack : Original images not loaded, null returned.");
        return null;
      }
    }

    stack.setBackground(back);

    int size = control.getFluobt().getISize();
    int pixNb = control.getFluobt().getIWidth() * control.getFluobt().
        getIHeight();
    for (int slice = 0; slice < size; slice++)
    {

      int[] currBack = back.get(slice);

      if (currBack != null)
      {
        for (int index = 0; index < pixNb; index++)
        {
          if (currBack[ index] == 1)
          {
            stack.getProcessor(slice + 1).set(index, 65535);
          }
        }
      }
    }

    return stack;
  }

  // ==========================================================================
  //                    MAIN
  // ==========================================================================
  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.
          getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    }
    catch (ClassNotFoundException ex)
    {
      java.util.logging.Logger.getLogger(RenormDialog.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    catch (InstantiationException ex)
    {
      java.util.logging.Logger.getLogger(RenormDialog.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    catch (IllegalAccessException ex)
    {
      java.util.logging.Logger.getLogger(RenormDialog.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      java.util.logging.Logger.getLogger(RenormDialog.class.getName()).log(
          java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        RenormDialog dialog = new RenormDialog(null, true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter()
        {
          @Override
          public void windowClosing(java.awt.event.WindowEvent e)
          {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }

  // ==========================================================================
  //                    GETTERS
  // ==========================================================================
  public int getSlice()
  {
    return jScrollBar1.getValue();
  }

  // ==========================================================================
  //                    SETTERS
  // ==========================================================================
  public void setSlice(int _slice)
  {
    jScrollBar1.setValue(_slice);
    imageDenois.setSlice(_slice);
    imageFinalB.setSlice(_slice);
    imageRenorm.setSlice(_slice);
  }

  public void setScrollValues(int newValue, int newExtends, int newMin,
                              int newMax)
  {
    jScrollBar1.setValues(newValue, newExtends, newMin, newMax);
    imageDenois.setSlice(newValue);
    imageFinalB.setSlice(newValue);
    imageRenorm.setSlice(newValue);
  }

  /**
   * Set ProgressBar value.
   *
   * @param _prog
   */
  public void setProgress(double _prog)
  {
    jProgressBar1.setValue((int) _prog);
  }

  /**
   * @param skipFinalB must final background be skipped or not
   */
  public void setSkipFinalB(boolean skipFinalB)
  {
    jSkipFinalB.setSelected(skipFinalB);
  }

  /**
   * @param skipRecenter must recenter be skipped or not
   */
  public void setSkipRecenter(boolean skipRecenter)
  {
    jSkipRecenter.setSelected(skipRecenter);
  }

  /**
   * @param skipRenorm must renormalisation be skipped or not
   */
  public void setSkipRenorm(boolean skipRenorm)
  {
    jSkipRenorm.setSelected(skipRenorm);
  }

  // ==========================================================================
  //                    PERSONNAL ATTRIBUTES
  // ==========================================================================
  InterfaceControl control;

  // ==========================================================================
  //                     ATTRIBUTES
  // ==========================================================================
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private cellst.Interface.ImagePanel imageDenois;
  private cellst.Interface.ImagePanel imageFinalB;
  private cellst.Interface.ImagePanel imageRecenter;
  private cellst.Interface.ImagePanel imageRenorm;
  private javax.swing.JButton jButtonFinalBParam;
  private javax.swing.JButton jButtonFinalBRun;
  private javax.swing.JButton jButtonRecenterRun;
  private javax.swing.JButton jButtonRenormParam;
  private javax.swing.JButton jButtonRenormRun;
  private javax.swing.JButton jButtonReturn;
  private javax.swing.JButton jButtonRunAll;
  private javax.swing.JButton jButtonStop;
  private javax.swing.JCheckBox jCheckFinalB;
  private javax.swing.JCheckBox jCheckRecenter;
  private javax.swing.JCheckBox jCheckRenorm;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JMenuBar jMenuBar;
  private javax.swing.JMenu jMenuFile;
  private javax.swing.JMenu jMenuHelp;
  private javax.swing.JMenuItem jMenuQuit;
  private javax.swing.JMenuItem jMenuSave;
  private javax.swing.JMenuItem jMenuSaveAs;
  private javax.swing.JProgressBar jProgressBar1;
  private javax.swing.JScrollBar jScrollBar1;
  private javax.swing.JPopupMenu.Separator jSeparator1;
  private javax.swing.JCheckBox jSkipFinalB;
  private javax.swing.JCheckBox jSkipRecenter;
  private javax.swing.JCheckBox jSkipRenorm;
  // End of variables declaration//GEN-END:variables
}
